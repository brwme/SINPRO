'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3603
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MELDataSet2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MELDataSet2
    Inherits Global.System.Data.DataSet
    
    Private tablesp_consulta_Productos_Factura As sp_consulta_Productos_FacturaDataTable
    
    Private tablesp_consultaProducto_GranSelect As sp_consultaProducto_GranSelectDataTable
    
    Private tablesp_consultaPedidoCliente As sp_consultaPedidoClienteDataTable
    
    Private tablesp_consultaIVA As sp_consultaIVADataTable
    
    Private tablesp_consultaPedido_Producto_Cliente As sp_consultaPedido_Producto_ClienteDataTable
    
    Private tablesp_consultaCliente As sp_consultaClienteDataTable
    
    Private tableTable_GuiaTransporte As Table_GuiaTransporteDataTable
    
    Private tableTable_GuiaDesglosada As Table_GuiaDesglosadaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sp_consulta_Productos_Factura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Productos_FacturaDataTable(ds.Tables("sp_consulta_Productos_Factura")))
            End If
            If (Not (ds.Tables("sp_consultaProducto_GranSelect")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProducto_GranSelectDataTable(ds.Tables("sp_consultaProducto_GranSelect")))
            End If
            If (Not (ds.Tables("sp_consultaPedidoCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedidoClienteDataTable(ds.Tables("sp_consultaPedidoCliente")))
            End If
            If (Not (ds.Tables("sp_consultaIVA")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaIVADataTable(ds.Tables("sp_consultaIVA")))
            End If
            If (Not (ds.Tables("sp_consultaPedido_Producto_Cliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedido_Producto_ClienteDataTable(ds.Tables("sp_consultaPedido_Producto_Cliente")))
            End If
            If (Not (ds.Tables("sp_consultaCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaClienteDataTable(ds.Tables("sp_consultaCliente")))
            End If
            If (Not (ds.Tables("Table_GuiaTransporte")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaTransporteDataTable(ds.Tables("Table_GuiaTransporte")))
            End If
            If (Not (ds.Tables("Table_GuiaDesglosada")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaDesglosadaDataTable(ds.Tables("Table_GuiaDesglosada")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_Productos_Factura() As sp_consulta_Productos_FacturaDataTable
        Get
            Return Me.tablesp_consulta_Productos_Factura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProducto_GranSelect() As sp_consultaProducto_GranSelectDataTable
        Get
            Return Me.tablesp_consultaProducto_GranSelect
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaPedidoCliente() As sp_consultaPedidoClienteDataTable
        Get
            Return Me.tablesp_consultaPedidoCliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaIVA() As sp_consultaIVADataTable
        Get
            Return Me.tablesp_consultaIVA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaPedido_Producto_Cliente() As sp_consultaPedido_Producto_ClienteDataTable
        Get
            Return Me.tablesp_consultaPedido_Producto_Cliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCliente() As sp_consultaClienteDataTable
        Get
            Return Me.tablesp_consultaCliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_GuiaTransporte() As Table_GuiaTransporteDataTable
        Get
            Return Me.tableTable_GuiaTransporte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_GuiaDesglosada() As Table_GuiaDesglosadaDataTable
        Get
            Return Me.tableTable_GuiaDesglosada
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MELDataSet2 = CType(MyBase.Clone,MELDataSet2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sp_consulta_Productos_Factura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Productos_FacturaDataTable(ds.Tables("sp_consulta_Productos_Factura")))
            End If
            If (Not (ds.Tables("sp_consultaProducto_GranSelect")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProducto_GranSelectDataTable(ds.Tables("sp_consultaProducto_GranSelect")))
            End If
            If (Not (ds.Tables("sp_consultaPedidoCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedidoClienteDataTable(ds.Tables("sp_consultaPedidoCliente")))
            End If
            If (Not (ds.Tables("sp_consultaIVA")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaIVADataTable(ds.Tables("sp_consultaIVA")))
            End If
            If (Not (ds.Tables("sp_consultaPedido_Producto_Cliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedido_Producto_ClienteDataTable(ds.Tables("sp_consultaPedido_Producto_Cliente")))
            End If
            If (Not (ds.Tables("sp_consultaCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaClienteDataTable(ds.Tables("sp_consultaCliente")))
            End If
            If (Not (ds.Tables("Table_GuiaTransporte")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaTransporteDataTable(ds.Tables("Table_GuiaTransporte")))
            End If
            If (Not (ds.Tables("Table_GuiaDesglosada")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaDesglosadaDataTable(ds.Tables("Table_GuiaDesglosada")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesp_consulta_Productos_Factura = CType(MyBase.Tables("sp_consulta_Productos_Factura"),sp_consulta_Productos_FacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_Productos_Factura) Is Nothing) Then
                Me.tablesp_consulta_Productos_Factura.InitVars
            End If
        End If
        Me.tablesp_consultaProducto_GranSelect = CType(MyBase.Tables("sp_consultaProducto_GranSelect"),sp_consultaProducto_GranSelectDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProducto_GranSelect) Is Nothing) Then
                Me.tablesp_consultaProducto_GranSelect.InitVars
            End If
        End If
        Me.tablesp_consultaPedidoCliente = CType(MyBase.Tables("sp_consultaPedidoCliente"),sp_consultaPedidoClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaPedidoCliente) Is Nothing) Then
                Me.tablesp_consultaPedidoCliente.InitVars
            End If
        End If
        Me.tablesp_consultaIVA = CType(MyBase.Tables("sp_consultaIVA"),sp_consultaIVADataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaIVA) Is Nothing) Then
                Me.tablesp_consultaIVA.InitVars
            End If
        End If
        Me.tablesp_consultaPedido_Producto_Cliente = CType(MyBase.Tables("sp_consultaPedido_Producto_Cliente"),sp_consultaPedido_Producto_ClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaPedido_Producto_Cliente) Is Nothing) Then
                Me.tablesp_consultaPedido_Producto_Cliente.InitVars
            End If
        End If
        Me.tablesp_consultaCliente = CType(MyBase.Tables("sp_consultaCliente"),sp_consultaClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCliente) Is Nothing) Then
                Me.tablesp_consultaCliente.InitVars
            End If
        End If
        Me.tableTable_GuiaTransporte = CType(MyBase.Tables("Table_GuiaTransporte"),Table_GuiaTransporteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_GuiaTransporte) Is Nothing) Then
                Me.tableTable_GuiaTransporte.InitVars
            End If
        End If
        Me.tableTable_GuiaDesglosada = CType(MyBase.Tables("Table_GuiaDesglosada"),Table_GuiaDesglosadaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_GuiaDesglosada) Is Nothing) Then
                Me.tableTable_GuiaDesglosada.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MELDataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MELDataSet2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesp_consulta_Productos_Factura = New sp_consulta_Productos_FacturaDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_Productos_Factura)
        Me.tablesp_consultaProducto_GranSelect = New sp_consultaProducto_GranSelectDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProducto_GranSelect)
        Me.tablesp_consultaPedidoCliente = New sp_consultaPedidoClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consultaPedidoCliente)
        Me.tablesp_consultaIVA = New sp_consultaIVADataTable
        MyBase.Tables.Add(Me.tablesp_consultaIVA)
        Me.tablesp_consultaPedido_Producto_Cliente = New sp_consultaPedido_Producto_ClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consultaPedido_Producto_Cliente)
        Me.tablesp_consultaCliente = New sp_consultaClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consultaCliente)
        Me.tableTable_GuiaTransporte = New Table_GuiaTransporteDataTable
        MyBase.Tables.Add(Me.tableTable_GuiaTransporte)
        Me.tableTable_GuiaDesglosada = New Table_GuiaDesglosadaDataTable
        MyBase.Tables.Add(Me.tableTable_GuiaDesglosada)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_Productos_Factura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProducto_GranSelect() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaPedidoCliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaIVA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaPedido_Producto_Cliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_GuiaTransporte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_GuiaDesglosada() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MELDataSet2 = New MELDataSet2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub sp_consulta_Productos_FacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_Productos_FacturaRowChangeEvent)
    
    Public Delegate Sub sp_consultaProducto_GranSelectRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProducto_GranSelectRowChangeEvent)
    
    Public Delegate Sub sp_consultaPedidoClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaPedidoClienteRowChangeEvent)
    
    Public Delegate Sub sp_consultaIVARowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaIVARowChangeEvent)
    
    Public Delegate Sub sp_consultaPedido_Producto_ClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaPedido_Producto_ClienteRowChangeEvent)
    
    Public Delegate Sub sp_consultaClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaClienteRowChangeEvent)
    
    Public Delegate Sub Table_GuiaTransporteRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_GuiaTransporteRowChangeEvent)
    
    Public Delegate Sub Table_GuiaDesglosadaRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_GuiaDesglosadaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_Productos_FacturaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_Productos_Factura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_Productos_FacturaRow
            Get
                Return CType(Me.Rows(index),sp_consulta_Productos_FacturaRow)
            End Get
        End Property
        
        Public Event sp_consulta_Productos_FacturaRowChanging As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        Public Event sp_consulta_Productos_FacturaRowChanged As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        Public Event sp_consulta_Productos_FacturaRowDeleting As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        Public Event sp_consulta_Productos_FacturaRowDeleted As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_Productos_FacturaRow(ByVal row As sp_consulta_Productos_FacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_Productos_FacturaRow(ByVal Cantidad As Decimal, ByVal CodigoProducto As String, ByVal Nombre As String, ByVal Modelo As String, ByVal Precio As Double) As sp_consulta_Productos_FacturaRow
            Dim rowsp_consulta_Productos_FacturaRow As sp_consulta_Productos_FacturaRow = CType(Me.NewRow,sp_consulta_Productos_FacturaRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, CodigoProducto, Nombre, Modelo, Precio}
            rowsp_consulta_Productos_FacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_Productos_FacturaRow)
            Return rowsp_consulta_Productos_FacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_Productos_FacturaDataTable = CType(MyBase.Clone,sp_consulta_Productos_FacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_Productos_FacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnPrecio = MyBase.Columns("Precio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnCantidad.ReadOnly = true
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 9
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 20
            Me.columnPrecio.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_Productos_FacturaRow() As sp_consulta_Productos_FacturaRow
            Return CType(Me.NewRow,sp_consulta_Productos_FacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_Productos_FacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_Productos_FacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowChanged(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowChanging(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowDeleted(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowDeleting(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_Productos_FacturaRow(ByVal row As sp_consulta_Productos_FacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_Productos_FacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProducto_GranSelectDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProducto_GranSelect"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProducto_GranSelectRow
            Get
                Return CType(Me.Rows(index),sp_consultaProducto_GranSelectRow)
            End Get
        End Property
        
        Public Event sp_consultaProducto_GranSelectRowChanging As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        Public Event sp_consultaProducto_GranSelectRowChanged As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        Public Event sp_consultaProducto_GranSelectRowDeleting As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        Public Event sp_consultaProducto_GranSelectRowDeleted As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProducto_GranSelectRow(ByVal row As sp_consultaProducto_GranSelectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProducto_GranSelectRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal Modelo As String, ByVal Ubicacion As String) As sp_consultaProducto_GranSelectRow
            Dim rowsp_consultaProducto_GranSelectRow As sp_consultaProducto_GranSelectRow = CType(Me.NewRow,sp_consultaProducto_GranSelectRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CantidadExistencia, PrecioVenta, Modelo, Ubicacion}
            rowsp_consultaProducto_GranSelectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProducto_GranSelectRow)
            Return rowsp_consultaProducto_GranSelectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProducto_GranSelectDataTable = CType(MyBase.Clone,sp_consultaProducto_GranSelectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProducto_GranSelectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.MaxLength = 9
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 254
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 241
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProducto_GranSelectRow() As sp_consultaProducto_GranSelectRow
            Return CType(Me.NewRow,sp_consultaProducto_GranSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProducto_GranSelectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProducto_GranSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowChanged(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowChanging(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowDeleted(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowDeleting(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProducto_GranSelectRow(ByVal row As sp_consultaProducto_GranSelectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProducto_GranSelectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaPedidoClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoPedido As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnFacturado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaPedidoCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaPedidoClienteRow
            Get
                Return CType(Me.Rows(index),sp_consultaPedidoClienteRow)
            End Get
        End Property
        
        Public Event sp_consultaPedidoClienteRowChanging As sp_consultaPedidoClienteRowChangeEventHandler
        
        Public Event sp_consultaPedidoClienteRowChanged As sp_consultaPedidoClienteRowChangeEventHandler
        
        Public Event sp_consultaPedidoClienteRowDeleting As sp_consultaPedidoClienteRowChangeEventHandler
        
        Public Event sp_consultaPedidoClienteRowDeleted As sp_consultaPedidoClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaPedidoClienteRow(ByVal row As sp_consultaPedidoClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaPedidoClienteRow(ByVal Fecha As Date, ByVal CodigoCliente As Integer, ByVal MontoTotal As Double, ByVal Facturado As Boolean) As sp_consultaPedidoClienteRow
            Dim rowsp_consultaPedidoClienteRow As sp_consultaPedidoClienteRow = CType(Me.NewRow,sp_consultaPedidoClienteRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha, CodigoCliente, MontoTotal, Facturado}
            rowsp_consultaPedidoClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaPedidoClienteRow)
            Return rowsp_consultaPedidoClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoPedido(ByVal CodigoPedido As Integer) As sp_consultaPedidoClienteRow
            Return CType(Me.Rows.Find(New Object() {CodigoPedido}),sp_consultaPedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaPedidoClienteDataTable = CType(MyBase.Clone,sp_consultaPedidoClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaPedidoClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoPedido = MyBase.Columns("CodigoPedido")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnFacturado = MyBase.Columns("Facturado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoPedido = New Global.System.Data.DataColumn("CodigoPedido", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPedido)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnFacturado = New Global.System.Data.DataColumn("Facturado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoPedido}, true))
            Me.columnCodigoPedido.AutoIncrement = true
            Me.columnCodigoPedido.AllowDBNull = false
            Me.columnCodigoPedido.ReadOnly = true
            Me.columnCodigoPedido.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnMontoTotal.AllowDBNull = false
            Me.columnFacturado.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaPedidoClienteRow() As sp_consultaPedidoClienteRow
            Return CType(Me.NewRow,sp_consultaPedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaPedidoClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaPedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaPedidoClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowChanged(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaPedidoClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowChanging(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaPedidoClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowDeleted(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaPedidoClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowDeleting(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaPedidoClienteRow(ByVal row As sp_consultaPedidoClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaPedidoClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaIVADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columniva As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaIVA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaIVARow
            Get
                Return CType(Me.Rows(index),sp_consultaIVARow)
            End Get
        End Property
        
        Public Event sp_consultaIVARowChanging As sp_consultaIVARowChangeEventHandler
        
        Public Event sp_consultaIVARowChanged As sp_consultaIVARowChangeEventHandler
        
        Public Event sp_consultaIVARowDeleting As sp_consultaIVARowChangeEventHandler
        
        Public Event sp_consultaIVARowDeleted As sp_consultaIVARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaIVARow(ByVal row As sp_consultaIVARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaIVARow(ByVal iva As Double) As sp_consultaIVARow
            Dim rowsp_consultaIVARow As sp_consultaIVARow = CType(Me.NewRow,sp_consultaIVARow)
            Dim columnValuesArray() As Object = New Object() {iva}
            rowsp_consultaIVARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaIVARow)
            Return rowsp_consultaIVARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaIVADataTable = CType(MyBase.Clone,sp_consultaIVADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaIVADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columniva = MyBase.Columns("iva")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columniva = New Global.System.Data.DataColumn("iva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniva)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaIVARow() As sp_consultaIVARow
            Return CType(Me.NewRow,sp_consultaIVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaIVARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaIVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaIVARowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowChanged(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaIVARowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowChanging(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaIVARowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowDeleted(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaIVARowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowDeleting(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaIVARow(ByVal row As sp_consultaIVARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaIVADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaPedido_Producto_ClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaPedido_Producto_Cliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaPedido_Producto_ClienteRow
            Get
                Return CType(Me.Rows(index),sp_consultaPedido_Producto_ClienteRow)
            End Get
        End Property
        
        Public Event sp_consultaPedido_Producto_ClienteRowChanging As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        Public Event sp_consultaPedido_Producto_ClienteRowChanged As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        Public Event sp_consultaPedido_Producto_ClienteRowDeleting As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        Public Event sp_consultaPedido_Producto_ClienteRowDeleted As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaPedido_Producto_ClienteRow(ByVal row As sp_consultaPedido_Producto_ClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaPedido_Producto_ClienteRow(ByVal Cantidad As Decimal, ByVal CodigoProducto As String, ByVal Nombre As String, ByVal Precio As Double, ByVal CantidadExistencia As Decimal, ByVal Modelo As String, ByVal Ubicacion As String) As sp_consultaPedido_Producto_ClienteRow
            Dim rowsp_consultaPedido_Producto_ClienteRow As sp_consultaPedido_Producto_ClienteRow = CType(Me.NewRow,sp_consultaPedido_Producto_ClienteRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, CodigoProducto, Nombre, Precio, CantidadExistencia, Modelo, Ubicacion}
            rowsp_consultaPedido_Producto_ClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaPedido_Producto_ClienteRow)
            Return rowsp_consultaPedido_Producto_ClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaPedido_Producto_ClienteDataTable = CType(MyBase.Clone,sp_consultaPedido_Producto_ClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaPedido_Producto_ClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCantidad.AllowDBNull = false
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 9
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnPrecio.AllowDBNull = false
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 20
            Me.columnUbicacion.AllowDBNull = false
            Me.columnUbicacion.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaPedido_Producto_ClienteRow() As sp_consultaPedido_Producto_ClienteRow
            Return CType(Me.NewRow,sp_consultaPedido_Producto_ClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaPedido_Producto_ClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaPedido_Producto_ClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowChanged(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowChanging(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowDeleted(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowDeleting(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaPedido_Producto_ClienteRow(ByVal row As sp_consultaPedido_Producto_ClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaPedido_Producto_ClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnRepresentante As Global.System.Data.DataColumn
        
        Private columnGerente As Global.System.Data.DataColumn
        
        Private columncodZona As Global.System.Data.DataColumn
        
        Private columnzona As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnPermitirCredito As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnClasificacionABC As Global.System.Data.DataColumn
        
        Private columnAutorizado As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        Private columnContEspecial As Global.System.Data.DataColumn
        
        Private columnCelular As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepresentanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepresentante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GerenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGerente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codZonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodZona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermitirCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermitirCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClasificacionABCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasificacionABC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContEspecialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContEspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CelularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaClienteRow
            Get
                Return CType(Me.Rows(index),sp_consultaClienteRow)
            End Get
        End Property
        
        Public Event sp_consultaClienteRowChanging As sp_consultaClienteRowChangeEventHandler
        
        Public Event sp_consultaClienteRowChanged As sp_consultaClienteRowChangeEventHandler
        
        Public Event sp_consultaClienteRowDeleting As sp_consultaClienteRowChangeEventHandler
        
        Public Event sp_consultaClienteRowDeleted As sp_consultaClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaClienteRow(ByVal row As sp_consultaClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaClienteRow( _
                    ByVal CodigoCliente As Integer,  _
                    ByVal RazonSocial As String,  _
                    ByVal Rif As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Representante As String,  _
                    ByVal Gerente As String,  _
                    ByVal codZona As Integer,  _
                    ByVal zona As String,  _
                    ByVal Estado As String,  _
                    ByVal PermitirCredito As Boolean,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal ClasificacionABC As String,  _
                    ByVal Autorizado As Boolean,  _
                    ByVal eliminado As Boolean,  _
                    ByVal ContEspecial As Boolean,  _
                    ByVal Celular As String,  _
                    ByVal Observacion As String,  _
                    ByVal CodigoVendedor As Integer,  _
                    ByVal Nombre As String) As sp_consultaClienteRow
            Dim rowsp_consultaClienteRow As sp_consultaClienteRow = CType(Me.NewRow,sp_consultaClienteRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCliente, RazonSocial, Rif, FechaRegistro, Telefono1, Telefono2, Fax, Email, Direccion, Representante, Gerente, codZona, zona, Estado, PermitirCredito, LimiteCredito, ClasificacionABC, Autorizado, eliminado, ContEspecial, Celular, Observacion, CodigoVendedor, Nombre}
            rowsp_consultaClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaClienteRow)
            Return rowsp_consultaClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaClienteDataTable = CType(MyBase.Clone,sp_consultaClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnRepresentante = MyBase.Columns("Representante")
            Me.columnGerente = MyBase.Columns("Gerente")
            Me.columncodZona = MyBase.Columns("codZona")
            Me.columnzona = MyBase.Columns("zona")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnPermitirCredito = MyBase.Columns("PermitirCredito")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnClasificacionABC = MyBase.Columns("ClasificacionABC")
            Me.columnAutorizado = MyBase.Columns("Autorizado")
            Me.columneliminado = MyBase.Columns("eliminado")
            Me.columnContEspecial = MyBase.Columns("ContEspecial")
            Me.columnCelular = MyBase.Columns("Celular")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnRepresentante = New Global.System.Data.DataColumn("Representante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepresentante)
            Me.columnGerente = New Global.System.Data.DataColumn("Gerente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGerente)
            Me.columncodZona = New Global.System.Data.DataColumn("codZona", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodZona)
            Me.columnzona = New Global.System.Data.DataColumn("zona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzona)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnPermitirCredito = New Global.System.Data.DataColumn("PermitirCredito", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermitirCredito)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnClasificacionABC = New Global.System.Data.DataColumn("ClasificacionABC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasificacionABC)
            Me.columnAutorizado = New Global.System.Data.DataColumn("Autorizado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizado)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.columnContEspecial = New Global.System.Data.DataColumn("ContEspecial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContEspecial)
            Me.columnCelular = New Global.System.Data.DataColumn("Celular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCelular)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnRif.AllowDBNull = false
            Me.columnRif.MaxLength = 15
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnTelefono1.MaxLength = 30
            Me.columnTelefono2.MaxLength = 30
            Me.columnFax.MaxLength = 30
            Me.columnEmail.MaxLength = 50
            Me.columnDireccion.MaxLength = 200
            Me.columnRepresentante.MaxLength = 50
            Me.columnGerente.MaxLength = 50
            Me.columnzona.MaxLength = 100
            Me.columnEstado.MaxLength = 50
            Me.columnClasificacionABC.MaxLength = 1
            Me.columnAutorizado.AllowDBNull = false
            Me.columneliminado.AllowDBNull = false
            Me.columnCelular.MaxLength = 30
            Me.columnObservacion.MaxLength = 250
            Me.columnNombre.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaClienteRow() As sp_consultaClienteRow
            Return CType(Me.NewRow,sp_consultaClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowChanged(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowChanging(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowDeleted(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowDeleting(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaClienteRow(ByVal row As sp_consultaClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_GuiaTransporteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodFactura As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnFlete As Global.System.Data.DataColumn
        
        Private columnBultos As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_GuiaTransporte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_GuiaTransporteRow
            Get
                Return CType(Me.Rows(index),Table_GuiaTransporteRow)
            End Get
        End Property
        
        Public Event Table_GuiaTransporteRowChanging As Table_GuiaTransporteRowChangeEventHandler
        
        Public Event Table_GuiaTransporteRowChanged As Table_GuiaTransporteRowChangeEventHandler
        
        Public Event Table_GuiaTransporteRowDeleting As Table_GuiaTransporteRowChangeEventHandler
        
        Public Event Table_GuiaTransporteRowDeleted As Table_GuiaTransporteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_GuiaTransporteRow(ByVal row As Table_GuiaTransporteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_GuiaTransporteRow(ByVal CodFactura As String, ByVal RazonSocial As String, ByVal Flete As String, ByVal Bultos As Integer, ByVal Monto As Double, ByVal Direccion As String) As Table_GuiaTransporteRow
            Dim rowTable_GuiaTransporteRow As Table_GuiaTransporteRow = CType(Me.NewRow,Table_GuiaTransporteRow)
            Dim columnValuesArray() As Object = New Object() {CodFactura, RazonSocial, Flete, Bultos, Monto, Direccion}
            rowTable_GuiaTransporteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_GuiaTransporteRow)
            Return rowTable_GuiaTransporteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_GuiaTransporteDataTable = CType(MyBase.Clone,Table_GuiaTransporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_GuiaTransporteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodFactura = MyBase.Columns("CodFactura")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnFlete = MyBase.Columns("Flete")
            Me.columnBultos = MyBase.Columns("Bultos")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnDireccion = MyBase.Columns("Direccion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodFactura = New Global.System.Data.DataColumn("CodFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodFactura)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnFlete = New Global.System.Data.DataColumn("Flete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlete)
            Me.columnBultos = New Global.System.Data.DataColumn("Bultos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultos)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_GuiaTransporteRow() As Table_GuiaTransporteRow
            Return CType(Me.NewRow,Table_GuiaTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_GuiaTransporteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_GuiaTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_GuiaTransporteRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowChanged(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_GuiaTransporteRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowChanging(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_GuiaTransporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowDeleted(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_GuiaTransporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowDeleting(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_GuiaTransporteRow(ByVal row As Table_GuiaTransporteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_GuiaTransporteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_GuiaDesglosadaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnDestino As Global.System.Data.DataColumn
        
        Private columnTlf As Global.System.Data.DataColumn
        
        Private columnFlete As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnFactura As Global.System.Data.DataColumn
        
        Private columnBultos As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnColumn1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_GuiaDesglosada"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TlfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTlf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Column1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumn1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_GuiaDesglosadaRow
            Get
                Return CType(Me.Rows(index),Table_GuiaDesglosadaRow)
            End Get
        End Property
        
        Public Event Table_GuiaDesglosadaRowChanging As Table_GuiaDesglosadaRowChangeEventHandler
        
        Public Event Table_GuiaDesglosadaRowChanged As Table_GuiaDesglosadaRowChangeEventHandler
        
        Public Event Table_GuiaDesglosadaRowDeleting As Table_GuiaDesglosadaRowChangeEventHandler
        
        Public Event Table_GuiaDesglosadaRowDeleted As Table_GuiaDesglosadaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_GuiaDesglosadaRow(ByVal row As Table_GuiaDesglosadaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_GuiaDesglosadaRow(ByVal Cliente As String, ByVal Destino As String, ByVal Tlf As String, ByVal Flete As String, ByVal Rif As String, ByVal Factura As String, ByVal Bultos As String, ByVal Monto As String, ByVal Column1 As String) As Table_GuiaDesglosadaRow
            Dim rowTable_GuiaDesglosadaRow As Table_GuiaDesglosadaRow = CType(Me.NewRow,Table_GuiaDesglosadaRow)
            Dim columnValuesArray() As Object = New Object() {Cliente, Destino, Tlf, Flete, Rif, Factura, Bultos, Monto, Column1}
            rowTable_GuiaDesglosadaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_GuiaDesglosadaRow)
            Return rowTable_GuiaDesglosadaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_GuiaDesglosadaDataTable = CType(MyBase.Clone,Table_GuiaDesglosadaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_GuiaDesglosadaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnDestino = MyBase.Columns("Destino")
            Me.columnTlf = MyBase.Columns("Tlf")
            Me.columnFlete = MyBase.Columns("Flete")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnFactura = MyBase.Columns("Factura")
            Me.columnBultos = MyBase.Columns("Bultos")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnColumn1 = MyBase.Columns("Column1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnDestino = New Global.System.Data.DataColumn("Destino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestino)
            Me.columnTlf = New Global.System.Data.DataColumn("Tlf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTlf)
            Me.columnFlete = New Global.System.Data.DataColumn("Flete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlete)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnFactura = New Global.System.Data.DataColumn("Factura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura)
            Me.columnBultos = New Global.System.Data.DataColumn("Bultos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultos)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnColumn1 = New Global.System.Data.DataColumn("Column1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumn1)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_GuiaDesglosadaRow() As Table_GuiaDesglosadaRow
            Return CType(Me.NewRow,Table_GuiaDesglosadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_GuiaDesglosadaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_GuiaDesglosadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_GuiaDesglosadaRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowChanged(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_GuiaDesglosadaRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowChanging(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_GuiaDesglosadaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowDeleted(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_GuiaDesglosadaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowDeleting(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_GuiaDesglosadaRow(ByVal row As Table_GuiaDesglosadaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet2 = New MELDataSet2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_GuiaDesglosadaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_Productos_FacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_Productos_Factura As sp_consulta_Productos_FacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_Productos_Factura = CType(Me.Table,sp_consulta_Productos_FacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_Factura.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_consulta_Productos_Factura' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.ModeloColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_Factura.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_consulta_Productos_Factura.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProducto_GranSelectRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProducto_GranSelect As sp_consultaProducto_GranSelectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProducto_GranSelect = CType(Me.Table,sp_consultaProducto_GranSelectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Modelo' de la tabla 'sp_consultaProducto_GranSelect' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ubicacion' de la tabla 'sp_consultaProducto_GranSelect' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProducto_GranSelect.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaPedidoClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaPedidoCliente As sp_consultaPedidoClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaPedidoCliente = CType(Me.Table,sp_consultaPedidoClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPedido() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.CodigoPedidoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.CodigoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Double
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.MontoTotalColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturado() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.FacturadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.FacturadoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaIVARow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaIVA As sp_consultaIVADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaIVA = CType(Me.Table,sp_consultaIVADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property iva() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaIVA.ivaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'iva' de la tabla 'sp_consultaIVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaIVA.ivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsivaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaIVA.ivaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetivaNull()
            Me(Me.tablesp_consultaIVA.ivaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaPedido_Producto_ClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaPedido_Producto_Cliente As sp_consultaPedido_Producto_ClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaPedido_Producto_Cliente = CType(Me.Table,sp_consultaPedido_Producto_ClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.ModeloColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.UbicacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.UbicacionColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCliente As sp_consultaClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCliente = CType(Me.Table,sp_consultaClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaCliente.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_consultaCliente.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Return CType(Me(Me.tablesp_consultaCliente.RifColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablesp_consultaCliente.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono1' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono2' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fax' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Email' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Direccion' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Representante() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.RepresentanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Representante' de la tabla 'sp_consultaCliente' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.RepresentanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gerente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.GerenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Gerente' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.GerenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codZona() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.codZonaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codZona' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.codZonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zona() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.zonaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'zona' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.zonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermitirCredito() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.PermitirCreditoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PermitirCredito' de la tabla 'sp_consultaCliente' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.PermitirCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_consultaCliente' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClasificacionABC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.ClasificacionABCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClasificacionABC' de la tabla 'sp_consultaCliente' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.ClasificacionABCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizado() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaCliente.AutorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.AutorizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaCliente.eliminadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContEspecial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.ContEspecialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContEspecial' de la tabla 'sp_consultaCliente' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.ContEspecialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.CelularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Celular' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.CelularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Observacion' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.CodigoVendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoVendedor' de la tabla 'sp_consultaCliente' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_consultaCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tablesp_consultaCliente.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tablesp_consultaCliente.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tablesp_consultaCliente.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablesp_consultaCliente.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablesp_consultaCliente.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepresentanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.RepresentanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepresentanteNull()
            Me(Me.tablesp_consultaCliente.RepresentanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGerenteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.GerenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGerenteNull()
            Me(Me.tablesp_consultaCliente.GerenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodZonaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.codZonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodZonaNull()
            Me(Me.tablesp_consultaCliente.codZonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IszonaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.zonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetzonaNull()
            Me(Me.tablesp_consultaCliente.zonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_consultaCliente.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermitirCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.PermitirCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermitirCreditoNull()
            Me(Me.tablesp_consultaCliente.PermitirCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_consultaCliente.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasificacionABCNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.ClasificacionABCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasificacionABCNull()
            Me(Me.tablesp_consultaCliente.ClasificacionABCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContEspecialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.ContEspecialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContEspecialNull()
            Me(Me.tablesp_consultaCliente.ContEspecialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.CelularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCelularNull()
            Me(Me.tablesp_consultaCliente.CelularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaCliente.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.CodigoVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVendedorNull()
            Me(Me.tablesp_consultaCliente.CodigoVendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaCliente.NombreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_GuiaTransporteRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_GuiaTransporte As Table_GuiaTransporteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_GuiaTransporte = CType(Me.Table,Table_GuiaTransporteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.CodFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodFactura' de la tabla 'Table_GuiaTransporte' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.CodFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'Table_GuiaTransporte' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flete() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.FleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Flete' de la tabla 'Table_GuiaTransporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.FleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bultos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.BultosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Bultos' de la tabla 'Table_GuiaTransporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.BultosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.MontoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Monto' de la tabla 'Table_GuiaTransporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Direccion' de la tabla 'Table_GuiaTransporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.CodFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodFacturaNull()
            Me(Me.tableTable_GuiaTransporte.CodFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableTable_GuiaTransporte.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFleteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.FleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFleteNull()
            Me(Me.tableTable_GuiaTransporte.FleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultosNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.BultosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultosNull()
            Me(Me.tableTable_GuiaTransporte.BultosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableTable_GuiaTransporte.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableTable_GuiaTransporte.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_GuiaDesglosadaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_GuiaDesglosada As Table_GuiaDesglosadaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_GuiaDesglosada = CType(Me.Table,Table_GuiaDesglosadaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cliente' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destino() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.DestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Destino' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.DestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tlf() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.TlfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tlf' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.TlfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flete() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.FleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Flete' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.FleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.RifColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Rif' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.FacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Factura' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bultos() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.BultosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Bultos' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.BultosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.MontoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Monto' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Column1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.Column1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Column1' de la tabla 'Table_GuiaDesglosada' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.Column1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tableTable_GuiaDesglosada.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestinoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.DestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestinoNull()
            Me(Me.tableTable_GuiaDesglosada.DestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTlfNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.TlfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTlfNull()
            Me(Me.tableTable_GuiaDesglosada.TlfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFleteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.FleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFleteNull()
            Me(Me.tableTable_GuiaDesglosada.FleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRifNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.RifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRifNull()
            Me(Me.tableTable_GuiaDesglosada.RifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaNull()
            Me(Me.tableTable_GuiaDesglosada.FacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultosNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.BultosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultosNull()
            Me(Me.tableTable_GuiaDesglosada.BultosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableTable_GuiaDesglosada.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumn1Null() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.Column1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumn1Null()
            Me(Me.tableTable_GuiaDesglosada.Column1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_Productos_FacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_Productos_FacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_Productos_FacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_Productos_FacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProducto_GranSelectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProducto_GranSelectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProducto_GranSelectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProducto_GranSelectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaPedidoClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaPedidoClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaPedidoClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaPedidoClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaIVARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaIVARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaIVARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaIVARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaPedido_Producto_ClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaPedido_Producto_ClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaPedido_Producto_ClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaPedido_Producto_ClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_GuiaTransporteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_GuiaTransporteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_GuiaTransporteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_GuiaTransporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_GuiaDesglosadaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_GuiaDesglosadaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_GuiaDesglosadaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_GuiaDesglosadaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MELDataSet2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_Productos_FacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_Productos_Factura"
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_Productos_Factura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codF", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet2.sp_consulta_Productos_FacturaDataTable, ByVal codF As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codF As Global.System.Nullable(Of Integer)) As MELDataSet2.sp_consulta_Productos_FacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet2.sp_consulta_Productos_FacturaDataTable = New MELDataSet2.sp_consulta_Productos_FacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProducto_GranSelectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProducto_GranSelect"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProducto_GranSelect"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet2.sp_consultaProducto_GranSelectDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet2.sp_consultaProducto_GranSelectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet2.sp_consultaProducto_GranSelectDataTable = New MELDataSet2.sp_consultaProducto_GranSelectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaPedidoClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaPedidoCliente"
            tableMapping.ColumnMappings.Add("CodigoPedido", "CodigoPedido")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Facturado", "Facturado")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaPedidoCliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet2.sp_consultaPedidoClienteDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet2.sp_consultaPedidoClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet2.sp_consultaPedidoClienteDataTable = New MELDataSet2.sp_consultaPedidoClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaIVATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaIVA"
            tableMapping.ColumnMappings.Add("iva", "iva")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaIVA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet2.sp_consultaIVADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet2.sp_consultaIVADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet2.sp_consultaIVADataTable = New MELDataSet2.sp_consultaIVADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaPedido_Producto_ClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaPedido_Producto_Cliente"
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaPedido_Producto_Cliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codPed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet2.sp_consultaPedido_Producto_ClienteDataTable, ByVal codPed As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codPed As Global.System.Nullable(Of Integer)) As MELDataSet2.sp_consultaPedido_Producto_ClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet2.sp_consultaPedido_Producto_ClienteDataTable = New MELDataSet2.sp_consultaPedido_Producto_ClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCliente"
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Rif", "Rif")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Representante", "Representante")
            tableMapping.ColumnMappings.Add("Gerente", "Gerente")
            tableMapping.ColumnMappings.Add("codZona", "codZona")
            tableMapping.ColumnMappings.Add("zona", "zona")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("PermitirCredito", "PermitirCredito")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("ClasificacionABC", "ClasificacionABC")
            tableMapping.ColumnMappings.Add("Autorizado", "Autorizado")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            tableMapping.ColumnMappings.Add("ContEspecial", "ContEspecial")
            tableMapping.ColumnMappings.Add("Celular", "Celular")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet2.sp_consultaClienteDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet2.sp_consultaClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet2.sp_consultaClienteDataTable = New MELDataSet2.sp_consultaClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
