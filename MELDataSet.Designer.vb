'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MELDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MELDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablesp_consultaProducto_GranSelect As sp_consultaProducto_GranSelectDataTable
    
    Private tablesp_consultaIVA As sp_consultaIVADataTable
    
    Private tablesp_consultaProducto As sp_consultaProductoDataTable
    
    Private tablesp_consultaFacturasPagadas As sp_consultaFacturasPagadasDataTable
    
    Private tablesp_consultaMarca As sp_consultaMarcaDataTable
    
    Private tablesp_consulta_producto_pedido_guia As sp_consulta_producto_pedido_guiaDataTable
    
    Private tablesp_consultaPreferencias As sp_consultaPreferenciasDataTable
    
    Private tablesp_VerTransporte As sp_VerTransporteDataTable
    
    Private tablesp_consultaNC_rdlc As sp_consultaNC_rdlcDataTable
    
    Private tablesp_consulta_Listado_Modelo As sp_consulta_Listado_ModeloDataTable
    
    Private tablesp_consulta_Listado_Alfabetico As sp_consulta_Listado_AlfabeticoDataTable
    
    Private tablesp_consultaFactura As sp_consultaFacturaDataTable
    
    Private tablesp_consultaPedido_Producto_Cliente As sp_consultaPedido_Producto_ClienteDataTable
    
    Private tablesp_prefactura As sp_prefacturaDataTable
    
    Private tablesp_R_traspasos As sp_R_traspasosDataTable
    
    Private tablesp_consultaproductosNC_rdlc As sp_consultaproductosNC_rdlcDataTable
    
    Private tablesp_consultaProductosVariacion As sp_consultaProductosVariacionDataTable
    
    Private tablesp_ConsultaClienteFactura As sp_ConsultaClienteFacturaDataTable
    
    Private tablesp_consultaProductoGranSelect2 As sp_consultaProductoGranSelect2DataTable
    
    Private tablesp_lvAjustesPorNC As sp_lvAjustesPorNCDataTable
    
    Private tablesp_consultaNotaCreditoNoAjustada As sp_consultaNotaCreditoNoAjustadaDataTable
    
    Private tablesp_consultaProductosParaPedidoCompra As sp_consultaProductosParaPedidoCompraDataTable
    
    Private tablesp_consultaProductosGrupos As sp_consultaProductosGruposDataTable
    
    Private tablesp_consultaProductosCodArancelarios As sp_consultaProductosCodArancelariosDataTable
    
    Private tablesp_consultaCatalogo2 As sp_consultaCatalogo2DataTable
    
    Private tablesp_consultaProductosEvaluacionDSS As sp_consultaProductosEvaluacionDSSDataTable
    
    Private tablesp_analisisCobranzas As sp_analisisCobranzasDataTable
    
    Private tablesp_consultaAjustesSaldos As sp_consultaAjustesSaldosDataTable
    
    Private tablesp_consultaFactNoAjustadas As sp_consultaFactNoAjustadasDataTable
    
    Private tablesp_lvAjustes As sp_lvAjustesDataTable
    
    Private tablesp_ConsultaProductosAjusteInv As sp_ConsultaProductosAjusteInvDataTable
    
    Private tablesp_consultaCodigosInternos As sp_consultaCodigosInternosDataTable
    
    Private tablesp_consulta_Productos_PedidoCliente As sp_consulta_Productos_PedidoClienteDataTable
    
    Private tablesp_R_ChequesDev As sp_R_ChequesDevDataTable
    
    Private tablesp_consultaProductoF As sp_consultaProductoFDataTable
    
    Private tablesp_consultaNCPendientes As sp_consultaNCPendientesDataTable
    
    Private tablesp_consultaProductosDanados As sp_consultaProductosDanadosDataTable
    
    Private tablesp_consulta_Productos_Factura As sp_consulta_Productos_FacturaDataTable
    
    Private tablesp_consultaClienteCombo3 As sp_consultaClienteCombo3DataTable
    
    Private tablesp_relacionFact As sp_relacionFactDataTable
    
    Private tablesp_consultaLogo As sp_consultaLogoDataTable
    
    Private tablesp_consultaObs As sp_consultaObsDataTable
    
    Private tablesp_lvcliente As sp_lvclienteDataTable
    
    Private tablesp_consultaTipoGasto As sp_consultaTipoGastoDataTable
    
    Private tablesp_consultaCatalogoModelos As sp_consultaCatalogoModelosDataTable
    
    Private tablesp_consultaCodigoArancelario As sp_consultaCodigoArancelarioDataTable
    
    Private tablesp_consultaCliente As sp_consultaClienteDataTable
    
    Private tablesp_consultaEmpresa As sp_consultaEmpresaDataTable
    
    Private tablesp_consulta_Movimientos_Asociados As sp_consulta_Movimientos_AsociadosDataTable
    
    Private tablesp_consultaUsuarios As sp_consultaUsuariosDataTable
    
    Private tablesp_movimiento_Productos As sp_movimiento_ProductosDataTable
    
    Private tablesp_consultaProductosInvetario As sp_consultaProductosInvetarioDataTable
    
    Private tablesp_consultaProductosParaInventario As sp_consultaProductosParaInventarioDataTable
    
    Private tablesp_consultaProductosOcultos As sp_consultaProductosOcultosDataTable
    
    Private tablesp_infoGeneral As sp_infoGeneralDataTable
    
    Private tablesp_consultaCatalogoModelos_Ubic As sp_consultaCatalogoModelos_UbicDataTable
    
    Private tablesp_infoGeneralCompras As sp_infoGeneralComprasDataTable
    
    Private tablesp_consultaPedidoCliente As sp_consultaPedidoClienteDataTable
    
    Private tablesp_consultaNotasCredito As sp_consultaNotasCreditoDataTable
    
    Private tablesp_consultaFactVentas As sp_consultaFactVentasDataTable
    
    Private tablesp_consultaDiferenciasInventario As sp_consultaDiferenciasInventarioDataTable
    
    Private tablesp_consulta_ubicacion_productos As sp_consulta_ubicacion_productosDataTable
    
    Private tablesp_consulta_actividades_SINPRO As sp_consulta_actividades_SINPRODataTable
    
    Private tablesp_consultaRecibos2 As sp_consultaRecibos2DataTable
    
    Private tablesp_ConsultaProductosProveedores As sp_ConsultaProductosProveedoresDataTable
    
    Private tableTable_Almacen As Table_AlmacenDataTable
    
    Private tableTbl_Cuarto As Tbl_CuartoDataTable
    
    Private tableTbl_Estante As Tbl_EstanteDataTable
    
    Private tableTbl_Tramo As Tbl_TramoDataTable
    
    Private tableTbl_Modelo As Tbl_ModeloDataTable
    
    Private tableTbl_Vendedor As Tbl_VendedorDataTable
    
    Private tableTbl_Fabrica As Tbl_FabricaDataTable
    
    Private tableTbl_Grupo As Tbl_GrupoDataTable
    
    Private tableTbl_Cliente As Tbl_ClienteDataTable
    
    Private tableTable_GuiaTransporte As Table_GuiaTransporteDataTable
    
    Private tableTable_GuiaDesglosada As Table_GuiaDesglosadaDataTable
    
    Private tableTable_GuiaBultos As Table_GuiaBultosDataTable
    
    Private tableTable_RelacionFacturas As Table_RelacionFacturasDataTable
    
    Private tableTable_Analisis_Cobranza As Table_Analisis_CobranzaDataTable
    
    Private tableTable_Cargar_Compra As Table_Cargar_CompraDataTable
    
    Private tableTable_Productos_Nacionalizados As Table_Productos_NacionalizadosDataTable
    
    Private tableTable_Productos_Variacion As Table_Productos_VariacionDataTable
    
    Private tableTable_Guia_Almacenes_Cuartos As Table_Guia_Almacenes_CuartosDataTable
    
    Private tableTable_ChequesDev As Table_ChequesDevDataTable
    
    Private tableTable_DetallesComisionPagada As Table_DetallesComisionPagadaDataTable
    
    Private tableTable_Libro_Ventas As Table_Libro_VentasDataTable
    
    Private tableTbl_DGV_Eficacia As Tbl_DGV_EficaciaDataTable
    
    Private tableTable_Catalogo_Productos_Fotos As Table_Catalogo_Productos_FotosDataTable
    
    Private tableTable_indice_Modelos As Table_indice_ModelosDataTable
    
    Private tableTable_indice_Productos As Table_indice_ProductosDataTable
    
    Private tableTable_Producto_Etiqueta As Table_Producto_EtiquetaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sp_consultaProducto_GranSelect")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProducto_GranSelectDataTable(ds.Tables("sp_consultaProducto_GranSelect")))
            End If
            If (Not (ds.Tables("sp_consultaIVA")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaIVADataTable(ds.Tables("sp_consultaIVA")))
            End If
            If (Not (ds.Tables("sp_consultaProducto")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductoDataTable(ds.Tables("sp_consultaProducto")))
            End If
            If (Not (ds.Tables("sp_consultaFacturasPagadas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFacturasPagadasDataTable(ds.Tables("sp_consultaFacturasPagadas")))
            End If
            If (Not (ds.Tables("sp_consultaMarca")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaMarcaDataTable(ds.Tables("sp_consultaMarca")))
            End If
            If (Not (ds.Tables("sp_consulta_producto_pedido_guia")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_producto_pedido_guiaDataTable(ds.Tables("sp_consulta_producto_pedido_guia")))
            End If
            If (Not (ds.Tables("sp_consultaPreferencias")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPreferenciasDataTable(ds.Tables("sp_consultaPreferencias")))
            End If
            If (Not (ds.Tables("sp_VerTransporte")) Is Nothing) Then
                MyBase.Tables.Add(New sp_VerTransporteDataTable(ds.Tables("sp_VerTransporte")))
            End If
            If (Not (ds.Tables("sp_consultaNC_rdlc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNC_rdlcDataTable(ds.Tables("sp_consultaNC_rdlc")))
            End If
            If (Not (ds.Tables("sp_consulta_Listado_Modelo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Listado_ModeloDataTable(ds.Tables("sp_consulta_Listado_Modelo")))
            End If
            If (Not (ds.Tables("sp_consulta_Listado_Alfabetico")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Listado_AlfabeticoDataTable(ds.Tables("sp_consulta_Listado_Alfabetico")))
            End If
            If (Not (ds.Tables("sp_consultaFactura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFacturaDataTable(ds.Tables("sp_consultaFactura")))
            End If
            If (Not (ds.Tables("sp_consultaPedido_Producto_Cliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedido_Producto_ClienteDataTable(ds.Tables("sp_consultaPedido_Producto_Cliente")))
            End If
            If (Not (ds.Tables("sp_prefactura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_prefacturaDataTable(ds.Tables("sp_prefactura")))
            End If
            If (Not (ds.Tables("sp_R_traspasos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_R_traspasosDataTable(ds.Tables("sp_R_traspasos")))
            End If
            If (Not (ds.Tables("sp_consultaproductosNC_rdlc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaproductosNC_rdlcDataTable(ds.Tables("sp_consultaproductosNC_rdlc")))
            End If
            If (Not (ds.Tables("sp_consultaProductosVariacion")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosVariacionDataTable(ds.Tables("sp_consultaProductosVariacion")))
            End If
            If (Not (ds.Tables("sp_ConsultaClienteFactura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ConsultaClienteFacturaDataTable(ds.Tables("sp_ConsultaClienteFactura")))
            End If
            If (Not (ds.Tables("sp_consultaProductoGranSelect2")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductoGranSelect2DataTable(ds.Tables("sp_consultaProductoGranSelect2")))
            End If
            If (Not (ds.Tables("sp_lvAjustesPorNC")) Is Nothing) Then
                MyBase.Tables.Add(New sp_lvAjustesPorNCDataTable(ds.Tables("sp_lvAjustesPorNC")))
            End If
            If (Not (ds.Tables("sp_consultaNotaCreditoNoAjustada")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNotaCreditoNoAjustadaDataTable(ds.Tables("sp_consultaNotaCreditoNoAjustada")))
            End If
            If (Not (ds.Tables("sp_consultaProductosParaPedidoCompra")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosParaPedidoCompraDataTable(ds.Tables("sp_consultaProductosParaPedidoCompra")))
            End If
            If (Not (ds.Tables("sp_consultaProductosGrupos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosGruposDataTable(ds.Tables("sp_consultaProductosGrupos")))
            End If
            If (Not (ds.Tables("sp_consultaProductosCodArancelarios")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosCodArancelariosDataTable(ds.Tables("sp_consultaProductosCodArancelarios")))
            End If
            If (Not (ds.Tables("sp_consultaCatalogo2")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCatalogo2DataTable(ds.Tables("sp_consultaCatalogo2")))
            End If
            If (Not (ds.Tables("sp_consultaProductosEvaluacionDSS")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosEvaluacionDSSDataTable(ds.Tables("sp_consultaProductosEvaluacionDSS")))
            End If
            If (Not (ds.Tables("sp_analisisCobranzas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_analisisCobranzasDataTable(ds.Tables("sp_analisisCobranzas")))
            End If
            If (Not (ds.Tables("sp_consultaAjustesSaldos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaAjustesSaldosDataTable(ds.Tables("sp_consultaAjustesSaldos")))
            End If
            If (Not (ds.Tables("sp_consultaFactNoAjustadas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFactNoAjustadasDataTable(ds.Tables("sp_consultaFactNoAjustadas")))
            End If
            If (Not (ds.Tables("sp_lvAjustes")) Is Nothing) Then
                MyBase.Tables.Add(New sp_lvAjustesDataTable(ds.Tables("sp_lvAjustes")))
            End If
            If (Not (ds.Tables("sp_ConsultaProductosAjusteInv")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ConsultaProductosAjusteInvDataTable(ds.Tables("sp_ConsultaProductosAjusteInv")))
            End If
            If (Not (ds.Tables("sp_consultaCodigosInternos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCodigosInternosDataTable(ds.Tables("sp_consultaCodigosInternos")))
            End If
            If (Not (ds.Tables("sp_consulta_Productos_PedidoCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Productos_PedidoClienteDataTable(ds.Tables("sp_consulta_Productos_PedidoCliente")))
            End If
            If (Not (ds.Tables("sp_R_ChequesDev")) Is Nothing) Then
                MyBase.Tables.Add(New sp_R_ChequesDevDataTable(ds.Tables("sp_R_ChequesDev")))
            End If
            If (Not (ds.Tables("sp_consultaProductoF")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductoFDataTable(ds.Tables("sp_consultaProductoF")))
            End If
            If (Not (ds.Tables("sp_consultaNCPendientes")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNCPendientesDataTable(ds.Tables("sp_consultaNCPendientes")))
            End If
            If (Not (ds.Tables("sp_consultaProductosDanados")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosDanadosDataTable(ds.Tables("sp_consultaProductosDanados")))
            End If
            If (Not (ds.Tables("sp_consulta_Productos_Factura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Productos_FacturaDataTable(ds.Tables("sp_consulta_Productos_Factura")))
            End If
            If (Not (ds.Tables("sp_consultaClienteCombo3")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaClienteCombo3DataTable(ds.Tables("sp_consultaClienteCombo3")))
            End If
            If (Not (ds.Tables("sp_relacionFact")) Is Nothing) Then
                MyBase.Tables.Add(New sp_relacionFactDataTable(ds.Tables("sp_relacionFact")))
            End If
            If (Not (ds.Tables("sp_consultaLogo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaLogoDataTable(ds.Tables("sp_consultaLogo")))
            End If
            If (Not (ds.Tables("sp_consultaObs")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaObsDataTable(ds.Tables("sp_consultaObs")))
            End If
            If (Not (ds.Tables("sp_lvcliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_lvclienteDataTable(ds.Tables("sp_lvcliente")))
            End If
            If (Not (ds.Tables("sp_consultaTipoGasto")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaTipoGastoDataTable(ds.Tables("sp_consultaTipoGasto")))
            End If
            If (Not (ds.Tables("sp_consultaCatalogoModelos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCatalogoModelosDataTable(ds.Tables("sp_consultaCatalogoModelos")))
            End If
            If (Not (ds.Tables("sp_consultaCodigoArancelario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCodigoArancelarioDataTable(ds.Tables("sp_consultaCodigoArancelario")))
            End If
            If (Not (ds.Tables("sp_consultaCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaClienteDataTable(ds.Tables("sp_consultaCliente")))
            End If
            If (Not (ds.Tables("sp_consultaEmpresa")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaEmpresaDataTable(ds.Tables("sp_consultaEmpresa")))
            End If
            If (Not (ds.Tables("sp_consulta_Movimientos_Asociados")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Movimientos_AsociadosDataTable(ds.Tables("sp_consulta_Movimientos_Asociados")))
            End If
            If (Not (ds.Tables("sp_consultaUsuarios")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaUsuariosDataTable(ds.Tables("sp_consultaUsuarios")))
            End If
            If (Not (ds.Tables("sp_movimiento_Productos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_movimiento_ProductosDataTable(ds.Tables("sp_movimiento_Productos")))
            End If
            If (Not (ds.Tables("sp_consultaProductosInvetario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosInvetarioDataTable(ds.Tables("sp_consultaProductosInvetario")))
            End If
            If (Not (ds.Tables("sp_consultaProductosParaInventario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosParaInventarioDataTable(ds.Tables("sp_consultaProductosParaInventario")))
            End If
            If (Not (ds.Tables("sp_consultaProductosOcultos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosOcultosDataTable(ds.Tables("sp_consultaProductosOcultos")))
            End If
            If (Not (ds.Tables("sp_infoGeneral")) Is Nothing) Then
                MyBase.Tables.Add(New sp_infoGeneralDataTable(ds.Tables("sp_infoGeneral")))
            End If
            If (Not (ds.Tables("sp_consultaCatalogoModelos_Ubic")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCatalogoModelos_UbicDataTable(ds.Tables("sp_consultaCatalogoModelos_Ubic")))
            End If
            If (Not (ds.Tables("sp_infoGeneralCompras")) Is Nothing) Then
                MyBase.Tables.Add(New sp_infoGeneralComprasDataTable(ds.Tables("sp_infoGeneralCompras")))
            End If
            If (Not (ds.Tables("sp_consultaPedidoCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedidoClienteDataTable(ds.Tables("sp_consultaPedidoCliente")))
            End If
            If (Not (ds.Tables("sp_consultaNotasCredito")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNotasCreditoDataTable(ds.Tables("sp_consultaNotasCredito")))
            End If
            If (Not (ds.Tables("sp_consultaFactVentas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFactVentasDataTable(ds.Tables("sp_consultaFactVentas")))
            End If
            If (Not (ds.Tables("sp_consultaDiferenciasInventario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaDiferenciasInventarioDataTable(ds.Tables("sp_consultaDiferenciasInventario")))
            End If
            If (Not (ds.Tables("sp_consulta_ubicacion_productos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_ubicacion_productosDataTable(ds.Tables("sp_consulta_ubicacion_productos")))
            End If
            If (Not (ds.Tables("sp_consulta_actividades_SINPRO")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_actividades_SINPRODataTable(ds.Tables("sp_consulta_actividades_SINPRO")))
            End If
            If (Not (ds.Tables("sp_consultaRecibos2")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaRecibos2DataTable(ds.Tables("sp_consultaRecibos2")))
            End If
            If (Not (ds.Tables("sp_ConsultaProductosProveedores")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ConsultaProductosProveedoresDataTable(ds.Tables("sp_ConsultaProductosProveedores")))
            End If
            If (Not (ds.Tables("Table_Almacen")) Is Nothing) Then
                MyBase.Tables.Add(New Table_AlmacenDataTable(ds.Tables("Table_Almacen")))
            End If
            If (Not (ds.Tables("Tbl_Cuarto")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_CuartoDataTable(ds.Tables("Tbl_Cuarto")))
            End If
            If (Not (ds.Tables("Tbl_Estante")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_EstanteDataTable(ds.Tables("Tbl_Estante")))
            End If
            If (Not (ds.Tables("Tbl_Tramo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_TramoDataTable(ds.Tables("Tbl_Tramo")))
            End If
            If (Not (ds.Tables("Tbl_Modelo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_ModeloDataTable(ds.Tables("Tbl_Modelo")))
            End If
            If (Not (ds.Tables("Tbl_Vendedor")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_VendedorDataTable(ds.Tables("Tbl_Vendedor")))
            End If
            If (Not (ds.Tables("Tbl_Fabrica")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FabricaDataTable(ds.Tables("Tbl_Fabrica")))
            End If
            If (Not (ds.Tables("Tbl_Grupo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_GrupoDataTable(ds.Tables("Tbl_Grupo")))
            End If
            If (Not (ds.Tables("Tbl_Cliente")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_ClienteDataTable(ds.Tables("Tbl_Cliente")))
            End If
            If (Not (ds.Tables("Table_GuiaTransporte")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaTransporteDataTable(ds.Tables("Table_GuiaTransporte")))
            End If
            If (Not (ds.Tables("Table_GuiaDesglosada")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaDesglosadaDataTable(ds.Tables("Table_GuiaDesglosada")))
            End If
            If (Not (ds.Tables("Table_GuiaBultos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaBultosDataTable(ds.Tables("Table_GuiaBultos")))
            End If
            If (Not (ds.Tables("Table_RelacionFacturas")) Is Nothing) Then
                MyBase.Tables.Add(New Table_RelacionFacturasDataTable(ds.Tables("Table_RelacionFacturas")))
            End If
            If (Not (ds.Tables("Table_Analisis_Cobranza")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Analisis_CobranzaDataTable(ds.Tables("Table_Analisis_Cobranza")))
            End If
            If (Not (ds.Tables("Table_Cargar_Compra")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Cargar_CompraDataTable(ds.Tables("Table_Cargar_Compra")))
            End If
            If (Not (ds.Tables("Table_Productos_Nacionalizados")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Productos_NacionalizadosDataTable(ds.Tables("Table_Productos_Nacionalizados")))
            End If
            If (Not (ds.Tables("Table_Productos_Variacion")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Productos_VariacionDataTable(ds.Tables("Table_Productos_Variacion")))
            End If
            If (Not (ds.Tables("Table_Guia_Almacenes_Cuartos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Guia_Almacenes_CuartosDataTable(ds.Tables("Table_Guia_Almacenes_Cuartos")))
            End If
            If (Not (ds.Tables("Table_ChequesDev")) Is Nothing) Then
                MyBase.Tables.Add(New Table_ChequesDevDataTable(ds.Tables("Table_ChequesDev")))
            End If
            If (Not (ds.Tables("Table_DetallesComisionPagada")) Is Nothing) Then
                MyBase.Tables.Add(New Table_DetallesComisionPagadaDataTable(ds.Tables("Table_DetallesComisionPagada")))
            End If
            If (Not (ds.Tables("Table_Libro_Ventas")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Libro_VentasDataTable(ds.Tables("Table_Libro_Ventas")))
            End If
            If (Not (ds.Tables("Tbl_DGV_Eficacia")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DGV_EficaciaDataTable(ds.Tables("Tbl_DGV_Eficacia")))
            End If
            If (Not (ds.Tables("Table_Catalogo_Productos_Fotos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Catalogo_Productos_FotosDataTable(ds.Tables("Table_Catalogo_Productos_Fotos")))
            End If
            If (Not (ds.Tables("Table_indice_Modelos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_indice_ModelosDataTable(ds.Tables("Table_indice_Modelos")))
            End If
            If (Not (ds.Tables("Table_indice_Productos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_indice_ProductosDataTable(ds.Tables("Table_indice_Productos")))
            End If
            If (Not (ds.Tables("Table_Producto_Etiqueta")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Producto_EtiquetaDataTable(ds.Tables("Table_Producto_Etiqueta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProducto_GranSelect() As sp_consultaProducto_GranSelectDataTable
        Get
            Return Me.tablesp_consultaProducto_GranSelect
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaIVA() As sp_consultaIVADataTable
        Get
            Return Me.tablesp_consultaIVA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProducto() As sp_consultaProductoDataTable
        Get
            Return Me.tablesp_consultaProducto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaFacturasPagadas() As sp_consultaFacturasPagadasDataTable
        Get
            Return Me.tablesp_consultaFacturasPagadas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaMarca() As sp_consultaMarcaDataTable
        Get
            Return Me.tablesp_consultaMarca
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_producto_pedido_guia() As sp_consulta_producto_pedido_guiaDataTable
        Get
            Return Me.tablesp_consulta_producto_pedido_guia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaPreferencias() As sp_consultaPreferenciasDataTable
        Get
            Return Me.tablesp_consultaPreferencias
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_VerTransporte() As sp_VerTransporteDataTable
        Get
            Return Me.tablesp_VerTransporte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaNC_rdlc() As sp_consultaNC_rdlcDataTable
        Get
            Return Me.tablesp_consultaNC_rdlc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_Listado_Modelo() As sp_consulta_Listado_ModeloDataTable
        Get
            Return Me.tablesp_consulta_Listado_Modelo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_Listado_Alfabetico() As sp_consulta_Listado_AlfabeticoDataTable
        Get
            Return Me.tablesp_consulta_Listado_Alfabetico
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaFactura() As sp_consultaFacturaDataTable
        Get
            Return Me.tablesp_consultaFactura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaPedido_Producto_Cliente() As sp_consultaPedido_Producto_ClienteDataTable
        Get
            Return Me.tablesp_consultaPedido_Producto_Cliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_prefactura() As sp_prefacturaDataTable
        Get
            Return Me.tablesp_prefactura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_R_traspasos() As sp_R_traspasosDataTable
        Get
            Return Me.tablesp_R_traspasos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaproductosNC_rdlc() As sp_consultaproductosNC_rdlcDataTable
        Get
            Return Me.tablesp_consultaproductosNC_rdlc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosVariacion() As sp_consultaProductosVariacionDataTable
        Get
            Return Me.tablesp_consultaProductosVariacion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_ConsultaClienteFactura() As sp_ConsultaClienteFacturaDataTable
        Get
            Return Me.tablesp_ConsultaClienteFactura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductoGranSelect2() As sp_consultaProductoGranSelect2DataTable
        Get
            Return Me.tablesp_consultaProductoGranSelect2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_lvAjustesPorNC() As sp_lvAjustesPorNCDataTable
        Get
            Return Me.tablesp_lvAjustesPorNC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaNotaCreditoNoAjustada() As sp_consultaNotaCreditoNoAjustadaDataTable
        Get
            Return Me.tablesp_consultaNotaCreditoNoAjustada
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosParaPedidoCompra() As sp_consultaProductosParaPedidoCompraDataTable
        Get
            Return Me.tablesp_consultaProductosParaPedidoCompra
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosGrupos() As sp_consultaProductosGruposDataTable
        Get
            Return Me.tablesp_consultaProductosGrupos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosCodArancelarios() As sp_consultaProductosCodArancelariosDataTable
        Get
            Return Me.tablesp_consultaProductosCodArancelarios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCatalogo2() As sp_consultaCatalogo2DataTable
        Get
            Return Me.tablesp_consultaCatalogo2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosEvaluacionDSS() As sp_consultaProductosEvaluacionDSSDataTable
        Get
            Return Me.tablesp_consultaProductosEvaluacionDSS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_analisisCobranzas() As sp_analisisCobranzasDataTable
        Get
            Return Me.tablesp_analisisCobranzas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaAjustesSaldos() As sp_consultaAjustesSaldosDataTable
        Get
            Return Me.tablesp_consultaAjustesSaldos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaFactNoAjustadas() As sp_consultaFactNoAjustadasDataTable
        Get
            Return Me.tablesp_consultaFactNoAjustadas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_lvAjustes() As sp_lvAjustesDataTable
        Get
            Return Me.tablesp_lvAjustes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_ConsultaProductosAjusteInv() As sp_ConsultaProductosAjusteInvDataTable
        Get
            Return Me.tablesp_ConsultaProductosAjusteInv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCodigosInternos() As sp_consultaCodigosInternosDataTable
        Get
            Return Me.tablesp_consultaCodigosInternos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_Productos_PedidoCliente() As sp_consulta_Productos_PedidoClienteDataTable
        Get
            Return Me.tablesp_consulta_Productos_PedidoCliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_R_ChequesDev() As sp_R_ChequesDevDataTable
        Get
            Return Me.tablesp_R_ChequesDev
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductoF() As sp_consultaProductoFDataTable
        Get
            Return Me.tablesp_consultaProductoF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaNCPendientes() As sp_consultaNCPendientesDataTable
        Get
            Return Me.tablesp_consultaNCPendientes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosDanados() As sp_consultaProductosDanadosDataTable
        Get
            Return Me.tablesp_consultaProductosDanados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_Productos_Factura() As sp_consulta_Productos_FacturaDataTable
        Get
            Return Me.tablesp_consulta_Productos_Factura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaClienteCombo3() As sp_consultaClienteCombo3DataTable
        Get
            Return Me.tablesp_consultaClienteCombo3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_relacionFact() As sp_relacionFactDataTable
        Get
            Return Me.tablesp_relacionFact
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaLogo() As sp_consultaLogoDataTable
        Get
            Return Me.tablesp_consultaLogo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaObs() As sp_consultaObsDataTable
        Get
            Return Me.tablesp_consultaObs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_lvcliente() As sp_lvclienteDataTable
        Get
            Return Me.tablesp_lvcliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaTipoGasto() As sp_consultaTipoGastoDataTable
        Get
            Return Me.tablesp_consultaTipoGasto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCatalogoModelos() As sp_consultaCatalogoModelosDataTable
        Get
            Return Me.tablesp_consultaCatalogoModelos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCodigoArancelario() As sp_consultaCodigoArancelarioDataTable
        Get
            Return Me.tablesp_consultaCodigoArancelario
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCliente() As sp_consultaClienteDataTable
        Get
            Return Me.tablesp_consultaCliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaEmpresa() As sp_consultaEmpresaDataTable
        Get
            Return Me.tablesp_consultaEmpresa
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_Movimientos_Asociados() As sp_consulta_Movimientos_AsociadosDataTable
        Get
            Return Me.tablesp_consulta_Movimientos_Asociados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaUsuarios() As sp_consultaUsuariosDataTable
        Get
            Return Me.tablesp_consultaUsuarios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_movimiento_Productos() As sp_movimiento_ProductosDataTable
        Get
            Return Me.tablesp_movimiento_Productos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosInvetario() As sp_consultaProductosInvetarioDataTable
        Get
            Return Me.tablesp_consultaProductosInvetario
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosParaInventario() As sp_consultaProductosParaInventarioDataTable
        Get
            Return Me.tablesp_consultaProductosParaInventario
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaProductosOcultos() As sp_consultaProductosOcultosDataTable
        Get
            Return Me.tablesp_consultaProductosOcultos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_infoGeneral() As sp_infoGeneralDataTable
        Get
            Return Me.tablesp_infoGeneral
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaCatalogoModelos_Ubic() As sp_consultaCatalogoModelos_UbicDataTable
        Get
            Return Me.tablesp_consultaCatalogoModelos_Ubic
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_infoGeneralCompras() As sp_infoGeneralComprasDataTable
        Get
            Return Me.tablesp_infoGeneralCompras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaPedidoCliente() As sp_consultaPedidoClienteDataTable
        Get
            Return Me.tablesp_consultaPedidoCliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaNotasCredito() As sp_consultaNotasCreditoDataTable
        Get
            Return Me.tablesp_consultaNotasCredito
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaFactVentas() As sp_consultaFactVentasDataTable
        Get
            Return Me.tablesp_consultaFactVentas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaDiferenciasInventario() As sp_consultaDiferenciasInventarioDataTable
        Get
            Return Me.tablesp_consultaDiferenciasInventario
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_ubicacion_productos() As sp_consulta_ubicacion_productosDataTable
        Get
            Return Me.tablesp_consulta_ubicacion_productos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consulta_actividades_SINPRO() As sp_consulta_actividades_SINPRODataTable
        Get
            Return Me.tablesp_consulta_actividades_SINPRO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_consultaRecibos2() As sp_consultaRecibos2DataTable
        Get
            Return Me.tablesp_consultaRecibos2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_ConsultaProductosProveedores() As sp_ConsultaProductosProveedoresDataTable
        Get
            Return Me.tablesp_ConsultaProductosProveedores
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Almacen() As Table_AlmacenDataTable
        Get
            Return Me.tableTable_Almacen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Cuarto() As Tbl_CuartoDataTable
        Get
            Return Me.tableTbl_Cuarto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Estante() As Tbl_EstanteDataTable
        Get
            Return Me.tableTbl_Estante
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Tramo() As Tbl_TramoDataTable
        Get
            Return Me.tableTbl_Tramo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Modelo() As Tbl_ModeloDataTable
        Get
            Return Me.tableTbl_Modelo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Vendedor() As Tbl_VendedorDataTable
        Get
            Return Me.tableTbl_Vendedor
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Fabrica() As Tbl_FabricaDataTable
        Get
            Return Me.tableTbl_Fabrica
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Grupo() As Tbl_GrupoDataTable
        Get
            Return Me.tableTbl_Grupo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_Cliente() As Tbl_ClienteDataTable
        Get
            Return Me.tableTbl_Cliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_GuiaTransporte() As Table_GuiaTransporteDataTable
        Get
            Return Me.tableTable_GuiaTransporte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_GuiaDesglosada() As Table_GuiaDesglosadaDataTable
        Get
            Return Me.tableTable_GuiaDesglosada
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_GuiaBultos() As Table_GuiaBultosDataTable
        Get
            Return Me.tableTable_GuiaBultos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_RelacionFacturas() As Table_RelacionFacturasDataTable
        Get
            Return Me.tableTable_RelacionFacturas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Analisis_Cobranza() As Table_Analisis_CobranzaDataTable
        Get
            Return Me.tableTable_Analisis_Cobranza
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Cargar_Compra() As Table_Cargar_CompraDataTable
        Get
            Return Me.tableTable_Cargar_Compra
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Productos_Nacionalizados() As Table_Productos_NacionalizadosDataTable
        Get
            Return Me.tableTable_Productos_Nacionalizados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Productos_Variacion() As Table_Productos_VariacionDataTable
        Get
            Return Me.tableTable_Productos_Variacion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Guia_Almacenes_Cuartos() As Table_Guia_Almacenes_CuartosDataTable
        Get
            Return Me.tableTable_Guia_Almacenes_Cuartos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_ChequesDev() As Table_ChequesDevDataTable
        Get
            Return Me.tableTable_ChequesDev
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_DetallesComisionPagada() As Table_DetallesComisionPagadaDataTable
        Get
            Return Me.tableTable_DetallesComisionPagada
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Libro_Ventas() As Table_Libro_VentasDataTable
        Get
            Return Me.tableTable_Libro_Ventas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tbl_DGV_Eficacia() As Tbl_DGV_EficaciaDataTable
        Get
            Return Me.tableTbl_DGV_Eficacia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Catalogo_Productos_Fotos() As Table_Catalogo_Productos_FotosDataTable
        Get
            Return Me.tableTable_Catalogo_Productos_Fotos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_indice_Modelos() As Table_indice_ModelosDataTable
        Get
            Return Me.tableTable_indice_Modelos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_indice_Productos() As Table_indice_ProductosDataTable
        Get
            Return Me.tableTable_indice_Productos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Producto_Etiqueta() As Table_Producto_EtiquetaDataTable
        Get
            Return Me.tableTable_Producto_Etiqueta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MELDataSet = CType(MyBase.Clone,MELDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sp_consultaProducto_GranSelect")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProducto_GranSelectDataTable(ds.Tables("sp_consultaProducto_GranSelect")))
            End If
            If (Not (ds.Tables("sp_consultaIVA")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaIVADataTable(ds.Tables("sp_consultaIVA")))
            End If
            If (Not (ds.Tables("sp_consultaProducto")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductoDataTable(ds.Tables("sp_consultaProducto")))
            End If
            If (Not (ds.Tables("sp_consultaFacturasPagadas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFacturasPagadasDataTable(ds.Tables("sp_consultaFacturasPagadas")))
            End If
            If (Not (ds.Tables("sp_consultaMarca")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaMarcaDataTable(ds.Tables("sp_consultaMarca")))
            End If
            If (Not (ds.Tables("sp_consulta_producto_pedido_guia")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_producto_pedido_guiaDataTable(ds.Tables("sp_consulta_producto_pedido_guia")))
            End If
            If (Not (ds.Tables("sp_consultaPreferencias")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPreferenciasDataTable(ds.Tables("sp_consultaPreferencias")))
            End If
            If (Not (ds.Tables("sp_VerTransporte")) Is Nothing) Then
                MyBase.Tables.Add(New sp_VerTransporteDataTable(ds.Tables("sp_VerTransporte")))
            End If
            If (Not (ds.Tables("sp_consultaNC_rdlc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNC_rdlcDataTable(ds.Tables("sp_consultaNC_rdlc")))
            End If
            If (Not (ds.Tables("sp_consulta_Listado_Modelo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Listado_ModeloDataTable(ds.Tables("sp_consulta_Listado_Modelo")))
            End If
            If (Not (ds.Tables("sp_consulta_Listado_Alfabetico")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Listado_AlfabeticoDataTable(ds.Tables("sp_consulta_Listado_Alfabetico")))
            End If
            If (Not (ds.Tables("sp_consultaFactura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFacturaDataTable(ds.Tables("sp_consultaFactura")))
            End If
            If (Not (ds.Tables("sp_consultaPedido_Producto_Cliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedido_Producto_ClienteDataTable(ds.Tables("sp_consultaPedido_Producto_Cliente")))
            End If
            If (Not (ds.Tables("sp_prefactura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_prefacturaDataTable(ds.Tables("sp_prefactura")))
            End If
            If (Not (ds.Tables("sp_R_traspasos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_R_traspasosDataTable(ds.Tables("sp_R_traspasos")))
            End If
            If (Not (ds.Tables("sp_consultaproductosNC_rdlc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaproductosNC_rdlcDataTable(ds.Tables("sp_consultaproductosNC_rdlc")))
            End If
            If (Not (ds.Tables("sp_consultaProductosVariacion")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosVariacionDataTable(ds.Tables("sp_consultaProductosVariacion")))
            End If
            If (Not (ds.Tables("sp_ConsultaClienteFactura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ConsultaClienteFacturaDataTable(ds.Tables("sp_ConsultaClienteFactura")))
            End If
            If (Not (ds.Tables("sp_consultaProductoGranSelect2")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductoGranSelect2DataTable(ds.Tables("sp_consultaProductoGranSelect2")))
            End If
            If (Not (ds.Tables("sp_lvAjustesPorNC")) Is Nothing) Then
                MyBase.Tables.Add(New sp_lvAjustesPorNCDataTable(ds.Tables("sp_lvAjustesPorNC")))
            End If
            If (Not (ds.Tables("sp_consultaNotaCreditoNoAjustada")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNotaCreditoNoAjustadaDataTable(ds.Tables("sp_consultaNotaCreditoNoAjustada")))
            End If
            If (Not (ds.Tables("sp_consultaProductosParaPedidoCompra")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosParaPedidoCompraDataTable(ds.Tables("sp_consultaProductosParaPedidoCompra")))
            End If
            If (Not (ds.Tables("sp_consultaProductosGrupos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosGruposDataTable(ds.Tables("sp_consultaProductosGrupos")))
            End If
            If (Not (ds.Tables("sp_consultaProductosCodArancelarios")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosCodArancelariosDataTable(ds.Tables("sp_consultaProductosCodArancelarios")))
            End If
            If (Not (ds.Tables("sp_consultaCatalogo2")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCatalogo2DataTable(ds.Tables("sp_consultaCatalogo2")))
            End If
            If (Not (ds.Tables("sp_consultaProductosEvaluacionDSS")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosEvaluacionDSSDataTable(ds.Tables("sp_consultaProductosEvaluacionDSS")))
            End If
            If (Not (ds.Tables("sp_analisisCobranzas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_analisisCobranzasDataTable(ds.Tables("sp_analisisCobranzas")))
            End If
            If (Not (ds.Tables("sp_consultaAjustesSaldos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaAjustesSaldosDataTable(ds.Tables("sp_consultaAjustesSaldos")))
            End If
            If (Not (ds.Tables("sp_consultaFactNoAjustadas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFactNoAjustadasDataTable(ds.Tables("sp_consultaFactNoAjustadas")))
            End If
            If (Not (ds.Tables("sp_lvAjustes")) Is Nothing) Then
                MyBase.Tables.Add(New sp_lvAjustesDataTable(ds.Tables("sp_lvAjustes")))
            End If
            If (Not (ds.Tables("sp_ConsultaProductosAjusteInv")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ConsultaProductosAjusteInvDataTable(ds.Tables("sp_ConsultaProductosAjusteInv")))
            End If
            If (Not (ds.Tables("sp_consultaCodigosInternos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCodigosInternosDataTable(ds.Tables("sp_consultaCodigosInternos")))
            End If
            If (Not (ds.Tables("sp_consulta_Productos_PedidoCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Productos_PedidoClienteDataTable(ds.Tables("sp_consulta_Productos_PedidoCliente")))
            End If
            If (Not (ds.Tables("sp_R_ChequesDev")) Is Nothing) Then
                MyBase.Tables.Add(New sp_R_ChequesDevDataTable(ds.Tables("sp_R_ChequesDev")))
            End If
            If (Not (ds.Tables("sp_consultaProductoF")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductoFDataTable(ds.Tables("sp_consultaProductoF")))
            End If
            If (Not (ds.Tables("sp_consultaNCPendientes")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNCPendientesDataTable(ds.Tables("sp_consultaNCPendientes")))
            End If
            If (Not (ds.Tables("sp_consultaProductosDanados")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosDanadosDataTable(ds.Tables("sp_consultaProductosDanados")))
            End If
            If (Not (ds.Tables("sp_consulta_Productos_Factura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Productos_FacturaDataTable(ds.Tables("sp_consulta_Productos_Factura")))
            End If
            If (Not (ds.Tables("sp_consultaClienteCombo3")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaClienteCombo3DataTable(ds.Tables("sp_consultaClienteCombo3")))
            End If
            If (Not (ds.Tables("sp_relacionFact")) Is Nothing) Then
                MyBase.Tables.Add(New sp_relacionFactDataTable(ds.Tables("sp_relacionFact")))
            End If
            If (Not (ds.Tables("sp_consultaLogo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaLogoDataTable(ds.Tables("sp_consultaLogo")))
            End If
            If (Not (ds.Tables("sp_consultaObs")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaObsDataTable(ds.Tables("sp_consultaObs")))
            End If
            If (Not (ds.Tables("sp_lvcliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_lvclienteDataTable(ds.Tables("sp_lvcliente")))
            End If
            If (Not (ds.Tables("sp_consultaTipoGasto")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaTipoGastoDataTable(ds.Tables("sp_consultaTipoGasto")))
            End If
            If (Not (ds.Tables("sp_consultaCatalogoModelos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCatalogoModelosDataTable(ds.Tables("sp_consultaCatalogoModelos")))
            End If
            If (Not (ds.Tables("sp_consultaCodigoArancelario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCodigoArancelarioDataTable(ds.Tables("sp_consultaCodigoArancelario")))
            End If
            If (Not (ds.Tables("sp_consultaCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaClienteDataTable(ds.Tables("sp_consultaCliente")))
            End If
            If (Not (ds.Tables("sp_consultaEmpresa")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaEmpresaDataTable(ds.Tables("sp_consultaEmpresa")))
            End If
            If (Not (ds.Tables("sp_consulta_Movimientos_Asociados")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_Movimientos_AsociadosDataTable(ds.Tables("sp_consulta_Movimientos_Asociados")))
            End If
            If (Not (ds.Tables("sp_consultaUsuarios")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaUsuariosDataTable(ds.Tables("sp_consultaUsuarios")))
            End If
            If (Not (ds.Tables("sp_movimiento_Productos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_movimiento_ProductosDataTable(ds.Tables("sp_movimiento_Productos")))
            End If
            If (Not (ds.Tables("sp_consultaProductosInvetario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosInvetarioDataTable(ds.Tables("sp_consultaProductosInvetario")))
            End If
            If (Not (ds.Tables("sp_consultaProductosParaInventario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosParaInventarioDataTable(ds.Tables("sp_consultaProductosParaInventario")))
            End If
            If (Not (ds.Tables("sp_consultaProductosOcultos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaProductosOcultosDataTable(ds.Tables("sp_consultaProductosOcultos")))
            End If
            If (Not (ds.Tables("sp_infoGeneral")) Is Nothing) Then
                MyBase.Tables.Add(New sp_infoGeneralDataTable(ds.Tables("sp_infoGeneral")))
            End If
            If (Not (ds.Tables("sp_consultaCatalogoModelos_Ubic")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaCatalogoModelos_UbicDataTable(ds.Tables("sp_consultaCatalogoModelos_Ubic")))
            End If
            If (Not (ds.Tables("sp_infoGeneralCompras")) Is Nothing) Then
                MyBase.Tables.Add(New sp_infoGeneralComprasDataTable(ds.Tables("sp_infoGeneralCompras")))
            End If
            If (Not (ds.Tables("sp_consultaPedidoCliente")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaPedidoClienteDataTable(ds.Tables("sp_consultaPedidoCliente")))
            End If
            If (Not (ds.Tables("sp_consultaNotasCredito")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaNotasCreditoDataTable(ds.Tables("sp_consultaNotasCredito")))
            End If
            If (Not (ds.Tables("sp_consultaFactVentas")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaFactVentasDataTable(ds.Tables("sp_consultaFactVentas")))
            End If
            If (Not (ds.Tables("sp_consultaDiferenciasInventario")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaDiferenciasInventarioDataTable(ds.Tables("sp_consultaDiferenciasInventario")))
            End If
            If (Not (ds.Tables("sp_consulta_ubicacion_productos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_ubicacion_productosDataTable(ds.Tables("sp_consulta_ubicacion_productos")))
            End If
            If (Not (ds.Tables("sp_consulta_actividades_SINPRO")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consulta_actividades_SINPRODataTable(ds.Tables("sp_consulta_actividades_SINPRO")))
            End If
            If (Not (ds.Tables("sp_consultaRecibos2")) Is Nothing) Then
                MyBase.Tables.Add(New sp_consultaRecibos2DataTable(ds.Tables("sp_consultaRecibos2")))
            End If
            If (Not (ds.Tables("sp_ConsultaProductosProveedores")) Is Nothing) Then
                MyBase.Tables.Add(New sp_ConsultaProductosProveedoresDataTable(ds.Tables("sp_ConsultaProductosProveedores")))
            End If
            If (Not (ds.Tables("Table_Almacen")) Is Nothing) Then
                MyBase.Tables.Add(New Table_AlmacenDataTable(ds.Tables("Table_Almacen")))
            End If
            If (Not (ds.Tables("Tbl_Cuarto")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_CuartoDataTable(ds.Tables("Tbl_Cuarto")))
            End If
            If (Not (ds.Tables("Tbl_Estante")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_EstanteDataTable(ds.Tables("Tbl_Estante")))
            End If
            If (Not (ds.Tables("Tbl_Tramo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_TramoDataTable(ds.Tables("Tbl_Tramo")))
            End If
            If (Not (ds.Tables("Tbl_Modelo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_ModeloDataTable(ds.Tables("Tbl_Modelo")))
            End If
            If (Not (ds.Tables("Tbl_Vendedor")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_VendedorDataTable(ds.Tables("Tbl_Vendedor")))
            End If
            If (Not (ds.Tables("Tbl_Fabrica")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_FabricaDataTable(ds.Tables("Tbl_Fabrica")))
            End If
            If (Not (ds.Tables("Tbl_Grupo")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_GrupoDataTable(ds.Tables("Tbl_Grupo")))
            End If
            If (Not (ds.Tables("Tbl_Cliente")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_ClienteDataTable(ds.Tables("Tbl_Cliente")))
            End If
            If (Not (ds.Tables("Table_GuiaTransporte")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaTransporteDataTable(ds.Tables("Table_GuiaTransporte")))
            End If
            If (Not (ds.Tables("Table_GuiaDesglosada")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaDesglosadaDataTable(ds.Tables("Table_GuiaDesglosada")))
            End If
            If (Not (ds.Tables("Table_GuiaBultos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_GuiaBultosDataTable(ds.Tables("Table_GuiaBultos")))
            End If
            If (Not (ds.Tables("Table_RelacionFacturas")) Is Nothing) Then
                MyBase.Tables.Add(New Table_RelacionFacturasDataTable(ds.Tables("Table_RelacionFacturas")))
            End If
            If (Not (ds.Tables("Table_Analisis_Cobranza")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Analisis_CobranzaDataTable(ds.Tables("Table_Analisis_Cobranza")))
            End If
            If (Not (ds.Tables("Table_Cargar_Compra")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Cargar_CompraDataTable(ds.Tables("Table_Cargar_Compra")))
            End If
            If (Not (ds.Tables("Table_Productos_Nacionalizados")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Productos_NacionalizadosDataTable(ds.Tables("Table_Productos_Nacionalizados")))
            End If
            If (Not (ds.Tables("Table_Productos_Variacion")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Productos_VariacionDataTable(ds.Tables("Table_Productos_Variacion")))
            End If
            If (Not (ds.Tables("Table_Guia_Almacenes_Cuartos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Guia_Almacenes_CuartosDataTable(ds.Tables("Table_Guia_Almacenes_Cuartos")))
            End If
            If (Not (ds.Tables("Table_ChequesDev")) Is Nothing) Then
                MyBase.Tables.Add(New Table_ChequesDevDataTable(ds.Tables("Table_ChequesDev")))
            End If
            If (Not (ds.Tables("Table_DetallesComisionPagada")) Is Nothing) Then
                MyBase.Tables.Add(New Table_DetallesComisionPagadaDataTable(ds.Tables("Table_DetallesComisionPagada")))
            End If
            If (Not (ds.Tables("Table_Libro_Ventas")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Libro_VentasDataTable(ds.Tables("Table_Libro_Ventas")))
            End If
            If (Not (ds.Tables("Tbl_DGV_Eficacia")) Is Nothing) Then
                MyBase.Tables.Add(New Tbl_DGV_EficaciaDataTable(ds.Tables("Tbl_DGV_Eficacia")))
            End If
            If (Not (ds.Tables("Table_Catalogo_Productos_Fotos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Catalogo_Productos_FotosDataTable(ds.Tables("Table_Catalogo_Productos_Fotos")))
            End If
            If (Not (ds.Tables("Table_indice_Modelos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_indice_ModelosDataTable(ds.Tables("Table_indice_Modelos")))
            End If
            If (Not (ds.Tables("Table_indice_Productos")) Is Nothing) Then
                MyBase.Tables.Add(New Table_indice_ProductosDataTable(ds.Tables("Table_indice_Productos")))
            End If
            If (Not (ds.Tables("Table_Producto_Etiqueta")) Is Nothing) Then
                MyBase.Tables.Add(New Table_Producto_EtiquetaDataTable(ds.Tables("Table_Producto_Etiqueta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesp_consultaProducto_GranSelect = CType(MyBase.Tables("sp_consultaProducto_GranSelect"),sp_consultaProducto_GranSelectDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProducto_GranSelect) Is Nothing) Then
                Me.tablesp_consultaProducto_GranSelect.InitVars
            End If
        End If
        Me.tablesp_consultaIVA = CType(MyBase.Tables("sp_consultaIVA"),sp_consultaIVADataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaIVA) Is Nothing) Then
                Me.tablesp_consultaIVA.InitVars
            End If
        End If
        Me.tablesp_consultaProducto = CType(MyBase.Tables("sp_consultaProducto"),sp_consultaProductoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProducto) Is Nothing) Then
                Me.tablesp_consultaProducto.InitVars
            End If
        End If
        Me.tablesp_consultaFacturasPagadas = CType(MyBase.Tables("sp_consultaFacturasPagadas"),sp_consultaFacturasPagadasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaFacturasPagadas) Is Nothing) Then
                Me.tablesp_consultaFacturasPagadas.InitVars
            End If
        End If
        Me.tablesp_consultaMarca = CType(MyBase.Tables("sp_consultaMarca"),sp_consultaMarcaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaMarca) Is Nothing) Then
                Me.tablesp_consultaMarca.InitVars
            End If
        End If
        Me.tablesp_consulta_producto_pedido_guia = CType(MyBase.Tables("sp_consulta_producto_pedido_guia"),sp_consulta_producto_pedido_guiaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_producto_pedido_guia) Is Nothing) Then
                Me.tablesp_consulta_producto_pedido_guia.InitVars
            End If
        End If
        Me.tablesp_consultaPreferencias = CType(MyBase.Tables("sp_consultaPreferencias"),sp_consultaPreferenciasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaPreferencias) Is Nothing) Then
                Me.tablesp_consultaPreferencias.InitVars
            End If
        End If
        Me.tablesp_VerTransporte = CType(MyBase.Tables("sp_VerTransporte"),sp_VerTransporteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_VerTransporte) Is Nothing) Then
                Me.tablesp_VerTransporte.InitVars
            End If
        End If
        Me.tablesp_consultaNC_rdlc = CType(MyBase.Tables("sp_consultaNC_rdlc"),sp_consultaNC_rdlcDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaNC_rdlc) Is Nothing) Then
                Me.tablesp_consultaNC_rdlc.InitVars
            End If
        End If
        Me.tablesp_consulta_Listado_Modelo = CType(MyBase.Tables("sp_consulta_Listado_Modelo"),sp_consulta_Listado_ModeloDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_Listado_Modelo) Is Nothing) Then
                Me.tablesp_consulta_Listado_Modelo.InitVars
            End If
        End If
        Me.tablesp_consulta_Listado_Alfabetico = CType(MyBase.Tables("sp_consulta_Listado_Alfabetico"),sp_consulta_Listado_AlfabeticoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_Listado_Alfabetico) Is Nothing) Then
                Me.tablesp_consulta_Listado_Alfabetico.InitVars
            End If
        End If
        Me.tablesp_consultaFactura = CType(MyBase.Tables("sp_consultaFactura"),sp_consultaFacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaFactura) Is Nothing) Then
                Me.tablesp_consultaFactura.InitVars
            End If
        End If
        Me.tablesp_consultaPedido_Producto_Cliente = CType(MyBase.Tables("sp_consultaPedido_Producto_Cliente"),sp_consultaPedido_Producto_ClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaPedido_Producto_Cliente) Is Nothing) Then
                Me.tablesp_consultaPedido_Producto_Cliente.InitVars
            End If
        End If
        Me.tablesp_prefactura = CType(MyBase.Tables("sp_prefactura"),sp_prefacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_prefactura) Is Nothing) Then
                Me.tablesp_prefactura.InitVars
            End If
        End If
        Me.tablesp_R_traspasos = CType(MyBase.Tables("sp_R_traspasos"),sp_R_traspasosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_R_traspasos) Is Nothing) Then
                Me.tablesp_R_traspasos.InitVars
            End If
        End If
        Me.tablesp_consultaproductosNC_rdlc = CType(MyBase.Tables("sp_consultaproductosNC_rdlc"),sp_consultaproductosNC_rdlcDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaproductosNC_rdlc) Is Nothing) Then
                Me.tablesp_consultaproductosNC_rdlc.InitVars
            End If
        End If
        Me.tablesp_consultaProductosVariacion = CType(MyBase.Tables("sp_consultaProductosVariacion"),sp_consultaProductosVariacionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosVariacion) Is Nothing) Then
                Me.tablesp_consultaProductosVariacion.InitVars
            End If
        End If
        Me.tablesp_ConsultaClienteFactura = CType(MyBase.Tables("sp_ConsultaClienteFactura"),sp_ConsultaClienteFacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_ConsultaClienteFactura) Is Nothing) Then
                Me.tablesp_ConsultaClienteFactura.InitVars
            End If
        End If
        Me.tablesp_consultaProductoGranSelect2 = CType(MyBase.Tables("sp_consultaProductoGranSelect2"),sp_consultaProductoGranSelect2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductoGranSelect2) Is Nothing) Then
                Me.tablesp_consultaProductoGranSelect2.InitVars
            End If
        End If
        Me.tablesp_lvAjustesPorNC = CType(MyBase.Tables("sp_lvAjustesPorNC"),sp_lvAjustesPorNCDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_lvAjustesPorNC) Is Nothing) Then
                Me.tablesp_lvAjustesPorNC.InitVars
            End If
        End If
        Me.tablesp_consultaNotaCreditoNoAjustada = CType(MyBase.Tables("sp_consultaNotaCreditoNoAjustada"),sp_consultaNotaCreditoNoAjustadaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaNotaCreditoNoAjustada) Is Nothing) Then
                Me.tablesp_consultaNotaCreditoNoAjustada.InitVars
            End If
        End If
        Me.tablesp_consultaProductosParaPedidoCompra = CType(MyBase.Tables("sp_consultaProductosParaPedidoCompra"),sp_consultaProductosParaPedidoCompraDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosParaPedidoCompra) Is Nothing) Then
                Me.tablesp_consultaProductosParaPedidoCompra.InitVars
            End If
        End If
        Me.tablesp_consultaProductosGrupos = CType(MyBase.Tables("sp_consultaProductosGrupos"),sp_consultaProductosGruposDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosGrupos) Is Nothing) Then
                Me.tablesp_consultaProductosGrupos.InitVars
            End If
        End If
        Me.tablesp_consultaProductosCodArancelarios = CType(MyBase.Tables("sp_consultaProductosCodArancelarios"),sp_consultaProductosCodArancelariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosCodArancelarios) Is Nothing) Then
                Me.tablesp_consultaProductosCodArancelarios.InitVars
            End If
        End If
        Me.tablesp_consultaCatalogo2 = CType(MyBase.Tables("sp_consultaCatalogo2"),sp_consultaCatalogo2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCatalogo2) Is Nothing) Then
                Me.tablesp_consultaCatalogo2.InitVars
            End If
        End If
        Me.tablesp_consultaProductosEvaluacionDSS = CType(MyBase.Tables("sp_consultaProductosEvaluacionDSS"),sp_consultaProductosEvaluacionDSSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosEvaluacionDSS) Is Nothing) Then
                Me.tablesp_consultaProductosEvaluacionDSS.InitVars
            End If
        End If
        Me.tablesp_analisisCobranzas = CType(MyBase.Tables("sp_analisisCobranzas"),sp_analisisCobranzasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_analisisCobranzas) Is Nothing) Then
                Me.tablesp_analisisCobranzas.InitVars
            End If
        End If
        Me.tablesp_consultaAjustesSaldos = CType(MyBase.Tables("sp_consultaAjustesSaldos"),sp_consultaAjustesSaldosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaAjustesSaldos) Is Nothing) Then
                Me.tablesp_consultaAjustesSaldos.InitVars
            End If
        End If
        Me.tablesp_consultaFactNoAjustadas = CType(MyBase.Tables("sp_consultaFactNoAjustadas"),sp_consultaFactNoAjustadasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaFactNoAjustadas) Is Nothing) Then
                Me.tablesp_consultaFactNoAjustadas.InitVars
            End If
        End If
        Me.tablesp_lvAjustes = CType(MyBase.Tables("sp_lvAjustes"),sp_lvAjustesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_lvAjustes) Is Nothing) Then
                Me.tablesp_lvAjustes.InitVars
            End If
        End If
        Me.tablesp_ConsultaProductosAjusteInv = CType(MyBase.Tables("sp_ConsultaProductosAjusteInv"),sp_ConsultaProductosAjusteInvDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_ConsultaProductosAjusteInv) Is Nothing) Then
                Me.tablesp_ConsultaProductosAjusteInv.InitVars
            End If
        End If
        Me.tablesp_consultaCodigosInternos = CType(MyBase.Tables("sp_consultaCodigosInternos"),sp_consultaCodigosInternosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCodigosInternos) Is Nothing) Then
                Me.tablesp_consultaCodigosInternos.InitVars
            End If
        End If
        Me.tablesp_consulta_Productos_PedidoCliente = CType(MyBase.Tables("sp_consulta_Productos_PedidoCliente"),sp_consulta_Productos_PedidoClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_Productos_PedidoCliente) Is Nothing) Then
                Me.tablesp_consulta_Productos_PedidoCliente.InitVars
            End If
        End If
        Me.tablesp_R_ChequesDev = CType(MyBase.Tables("sp_R_ChequesDev"),sp_R_ChequesDevDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_R_ChequesDev) Is Nothing) Then
                Me.tablesp_R_ChequesDev.InitVars
            End If
        End If
        Me.tablesp_consultaProductoF = CType(MyBase.Tables("sp_consultaProductoF"),sp_consultaProductoFDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductoF) Is Nothing) Then
                Me.tablesp_consultaProductoF.InitVars
            End If
        End If
        Me.tablesp_consultaNCPendientes = CType(MyBase.Tables("sp_consultaNCPendientes"),sp_consultaNCPendientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaNCPendientes) Is Nothing) Then
                Me.tablesp_consultaNCPendientes.InitVars
            End If
        End If
        Me.tablesp_consultaProductosDanados = CType(MyBase.Tables("sp_consultaProductosDanados"),sp_consultaProductosDanadosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosDanados) Is Nothing) Then
                Me.tablesp_consultaProductosDanados.InitVars
            End If
        End If
        Me.tablesp_consulta_Productos_Factura = CType(MyBase.Tables("sp_consulta_Productos_Factura"),sp_consulta_Productos_FacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_Productos_Factura) Is Nothing) Then
                Me.tablesp_consulta_Productos_Factura.InitVars
            End If
        End If
        Me.tablesp_consultaClienteCombo3 = CType(MyBase.Tables("sp_consultaClienteCombo3"),sp_consultaClienteCombo3DataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaClienteCombo3) Is Nothing) Then
                Me.tablesp_consultaClienteCombo3.InitVars
            End If
        End If
        Me.tablesp_relacionFact = CType(MyBase.Tables("sp_relacionFact"),sp_relacionFactDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_relacionFact) Is Nothing) Then
                Me.tablesp_relacionFact.InitVars
            End If
        End If
        Me.tablesp_consultaLogo = CType(MyBase.Tables("sp_consultaLogo"),sp_consultaLogoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaLogo) Is Nothing) Then
                Me.tablesp_consultaLogo.InitVars
            End If
        End If
        Me.tablesp_consultaObs = CType(MyBase.Tables("sp_consultaObs"),sp_consultaObsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaObs) Is Nothing) Then
                Me.tablesp_consultaObs.InitVars
            End If
        End If
        Me.tablesp_lvcliente = CType(MyBase.Tables("sp_lvcliente"),sp_lvclienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_lvcliente) Is Nothing) Then
                Me.tablesp_lvcliente.InitVars
            End If
        End If
        Me.tablesp_consultaTipoGasto = CType(MyBase.Tables("sp_consultaTipoGasto"),sp_consultaTipoGastoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaTipoGasto) Is Nothing) Then
                Me.tablesp_consultaTipoGasto.InitVars
            End If
        End If
        Me.tablesp_consultaCatalogoModelos = CType(MyBase.Tables("sp_consultaCatalogoModelos"),sp_consultaCatalogoModelosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCatalogoModelos) Is Nothing) Then
                Me.tablesp_consultaCatalogoModelos.InitVars
            End If
        End If
        Me.tablesp_consultaCodigoArancelario = CType(MyBase.Tables("sp_consultaCodigoArancelario"),sp_consultaCodigoArancelarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCodigoArancelario) Is Nothing) Then
                Me.tablesp_consultaCodigoArancelario.InitVars
            End If
        End If
        Me.tablesp_consultaCliente = CType(MyBase.Tables("sp_consultaCliente"),sp_consultaClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCliente) Is Nothing) Then
                Me.tablesp_consultaCliente.InitVars
            End If
        End If
        Me.tablesp_consultaEmpresa = CType(MyBase.Tables("sp_consultaEmpresa"),sp_consultaEmpresaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaEmpresa) Is Nothing) Then
                Me.tablesp_consultaEmpresa.InitVars
            End If
        End If
        Me.tablesp_consulta_Movimientos_Asociados = CType(MyBase.Tables("sp_consulta_Movimientos_Asociados"),sp_consulta_Movimientos_AsociadosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_Movimientos_Asociados) Is Nothing) Then
                Me.tablesp_consulta_Movimientos_Asociados.InitVars
            End If
        End If
        Me.tablesp_consultaUsuarios = CType(MyBase.Tables("sp_consultaUsuarios"),sp_consultaUsuariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaUsuarios) Is Nothing) Then
                Me.tablesp_consultaUsuarios.InitVars
            End If
        End If
        Me.tablesp_movimiento_Productos = CType(MyBase.Tables("sp_movimiento_Productos"),sp_movimiento_ProductosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_movimiento_Productos) Is Nothing) Then
                Me.tablesp_movimiento_Productos.InitVars
            End If
        End If
        Me.tablesp_consultaProductosInvetario = CType(MyBase.Tables("sp_consultaProductosInvetario"),sp_consultaProductosInvetarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosInvetario) Is Nothing) Then
                Me.tablesp_consultaProductosInvetario.InitVars
            End If
        End If
        Me.tablesp_consultaProductosParaInventario = CType(MyBase.Tables("sp_consultaProductosParaInventario"),sp_consultaProductosParaInventarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosParaInventario) Is Nothing) Then
                Me.tablesp_consultaProductosParaInventario.InitVars
            End If
        End If
        Me.tablesp_consultaProductosOcultos = CType(MyBase.Tables("sp_consultaProductosOcultos"),sp_consultaProductosOcultosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaProductosOcultos) Is Nothing) Then
                Me.tablesp_consultaProductosOcultos.InitVars
            End If
        End If
        Me.tablesp_infoGeneral = CType(MyBase.Tables("sp_infoGeneral"),sp_infoGeneralDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_infoGeneral) Is Nothing) Then
                Me.tablesp_infoGeneral.InitVars
            End If
        End If
        Me.tablesp_consultaCatalogoModelos_Ubic = CType(MyBase.Tables("sp_consultaCatalogoModelos_Ubic"),sp_consultaCatalogoModelos_UbicDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaCatalogoModelos_Ubic) Is Nothing) Then
                Me.tablesp_consultaCatalogoModelos_Ubic.InitVars
            End If
        End If
        Me.tablesp_infoGeneralCompras = CType(MyBase.Tables("sp_infoGeneralCompras"),sp_infoGeneralComprasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_infoGeneralCompras) Is Nothing) Then
                Me.tablesp_infoGeneralCompras.InitVars
            End If
        End If
        Me.tablesp_consultaPedidoCliente = CType(MyBase.Tables("sp_consultaPedidoCliente"),sp_consultaPedidoClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaPedidoCliente) Is Nothing) Then
                Me.tablesp_consultaPedidoCliente.InitVars
            End If
        End If
        Me.tablesp_consultaNotasCredito = CType(MyBase.Tables("sp_consultaNotasCredito"),sp_consultaNotasCreditoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaNotasCredito) Is Nothing) Then
                Me.tablesp_consultaNotasCredito.InitVars
            End If
        End If
        Me.tablesp_consultaFactVentas = CType(MyBase.Tables("sp_consultaFactVentas"),sp_consultaFactVentasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaFactVentas) Is Nothing) Then
                Me.tablesp_consultaFactVentas.InitVars
            End If
        End If
        Me.tablesp_consultaDiferenciasInventario = CType(MyBase.Tables("sp_consultaDiferenciasInventario"),sp_consultaDiferenciasInventarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaDiferenciasInventario) Is Nothing) Then
                Me.tablesp_consultaDiferenciasInventario.InitVars
            End If
        End If
        Me.tablesp_consulta_ubicacion_productos = CType(MyBase.Tables("sp_consulta_ubicacion_productos"),sp_consulta_ubicacion_productosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_ubicacion_productos) Is Nothing) Then
                Me.tablesp_consulta_ubicacion_productos.InitVars
            End If
        End If
        Me.tablesp_consulta_actividades_SINPRO = CType(MyBase.Tables("sp_consulta_actividades_SINPRO"),sp_consulta_actividades_SINPRODataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consulta_actividades_SINPRO) Is Nothing) Then
                Me.tablesp_consulta_actividades_SINPRO.InitVars
            End If
        End If
        Me.tablesp_consultaRecibos2 = CType(MyBase.Tables("sp_consultaRecibos2"),sp_consultaRecibos2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_consultaRecibos2) Is Nothing) Then
                Me.tablesp_consultaRecibos2.InitVars
            End If
        End If
        Me.tablesp_ConsultaProductosProveedores = CType(MyBase.Tables("sp_ConsultaProductosProveedores"),sp_ConsultaProductosProveedoresDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_ConsultaProductosProveedores) Is Nothing) Then
                Me.tablesp_ConsultaProductosProveedores.InitVars
            End If
        End If
        Me.tableTable_Almacen = CType(MyBase.Tables("Table_Almacen"),Table_AlmacenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Almacen) Is Nothing) Then
                Me.tableTable_Almacen.InitVars
            End If
        End If
        Me.tableTbl_Cuarto = CType(MyBase.Tables("Tbl_Cuarto"),Tbl_CuartoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Cuarto) Is Nothing) Then
                Me.tableTbl_Cuarto.InitVars
            End If
        End If
        Me.tableTbl_Estante = CType(MyBase.Tables("Tbl_Estante"),Tbl_EstanteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Estante) Is Nothing) Then
                Me.tableTbl_Estante.InitVars
            End If
        End If
        Me.tableTbl_Tramo = CType(MyBase.Tables("Tbl_Tramo"),Tbl_TramoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Tramo) Is Nothing) Then
                Me.tableTbl_Tramo.InitVars
            End If
        End If
        Me.tableTbl_Modelo = CType(MyBase.Tables("Tbl_Modelo"),Tbl_ModeloDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Modelo) Is Nothing) Then
                Me.tableTbl_Modelo.InitVars
            End If
        End If
        Me.tableTbl_Vendedor = CType(MyBase.Tables("Tbl_Vendedor"),Tbl_VendedorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Vendedor) Is Nothing) Then
                Me.tableTbl_Vendedor.InitVars
            End If
        End If
        Me.tableTbl_Fabrica = CType(MyBase.Tables("Tbl_Fabrica"),Tbl_FabricaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Fabrica) Is Nothing) Then
                Me.tableTbl_Fabrica.InitVars
            End If
        End If
        Me.tableTbl_Grupo = CType(MyBase.Tables("Tbl_Grupo"),Tbl_GrupoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Grupo) Is Nothing) Then
                Me.tableTbl_Grupo.InitVars
            End If
        End If
        Me.tableTbl_Cliente = CType(MyBase.Tables("Tbl_Cliente"),Tbl_ClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_Cliente) Is Nothing) Then
                Me.tableTbl_Cliente.InitVars
            End If
        End If
        Me.tableTable_GuiaTransporte = CType(MyBase.Tables("Table_GuiaTransporte"),Table_GuiaTransporteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_GuiaTransporte) Is Nothing) Then
                Me.tableTable_GuiaTransporte.InitVars
            End If
        End If
        Me.tableTable_GuiaDesglosada = CType(MyBase.Tables("Table_GuiaDesglosada"),Table_GuiaDesglosadaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_GuiaDesglosada) Is Nothing) Then
                Me.tableTable_GuiaDesglosada.InitVars
            End If
        End If
        Me.tableTable_GuiaBultos = CType(MyBase.Tables("Table_GuiaBultos"),Table_GuiaBultosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_GuiaBultos) Is Nothing) Then
                Me.tableTable_GuiaBultos.InitVars
            End If
        End If
        Me.tableTable_RelacionFacturas = CType(MyBase.Tables("Table_RelacionFacturas"),Table_RelacionFacturasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_RelacionFacturas) Is Nothing) Then
                Me.tableTable_RelacionFacturas.InitVars
            End If
        End If
        Me.tableTable_Analisis_Cobranza = CType(MyBase.Tables("Table_Analisis_Cobranza"),Table_Analisis_CobranzaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Analisis_Cobranza) Is Nothing) Then
                Me.tableTable_Analisis_Cobranza.InitVars
            End If
        End If
        Me.tableTable_Cargar_Compra = CType(MyBase.Tables("Table_Cargar_Compra"),Table_Cargar_CompraDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Cargar_Compra) Is Nothing) Then
                Me.tableTable_Cargar_Compra.InitVars
            End If
        End If
        Me.tableTable_Productos_Nacionalizados = CType(MyBase.Tables("Table_Productos_Nacionalizados"),Table_Productos_NacionalizadosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Productos_Nacionalizados) Is Nothing) Then
                Me.tableTable_Productos_Nacionalizados.InitVars
            End If
        End If
        Me.tableTable_Productos_Variacion = CType(MyBase.Tables("Table_Productos_Variacion"),Table_Productos_VariacionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Productos_Variacion) Is Nothing) Then
                Me.tableTable_Productos_Variacion.InitVars
            End If
        End If
        Me.tableTable_Guia_Almacenes_Cuartos = CType(MyBase.Tables("Table_Guia_Almacenes_Cuartos"),Table_Guia_Almacenes_CuartosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Guia_Almacenes_Cuartos) Is Nothing) Then
                Me.tableTable_Guia_Almacenes_Cuartos.InitVars
            End If
        End If
        Me.tableTable_ChequesDev = CType(MyBase.Tables("Table_ChequesDev"),Table_ChequesDevDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_ChequesDev) Is Nothing) Then
                Me.tableTable_ChequesDev.InitVars
            End If
        End If
        Me.tableTable_DetallesComisionPagada = CType(MyBase.Tables("Table_DetallesComisionPagada"),Table_DetallesComisionPagadaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_DetallesComisionPagada) Is Nothing) Then
                Me.tableTable_DetallesComisionPagada.InitVars
            End If
        End If
        Me.tableTable_Libro_Ventas = CType(MyBase.Tables("Table_Libro_Ventas"),Table_Libro_VentasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Libro_Ventas) Is Nothing) Then
                Me.tableTable_Libro_Ventas.InitVars
            End If
        End If
        Me.tableTbl_DGV_Eficacia = CType(MyBase.Tables("Tbl_DGV_Eficacia"),Tbl_DGV_EficaciaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTbl_DGV_Eficacia) Is Nothing) Then
                Me.tableTbl_DGV_Eficacia.InitVars
            End If
        End If
        Me.tableTable_Catalogo_Productos_Fotos = CType(MyBase.Tables("Table_Catalogo_Productos_Fotos"),Table_Catalogo_Productos_FotosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Catalogo_Productos_Fotos) Is Nothing) Then
                Me.tableTable_Catalogo_Productos_Fotos.InitVars
            End If
        End If
        Me.tableTable_indice_Modelos = CType(MyBase.Tables("Table_indice_Modelos"),Table_indice_ModelosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_indice_Modelos) Is Nothing) Then
                Me.tableTable_indice_Modelos.InitVars
            End If
        End If
        Me.tableTable_indice_Productos = CType(MyBase.Tables("Table_indice_Productos"),Table_indice_ProductosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_indice_Productos) Is Nothing) Then
                Me.tableTable_indice_Productos.InitVars
            End If
        End If
        Me.tableTable_Producto_Etiqueta = CType(MyBase.Tables("Table_Producto_Etiqueta"),Table_Producto_EtiquetaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Producto_Etiqueta) Is Nothing) Then
                Me.tableTable_Producto_Etiqueta.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "MELDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MELDataSet.xsd"
        Me.EnforceConstraints = false
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesp_consultaProducto_GranSelect = New sp_consultaProducto_GranSelectDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProducto_GranSelect)
        Me.tablesp_consultaIVA = New sp_consultaIVADataTable
        MyBase.Tables.Add(Me.tablesp_consultaIVA)
        Me.tablesp_consultaProducto = New sp_consultaProductoDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProducto)
        Me.tablesp_consultaFacturasPagadas = New sp_consultaFacturasPagadasDataTable
        MyBase.Tables.Add(Me.tablesp_consultaFacturasPagadas)
        Me.tablesp_consultaMarca = New sp_consultaMarcaDataTable
        MyBase.Tables.Add(Me.tablesp_consultaMarca)
        Me.tablesp_consulta_producto_pedido_guia = New sp_consulta_producto_pedido_guiaDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_producto_pedido_guia)
        Me.tablesp_consultaPreferencias = New sp_consultaPreferenciasDataTable
        MyBase.Tables.Add(Me.tablesp_consultaPreferencias)
        Me.tablesp_VerTransporte = New sp_VerTransporteDataTable
        MyBase.Tables.Add(Me.tablesp_VerTransporte)
        Me.tablesp_consultaNC_rdlc = New sp_consultaNC_rdlcDataTable
        MyBase.Tables.Add(Me.tablesp_consultaNC_rdlc)
        Me.tablesp_consulta_Listado_Modelo = New sp_consulta_Listado_ModeloDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_Listado_Modelo)
        Me.tablesp_consulta_Listado_Alfabetico = New sp_consulta_Listado_AlfabeticoDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_Listado_Alfabetico)
        Me.tablesp_consultaFactura = New sp_consultaFacturaDataTable
        MyBase.Tables.Add(Me.tablesp_consultaFactura)
        Me.tablesp_consultaPedido_Producto_Cliente = New sp_consultaPedido_Producto_ClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consultaPedido_Producto_Cliente)
        Me.tablesp_prefactura = New sp_prefacturaDataTable
        MyBase.Tables.Add(Me.tablesp_prefactura)
        Me.tablesp_R_traspasos = New sp_R_traspasosDataTable
        MyBase.Tables.Add(Me.tablesp_R_traspasos)
        Me.tablesp_consultaproductosNC_rdlc = New sp_consultaproductosNC_rdlcDataTable
        MyBase.Tables.Add(Me.tablesp_consultaproductosNC_rdlc)
        Me.tablesp_consultaProductosVariacion = New sp_consultaProductosVariacionDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosVariacion)
        Me.tablesp_ConsultaClienteFactura = New sp_ConsultaClienteFacturaDataTable
        MyBase.Tables.Add(Me.tablesp_ConsultaClienteFactura)
        Me.tablesp_consultaProductoGranSelect2 = New sp_consultaProductoGranSelect2DataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductoGranSelect2)
        Me.tablesp_lvAjustesPorNC = New sp_lvAjustesPorNCDataTable
        MyBase.Tables.Add(Me.tablesp_lvAjustesPorNC)
        Me.tablesp_consultaNotaCreditoNoAjustada = New sp_consultaNotaCreditoNoAjustadaDataTable
        MyBase.Tables.Add(Me.tablesp_consultaNotaCreditoNoAjustada)
        Me.tablesp_consultaProductosParaPedidoCompra = New sp_consultaProductosParaPedidoCompraDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosParaPedidoCompra)
        Me.tablesp_consultaProductosGrupos = New sp_consultaProductosGruposDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosGrupos)
        Me.tablesp_consultaProductosCodArancelarios = New sp_consultaProductosCodArancelariosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosCodArancelarios)
        Me.tablesp_consultaCatalogo2 = New sp_consultaCatalogo2DataTable
        MyBase.Tables.Add(Me.tablesp_consultaCatalogo2)
        Me.tablesp_consultaProductosEvaluacionDSS = New sp_consultaProductosEvaluacionDSSDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosEvaluacionDSS)
        Me.tablesp_analisisCobranzas = New sp_analisisCobranzasDataTable
        MyBase.Tables.Add(Me.tablesp_analisisCobranzas)
        Me.tablesp_consultaAjustesSaldos = New sp_consultaAjustesSaldosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaAjustesSaldos)
        Me.tablesp_consultaFactNoAjustadas = New sp_consultaFactNoAjustadasDataTable
        MyBase.Tables.Add(Me.tablesp_consultaFactNoAjustadas)
        Me.tablesp_lvAjustes = New sp_lvAjustesDataTable
        MyBase.Tables.Add(Me.tablesp_lvAjustes)
        Me.tablesp_ConsultaProductosAjusteInv = New sp_ConsultaProductosAjusteInvDataTable
        MyBase.Tables.Add(Me.tablesp_ConsultaProductosAjusteInv)
        Me.tablesp_consultaCodigosInternos = New sp_consultaCodigosInternosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaCodigosInternos)
        Me.tablesp_consulta_Productos_PedidoCliente = New sp_consulta_Productos_PedidoClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_Productos_PedidoCliente)
        Me.tablesp_R_ChequesDev = New sp_R_ChequesDevDataTable
        MyBase.Tables.Add(Me.tablesp_R_ChequesDev)
        Me.tablesp_consultaProductoF = New sp_consultaProductoFDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductoF)
        Me.tablesp_consultaNCPendientes = New sp_consultaNCPendientesDataTable
        MyBase.Tables.Add(Me.tablesp_consultaNCPendientes)
        Me.tablesp_consultaProductosDanados = New sp_consultaProductosDanadosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosDanados)
        Me.tablesp_consulta_Productos_Factura = New sp_consulta_Productos_FacturaDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_Productos_Factura)
        Me.tablesp_consultaClienteCombo3 = New sp_consultaClienteCombo3DataTable
        MyBase.Tables.Add(Me.tablesp_consultaClienteCombo3)
        Me.tablesp_relacionFact = New sp_relacionFactDataTable
        MyBase.Tables.Add(Me.tablesp_relacionFact)
        Me.tablesp_consultaLogo = New sp_consultaLogoDataTable
        MyBase.Tables.Add(Me.tablesp_consultaLogo)
        Me.tablesp_consultaObs = New sp_consultaObsDataTable
        MyBase.Tables.Add(Me.tablesp_consultaObs)
        Me.tablesp_lvcliente = New sp_lvclienteDataTable
        MyBase.Tables.Add(Me.tablesp_lvcliente)
        Me.tablesp_consultaTipoGasto = New sp_consultaTipoGastoDataTable
        MyBase.Tables.Add(Me.tablesp_consultaTipoGasto)
        Me.tablesp_consultaCatalogoModelos = New sp_consultaCatalogoModelosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaCatalogoModelos)
        Me.tablesp_consultaCodigoArancelario = New sp_consultaCodigoArancelarioDataTable
        MyBase.Tables.Add(Me.tablesp_consultaCodigoArancelario)
        Me.tablesp_consultaCliente = New sp_consultaClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consultaCliente)
        Me.tablesp_consultaEmpresa = New sp_consultaEmpresaDataTable
        MyBase.Tables.Add(Me.tablesp_consultaEmpresa)
        Me.tablesp_consulta_Movimientos_Asociados = New sp_consulta_Movimientos_AsociadosDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_Movimientos_Asociados)
        Me.tablesp_consultaUsuarios = New sp_consultaUsuariosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaUsuarios)
        Me.tablesp_movimiento_Productos = New sp_movimiento_ProductosDataTable
        MyBase.Tables.Add(Me.tablesp_movimiento_Productos)
        Me.tablesp_consultaProductosInvetario = New sp_consultaProductosInvetarioDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosInvetario)
        Me.tablesp_consultaProductosParaInventario = New sp_consultaProductosParaInventarioDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosParaInventario)
        Me.tablesp_consultaProductosOcultos = New sp_consultaProductosOcultosDataTable
        MyBase.Tables.Add(Me.tablesp_consultaProductosOcultos)
        Me.tablesp_infoGeneral = New sp_infoGeneralDataTable
        MyBase.Tables.Add(Me.tablesp_infoGeneral)
        Me.tablesp_consultaCatalogoModelos_Ubic = New sp_consultaCatalogoModelos_UbicDataTable
        MyBase.Tables.Add(Me.tablesp_consultaCatalogoModelos_Ubic)
        Me.tablesp_infoGeneralCompras = New sp_infoGeneralComprasDataTable
        MyBase.Tables.Add(Me.tablesp_infoGeneralCompras)
        Me.tablesp_consultaPedidoCliente = New sp_consultaPedidoClienteDataTable
        MyBase.Tables.Add(Me.tablesp_consultaPedidoCliente)
        Me.tablesp_consultaNotasCredito = New sp_consultaNotasCreditoDataTable
        MyBase.Tables.Add(Me.tablesp_consultaNotasCredito)
        Me.tablesp_consultaFactVentas = New sp_consultaFactVentasDataTable
        MyBase.Tables.Add(Me.tablesp_consultaFactVentas)
        Me.tablesp_consultaDiferenciasInventario = New sp_consultaDiferenciasInventarioDataTable
        MyBase.Tables.Add(Me.tablesp_consultaDiferenciasInventario)
        Me.tablesp_consulta_ubicacion_productos = New sp_consulta_ubicacion_productosDataTable
        MyBase.Tables.Add(Me.tablesp_consulta_ubicacion_productos)
        Me.tablesp_consulta_actividades_SINPRO = New sp_consulta_actividades_SINPRODataTable
        MyBase.Tables.Add(Me.tablesp_consulta_actividades_SINPRO)
        Me.tablesp_consultaRecibos2 = New sp_consultaRecibos2DataTable
        MyBase.Tables.Add(Me.tablesp_consultaRecibos2)
        Me.tablesp_ConsultaProductosProveedores = New sp_ConsultaProductosProveedoresDataTable
        MyBase.Tables.Add(Me.tablesp_ConsultaProductosProveedores)
        Me.tableTable_Almacen = New Table_AlmacenDataTable
        MyBase.Tables.Add(Me.tableTable_Almacen)
        Me.tableTbl_Cuarto = New Tbl_CuartoDataTable
        MyBase.Tables.Add(Me.tableTbl_Cuarto)
        Me.tableTbl_Estante = New Tbl_EstanteDataTable
        MyBase.Tables.Add(Me.tableTbl_Estante)
        Me.tableTbl_Tramo = New Tbl_TramoDataTable
        MyBase.Tables.Add(Me.tableTbl_Tramo)
        Me.tableTbl_Modelo = New Tbl_ModeloDataTable
        MyBase.Tables.Add(Me.tableTbl_Modelo)
        Me.tableTbl_Vendedor = New Tbl_VendedorDataTable
        MyBase.Tables.Add(Me.tableTbl_Vendedor)
        Me.tableTbl_Fabrica = New Tbl_FabricaDataTable
        MyBase.Tables.Add(Me.tableTbl_Fabrica)
        Me.tableTbl_Grupo = New Tbl_GrupoDataTable
        MyBase.Tables.Add(Me.tableTbl_Grupo)
        Me.tableTbl_Cliente = New Tbl_ClienteDataTable
        MyBase.Tables.Add(Me.tableTbl_Cliente)
        Me.tableTable_GuiaTransporte = New Table_GuiaTransporteDataTable
        MyBase.Tables.Add(Me.tableTable_GuiaTransporte)
        Me.tableTable_GuiaDesglosada = New Table_GuiaDesglosadaDataTable
        MyBase.Tables.Add(Me.tableTable_GuiaDesglosada)
        Me.tableTable_GuiaBultos = New Table_GuiaBultosDataTable
        MyBase.Tables.Add(Me.tableTable_GuiaBultos)
        Me.tableTable_RelacionFacturas = New Table_RelacionFacturasDataTable
        MyBase.Tables.Add(Me.tableTable_RelacionFacturas)
        Me.tableTable_Analisis_Cobranza = New Table_Analisis_CobranzaDataTable
        MyBase.Tables.Add(Me.tableTable_Analisis_Cobranza)
        Me.tableTable_Cargar_Compra = New Table_Cargar_CompraDataTable
        MyBase.Tables.Add(Me.tableTable_Cargar_Compra)
        Me.tableTable_Productos_Nacionalizados = New Table_Productos_NacionalizadosDataTable
        MyBase.Tables.Add(Me.tableTable_Productos_Nacionalizados)
        Me.tableTable_Productos_Variacion = New Table_Productos_VariacionDataTable
        MyBase.Tables.Add(Me.tableTable_Productos_Variacion)
        Me.tableTable_Guia_Almacenes_Cuartos = New Table_Guia_Almacenes_CuartosDataTable
        MyBase.Tables.Add(Me.tableTable_Guia_Almacenes_Cuartos)
        Me.tableTable_ChequesDev = New Table_ChequesDevDataTable
        MyBase.Tables.Add(Me.tableTable_ChequesDev)
        Me.tableTable_DetallesComisionPagada = New Table_DetallesComisionPagadaDataTable
        MyBase.Tables.Add(Me.tableTable_DetallesComisionPagada)
        Me.tableTable_Libro_Ventas = New Table_Libro_VentasDataTable
        MyBase.Tables.Add(Me.tableTable_Libro_Ventas)
        Me.tableTbl_DGV_Eficacia = New Tbl_DGV_EficaciaDataTable
        MyBase.Tables.Add(Me.tableTbl_DGV_Eficacia)
        Me.tableTable_Catalogo_Productos_Fotos = New Table_Catalogo_Productos_FotosDataTable
        MyBase.Tables.Add(Me.tableTable_Catalogo_Productos_Fotos)
        Me.tableTable_indice_Modelos = New Table_indice_ModelosDataTable
        MyBase.Tables.Add(Me.tableTable_indice_Modelos)
        Me.tableTable_indice_Productos = New Table_indice_ProductosDataTable
        MyBase.Tables.Add(Me.tableTable_indice_Productos)
        Me.tableTable_Producto_Etiqueta = New Table_Producto_EtiquetaDataTable
        MyBase.Tables.Add(Me.tableTable_Producto_Etiqueta)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProducto_GranSelect() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaIVA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProducto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaFacturasPagadas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaMarca() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_producto_pedido_guia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaPreferencias() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_VerTransporte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaNC_rdlc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_Listado_Modelo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_Listado_Alfabetico() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaFactura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaPedido_Producto_Cliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_prefactura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_R_traspasos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaproductosNC_rdlc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosVariacion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_ConsultaClienteFactura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductoGranSelect2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_lvAjustesPorNC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaNotaCreditoNoAjustada() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosParaPedidoCompra() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosGrupos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosCodArancelarios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCatalogo2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosEvaluacionDSS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_analisisCobranzas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaAjustesSaldos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaFactNoAjustadas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_lvAjustes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_ConsultaProductosAjusteInv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCodigosInternos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_Productos_PedidoCliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_R_ChequesDev() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductoF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaNCPendientes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosDanados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_Productos_Factura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaClienteCombo3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_relacionFact() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaLogo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaObs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_lvcliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaTipoGasto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCatalogoModelos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCodigoArancelario() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaEmpresa() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_Movimientos_Asociados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaUsuarios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_movimiento_Productos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosInvetario() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosParaInventario() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaProductosOcultos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_infoGeneral() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaCatalogoModelos_Ubic() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_infoGeneralCompras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaPedidoCliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaNotasCredito() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaFactVentas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaDiferenciasInventario() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_ubicacion_productos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consulta_actividades_SINPRO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_consultaRecibos2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_ConsultaProductosProveedores() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Almacen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Cuarto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Estante() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Tramo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Modelo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Vendedor() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Fabrica() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Grupo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_Cliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_GuiaTransporte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_GuiaDesglosada() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_GuiaBultos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_RelacionFacturas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Analisis_Cobranza() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Cargar_Compra() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Productos_Nacionalizados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Productos_Variacion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Guia_Almacenes_Cuartos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_ChequesDev() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_DetallesComisionPagada() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Libro_Ventas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTbl_DGV_Eficacia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Catalogo_Productos_Fotos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_indice_Modelos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_indice_Productos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Producto_Etiqueta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MELDataSet = New MELDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub sp_consultaProducto_GranSelectRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProducto_GranSelectRowChangeEvent)
    
    Public Delegate Sub sp_consultaIVARowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaIVARowChangeEvent)
    
    Public Delegate Sub sp_consultaProductoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductoRowChangeEvent)
    
    Public Delegate Sub sp_consultaFacturasPagadasRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaFacturasPagadasRowChangeEvent)
    
    Public Delegate Sub sp_consultaMarcaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaMarcaRowChangeEvent)
    
    Public Delegate Sub sp_consulta_producto_pedido_guiaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_producto_pedido_guiaRowChangeEvent)
    
    Public Delegate Sub sp_consultaPreferenciasRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaPreferenciasRowChangeEvent)
    
    Public Delegate Sub sp_VerTransporteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_VerTransporteRowChangeEvent)
    
    Public Delegate Sub sp_consultaNC_rdlcRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaNC_rdlcRowChangeEvent)
    
    Public Delegate Sub sp_consulta_Listado_ModeloRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_Listado_ModeloRowChangeEvent)
    
    Public Delegate Sub sp_consulta_Listado_AlfabeticoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_Listado_AlfabeticoRowChangeEvent)
    
    Public Delegate Sub sp_consultaFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaFacturaRowChangeEvent)
    
    Public Delegate Sub sp_consultaPedido_Producto_ClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaPedido_Producto_ClienteRowChangeEvent)
    
    Public Delegate Sub sp_prefacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_prefacturaRowChangeEvent)
    
    Public Delegate Sub sp_R_traspasosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_R_traspasosRowChangeEvent)
    
    Public Delegate Sub sp_consultaproductosNC_rdlcRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaproductosNC_rdlcRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosVariacionRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosVariacionRowChangeEvent)
    
    Public Delegate Sub sp_ConsultaClienteFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_ConsultaClienteFacturaRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductoGranSelect2RowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductoGranSelect2RowChangeEvent)
    
    Public Delegate Sub sp_lvAjustesPorNCRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_lvAjustesPorNCRowChangeEvent)
    
    Public Delegate Sub sp_consultaNotaCreditoNoAjustadaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaNotaCreditoNoAjustadaRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosParaPedidoCompraRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosParaPedidoCompraRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosGruposRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosGruposRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosCodArancelariosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosCodArancelariosRowChangeEvent)
    
    Public Delegate Sub sp_consultaCatalogo2RowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaCatalogo2RowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosEvaluacionDSSRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosEvaluacionDSSRowChangeEvent)
    
    Public Delegate Sub sp_analisisCobranzasRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_analisisCobranzasRowChangeEvent)
    
    Public Delegate Sub sp_consultaAjustesSaldosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaAjustesSaldosRowChangeEvent)
    
    Public Delegate Sub sp_consultaFactNoAjustadasRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaFactNoAjustadasRowChangeEvent)
    
    Public Delegate Sub sp_lvAjustesRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_lvAjustesRowChangeEvent)
    
    Public Delegate Sub sp_ConsultaProductosAjusteInvRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_ConsultaProductosAjusteInvRowChangeEvent)
    
    Public Delegate Sub sp_consultaCodigosInternosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaCodigosInternosRowChangeEvent)
    
    Public Delegate Sub sp_consulta_Productos_PedidoClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_Productos_PedidoClienteRowChangeEvent)
    
    Public Delegate Sub sp_R_ChequesDevRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_R_ChequesDevRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductoFRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductoFRowChangeEvent)
    
    Public Delegate Sub sp_consultaNCPendientesRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaNCPendientesRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosDanadosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosDanadosRowChangeEvent)
    
    Public Delegate Sub sp_consulta_Productos_FacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_Productos_FacturaRowChangeEvent)
    
    Public Delegate Sub sp_consultaClienteCombo3RowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaClienteCombo3RowChangeEvent)
    
    Public Delegate Sub sp_relacionFactRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_relacionFactRowChangeEvent)
    
    Public Delegate Sub sp_consultaLogoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaLogoRowChangeEvent)
    
    Public Delegate Sub sp_consultaObsRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaObsRowChangeEvent)
    
    Public Delegate Sub sp_lvclienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_lvclienteRowChangeEvent)
    
    Public Delegate Sub sp_consultaTipoGastoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaTipoGastoRowChangeEvent)
    
    Public Delegate Sub sp_consultaCatalogoModelosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaCatalogoModelosRowChangeEvent)
    
    Public Delegate Sub sp_consultaCodigoArancelarioRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaCodigoArancelarioRowChangeEvent)
    
    Public Delegate Sub sp_consultaClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaClienteRowChangeEvent)
    
    Public Delegate Sub sp_consultaEmpresaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaEmpresaRowChangeEvent)
    
    Public Delegate Sub sp_consulta_Movimientos_AsociadosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_Movimientos_AsociadosRowChangeEvent)
    
    Public Delegate Sub sp_consultaUsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaUsuariosRowChangeEvent)
    
    Public Delegate Sub sp_movimiento_ProductosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_movimiento_ProductosRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosInvetarioRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosInvetarioRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosParaInventarioRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosParaInventarioRowChangeEvent)
    
    Public Delegate Sub sp_consultaProductosOcultosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaProductosOcultosRowChangeEvent)
    
    Public Delegate Sub sp_infoGeneralRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_infoGeneralRowChangeEvent)
    
    Public Delegate Sub sp_consultaCatalogoModelos_UbicRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaCatalogoModelos_UbicRowChangeEvent)
    
    Public Delegate Sub sp_infoGeneralComprasRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_infoGeneralComprasRowChangeEvent)
    
    Public Delegate Sub sp_consultaPedidoClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaPedidoClienteRowChangeEvent)
    
    Public Delegate Sub sp_consultaNotasCreditoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaNotasCreditoRowChangeEvent)
    
    Public Delegate Sub sp_consultaFactVentasRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaFactVentasRowChangeEvent)
    
    Public Delegate Sub sp_consultaDiferenciasInventarioRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaDiferenciasInventarioRowChangeEvent)
    
    Public Delegate Sub sp_consulta_ubicacion_productosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_ubicacion_productosRowChangeEvent)
    
    Public Delegate Sub sp_consulta_actividades_SINPRORowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consulta_actividades_SINPRORowChangeEvent)
    
    Public Delegate Sub sp_consultaRecibos2RowChangeEventHandler(ByVal sender As Object, ByVal e As sp_consultaRecibos2RowChangeEvent)
    
    Public Delegate Sub sp_ConsultaProductosProveedoresRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_ConsultaProductosProveedoresRowChangeEvent)
    
    Public Delegate Sub Table_AlmacenRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_AlmacenRowChangeEvent)
    
    Public Delegate Sub Tbl_CuartoRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_CuartoRowChangeEvent)
    
    Public Delegate Sub Tbl_EstanteRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_EstanteRowChangeEvent)
    
    Public Delegate Sub Tbl_TramoRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_TramoRowChangeEvent)
    
    Public Delegate Sub Tbl_ModeloRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_ModeloRowChangeEvent)
    
    Public Delegate Sub Tbl_VendedorRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_VendedorRowChangeEvent)
    
    Public Delegate Sub Tbl_FabricaRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_FabricaRowChangeEvent)
    
    Public Delegate Sub Tbl_GrupoRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_GrupoRowChangeEvent)
    
    Public Delegate Sub Tbl_ClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_ClienteRowChangeEvent)
    
    Public Delegate Sub Table_GuiaTransporteRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_GuiaTransporteRowChangeEvent)
    
    Public Delegate Sub Table_GuiaDesglosadaRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_GuiaDesglosadaRowChangeEvent)
    
    Public Delegate Sub Table_GuiaBultosRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_GuiaBultosRowChangeEvent)
    
    Public Delegate Sub Table_RelacionFacturasRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_RelacionFacturasRowChangeEvent)
    
    Public Delegate Sub Table_Analisis_CobranzaRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Analisis_CobranzaRowChangeEvent)
    
    Public Delegate Sub Table_Cargar_CompraRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Cargar_CompraRowChangeEvent)
    
    Public Delegate Sub Table_Productos_NacionalizadosRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Productos_NacionalizadosRowChangeEvent)
    
    Public Delegate Sub Table_Productos_VariacionRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Productos_VariacionRowChangeEvent)
    
    Public Delegate Sub Table_Guia_Almacenes_CuartosRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Guia_Almacenes_CuartosRowChangeEvent)
    
    Public Delegate Sub Table_ChequesDevRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_ChequesDevRowChangeEvent)
    
    Public Delegate Sub Table_DetallesComisionPagadaRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_DetallesComisionPagadaRowChangeEvent)
    
    Public Delegate Sub Table_Libro_VentasRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Libro_VentasRowChangeEvent)
    
    Public Delegate Sub Tbl_DGV_EficaciaRowChangeEventHandler(ByVal sender As Object, ByVal e As Tbl_DGV_EficaciaRowChangeEvent)
    
    Public Delegate Sub Table_Catalogo_Productos_FotosRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Catalogo_Productos_FotosRowChangeEvent)
    
    Public Delegate Sub Table_indice_ModelosRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_indice_ModelosRowChangeEvent)
    
    Public Delegate Sub Table_indice_ProductosRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_indice_ProductosRowChangeEvent)
    
    Public Delegate Sub Table_Producto_EtiquetaRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_Producto_EtiquetaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProducto_GranSelectDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnModelo2 As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProducto_GranSelect"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Modelo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProducto_GranSelectRow
            Get
                Return CType(Me.Rows(index),sp_consultaProducto_GranSelectRow)
            End Get
        End Property
        
        Public Event sp_consultaProducto_GranSelectRowChanging As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        Public Event sp_consultaProducto_GranSelectRowChanged As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        Public Event sp_consultaProducto_GranSelectRowDeleting As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        Public Event sp_consultaProducto_GranSelectRowDeleted As sp_consultaProducto_GranSelectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProducto_GranSelectRow(ByVal row As sp_consultaProducto_GranSelectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProducto_GranSelectRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal Modelo As String, ByVal Ubicacion As String, ByVal CodigoTramo As Integer, ByVal Modelo2 As String, ByVal CodigoProductoF As String) As sp_consultaProducto_GranSelectRow
            Dim rowsp_consultaProducto_GranSelectRow As sp_consultaProducto_GranSelectRow = CType(Me.NewRow,sp_consultaProducto_GranSelectRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CantidadExistencia, PrecioVenta, Modelo, Ubicacion, CodigoTramo, Modelo2, CodigoProductoF}
            rowsp_consultaProducto_GranSelectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProducto_GranSelectRow)
            Return rowsp_consultaProducto_GranSelectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProducto_GranSelectRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProducto_GranSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProducto_GranSelectDataTable = CType(MyBase.Clone,sp_consultaProducto_GranSelectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProducto_GranSelectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnModelo2 = MyBase.Columns("Modelo2")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnModelo2 = New Global.System.Data.DataColumn("Modelo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo2)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 9
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 50
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 241
            Me.columnModelo2.ReadOnly = true
            Me.columnModelo2.MaxLength = 500
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProducto_GranSelectRow() As sp_consultaProducto_GranSelectRow
            Return CType(Me.NewRow,sp_consultaProducto_GranSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProducto_GranSelectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProducto_GranSelectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowChanged(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowChanging(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowDeleted(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProducto_GranSelectRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProducto_GranSelectRowDeleting(Me, New sp_consultaProducto_GranSelectRowChangeEvent(CType(e.Row,sp_consultaProducto_GranSelectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProducto_GranSelectRow(ByVal row As sp_consultaProducto_GranSelectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProducto_GranSelectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaIVADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columniva As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaIVA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaIVARow
            Get
                Return CType(Me.Rows(index),sp_consultaIVARow)
            End Get
        End Property
        
        Public Event sp_consultaIVARowChanging As sp_consultaIVARowChangeEventHandler
        
        Public Event sp_consultaIVARowChanged As sp_consultaIVARowChangeEventHandler
        
        Public Event sp_consultaIVARowDeleting As sp_consultaIVARowChangeEventHandler
        
        Public Event sp_consultaIVARowDeleted As sp_consultaIVARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaIVARow(ByVal row As sp_consultaIVARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaIVARow(ByVal iva As Double) As sp_consultaIVARow
            Dim rowsp_consultaIVARow As sp_consultaIVARow = CType(Me.NewRow,sp_consultaIVARow)
            Dim columnValuesArray() As Object = New Object() {iva}
            rowsp_consultaIVARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaIVARow)
            Return rowsp_consultaIVARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaIVADataTable = CType(MyBase.Clone,sp_consultaIVADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaIVADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columniva = MyBase.Columns("iva")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columniva = New Global.System.Data.DataColumn("iva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniva)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaIVARow() As sp_consultaIVARow
            Return CType(Me.NewRow,sp_consultaIVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaIVARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaIVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaIVARowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowChanged(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaIVARowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowChanging(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaIVARowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowDeleted(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaIVARowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaIVARowDeleting(Me, New sp_consultaIVARowChangeEvent(CType(e.Row,sp_consultaIVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaIVARow(ByVal row As sp_consultaIVARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaIVADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnCodigoArancelario As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnFoto As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnCostoPromedio As Global.System.Data.DataColumn
        
        Private columnClasificacionABC As Global.System.Data.DataColumn
        
        Private columnCantidadVendida As Global.System.Data.DataColumn
        
        Private columnUtilidadProducto As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProducto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoArancelarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoArancelario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoPromedioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoPromedio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClasificacionABCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasificacionABC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadVendidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadVendida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UtilidadProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUtilidadProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductoRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductoRow)
            End Get
        End Property
        
        Public Event sp_consultaProductoRowChanging As sp_consultaProductoRowChangeEventHandler
        
        Public Event sp_consultaProductoRowChanged As sp_consultaProductoRowChangeEventHandler
        
        Public Event sp_consultaProductoRowDeleting As sp_consultaProductoRowChangeEventHandler
        
        Public Event sp_consultaProductoRowDeleted As sp_consultaProductoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductoRow(ByVal row As sp_consultaProductoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductoRow(ByVal CodigoInterno As String, ByVal CodigoArancelario As String, ByVal Nombre As String, ByVal MarcaProducto As String, ByVal Foto As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal CostoPromedio As Double, ByVal ClasificacionABC As String, ByVal CantidadVendida As Decimal, ByVal UtilidadProducto As Double, ByVal eliminado As Boolean) As sp_consultaProductoRow
            Dim rowsp_consultaProductoRow As sp_consultaProductoRow = CType(Me.NewRow,sp_consultaProductoRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, CodigoArancelario, Nombre, MarcaProducto, Foto, CantidadExistencia, PrecioVenta, CostoPromedio, ClasificacionABC, CantidadVendida, UtilidadProducto, eliminado}
            rowsp_consultaProductoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductoRow)
            Return rowsp_consultaProductoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductoRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductoDataTable = CType(MyBase.Clone,sp_consultaProductoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnCodigoArancelario = MyBase.Columns("CodigoArancelario")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnFoto = MyBase.Columns("Foto")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnCostoPromedio = MyBase.Columns("CostoPromedio")
            Me.columnClasificacionABC = MyBase.Columns("ClasificacionABC")
            Me.columnCantidadVendida = MyBase.Columns("CantidadVendida")
            Me.columnUtilidadProducto = MyBase.Columns("UtilidadProducto")
            Me.columneliminado = MyBase.Columns("eliminado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnCodigoArancelario = New Global.System.Data.DataColumn("CodigoArancelario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoArancelario)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnFoto = New Global.System.Data.DataColumn("Foto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnCostoPromedio = New Global.System.Data.DataColumn("CostoPromedio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoPromedio)
            Me.columnClasificacionABC = New Global.System.Data.DataColumn("ClasificacionABC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasificacionABC)
            Me.columnCantidadVendida = New Global.System.Data.DataColumn("CantidadVendida", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadVendida)
            Me.columnUtilidadProducto = New Global.System.Data.DataColumn("UtilidadProducto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUtilidadProducto)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 9
            Me.columnCodigoArancelario.MaxLength = 50
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnMarcaProducto.MaxLength = 50
            Me.columnFoto.MaxLength = 200
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnClasificacionABC.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductoRow() As sp_consultaProductoRow
            Return CType(Me.NewRow,sp_consultaProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoRowChanged(Me, New sp_consultaProductoRowChangeEvent(CType(e.Row,sp_consultaProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoRowChanging(Me, New sp_consultaProductoRowChangeEvent(CType(e.Row,sp_consultaProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoRowDeleted(Me, New sp_consultaProductoRowChangeEvent(CType(e.Row,sp_consultaProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoRowDeleting(Me, New sp_consultaProductoRowChangeEvent(CType(e.Row,sp_consultaProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductoRow(ByVal row As sp_consultaProductoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaFacturasPagadasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnNControl As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnFechaD As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnDev As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaFacturasPagadas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaFacturasPagadasRow
            Get
                Return CType(Me.Rows(index),sp_consultaFacturasPagadasRow)
            End Get
        End Property
        
        Public Event sp_consultaFacturasPagadasRowChanging As sp_consultaFacturasPagadasRowChangeEventHandler
        
        Public Event sp_consultaFacturasPagadasRowChanged As sp_consultaFacturasPagadasRowChangeEventHandler
        
        Public Event sp_consultaFacturasPagadasRowDeleting As sp_consultaFacturasPagadasRowChangeEventHandler
        
        Public Event sp_consultaFacturasPagadasRowDeleted As sp_consultaFacturasPagadasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaFacturasPagadasRow(ByVal row As sp_consultaFacturasPagadasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaFacturasPagadasRow(ByVal ControlInicio As Decimal, ByVal NControl As String, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal FechaD As Date, ByVal Monto As Double, ByVal Dev As Boolean) As sp_consultaFacturasPagadasRow
            Dim rowsp_consultaFacturasPagadasRow As sp_consultaFacturasPagadasRow = CType(Me.NewRow,sp_consultaFacturasPagadasRow)
            Dim columnValuesArray() As Object = New Object() {ControlInicio, NControl, CodigoCliente, RazonSocial, FechaD, Monto, Dev}
            rowsp_consultaFacturasPagadasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaFacturasPagadasRow)
            Return rowsp_consultaFacturasPagadasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaFacturasPagadasDataTable = CType(MyBase.Clone,sp_consultaFacturasPagadasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaFacturasPagadasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnNControl = MyBase.Columns("NControl")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnFechaD = MyBase.Columns("FechaD")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnDev = MyBase.Columns("Dev")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnNControl = New Global.System.Data.DataColumn("NControl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNControl)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnFechaD = New Global.System.Data.DataColumn("FechaD", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaD)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnDev = New Global.System.Data.DataColumn("Dev", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDev)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoCliente}, false))
            Me.columnNControl.AllowDBNull = false
            Me.columnNControl.MaxLength = 10
            Me.columnCodigoCliente.Unique = true
            Me.columnRazonSocial.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaFacturasPagadasRow() As sp_consultaFacturasPagadasRow
            Return CType(Me.NewRow,sp_consultaFacturasPagadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaFacturasPagadasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaFacturasPagadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaFacturasPagadasRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturasPagadasRowChanged(Me, New sp_consultaFacturasPagadasRowChangeEvent(CType(e.Row,sp_consultaFacturasPagadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaFacturasPagadasRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturasPagadasRowChanging(Me, New sp_consultaFacturasPagadasRowChangeEvent(CType(e.Row,sp_consultaFacturasPagadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaFacturasPagadasRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturasPagadasRowDeleted(Me, New sp_consultaFacturasPagadasRowChangeEvent(CType(e.Row,sp_consultaFacturasPagadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaFacturasPagadasRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturasPagadasRowDeleting(Me, New sp_consultaFacturasPagadasRowChangeEvent(CType(e.Row,sp_consultaFacturasPagadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaFacturasPagadasRow(ByVal row As sp_consultaFacturasPagadasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaFacturasPagadasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaMarcaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMarca As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaMarca"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaMarcaRow
            Get
                Return CType(Me.Rows(index),sp_consultaMarcaRow)
            End Get
        End Property
        
        Public Event sp_consultaMarcaRowChanging As sp_consultaMarcaRowChangeEventHandler
        
        Public Event sp_consultaMarcaRowChanged As sp_consultaMarcaRowChangeEventHandler
        
        Public Event sp_consultaMarcaRowDeleting As sp_consultaMarcaRowChangeEventHandler
        
        Public Event sp_consultaMarcaRowDeleted As sp_consultaMarcaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaMarcaRow(ByVal row As sp_consultaMarcaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaMarcaRow(ByVal Marca As String) As sp_consultaMarcaRow
            Dim rowsp_consultaMarcaRow As sp_consultaMarcaRow = CType(Me.NewRow,sp_consultaMarcaRow)
            Dim columnValuesArray() As Object = New Object() {Marca}
            rowsp_consultaMarcaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaMarcaRow)
            Return rowsp_consultaMarcaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMarca(ByVal Marca As String) As sp_consultaMarcaRow
            Return CType(Me.Rows.Find(New Object() {Marca}),sp_consultaMarcaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaMarcaDataTable = CType(MyBase.Clone,sp_consultaMarcaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaMarcaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMarca = MyBase.Columns("Marca")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMarca}, true))
            Me.columnMarca.AllowDBNull = false
            Me.columnMarca.Unique = true
            Me.columnMarca.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaMarcaRow() As sp_consultaMarcaRow
            Return CType(Me.NewRow,sp_consultaMarcaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaMarcaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaMarcaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaMarcaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaMarcaRowChanged(Me, New sp_consultaMarcaRowChangeEvent(CType(e.Row,sp_consultaMarcaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaMarcaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaMarcaRowChanging(Me, New sp_consultaMarcaRowChangeEvent(CType(e.Row,sp_consultaMarcaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaMarcaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaMarcaRowDeleted(Me, New sp_consultaMarcaRowChangeEvent(CType(e.Row,sp_consultaMarcaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaMarcaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaMarcaRowDeleting(Me, New sp_consultaMarcaRowChangeEvent(CType(e.Row,sp_consultaMarcaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaMarcaRow(ByVal row As sp_consultaMarcaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaMarcaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_producto_pedido_guiaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_producto_pedido_guia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_producto_pedido_guiaRow
            Get
                Return CType(Me.Rows(index),sp_consulta_producto_pedido_guiaRow)
            End Get
        End Property
        
        Public Event sp_consulta_producto_pedido_guiaRowChanging As sp_consulta_producto_pedido_guiaRowChangeEventHandler
        
        Public Event sp_consulta_producto_pedido_guiaRowChanged As sp_consulta_producto_pedido_guiaRowChangeEventHandler
        
        Public Event sp_consulta_producto_pedido_guiaRowDeleting As sp_consulta_producto_pedido_guiaRowChangeEventHandler
        
        Public Event sp_consulta_producto_pedido_guiaRowDeleted As sp_consulta_producto_pedido_guiaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_producto_pedido_guiaRow(ByVal row As sp_consulta_producto_pedido_guiaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_producto_pedido_guiaRow(ByVal Cantidad As Decimal, ByVal CodigoProducto As String, ByVal CodigoProductoF As String, ByVal Nombre As String, ByVal Precio As Double, ByVal Modelo As String) As sp_consulta_producto_pedido_guiaRow
            Dim rowsp_consulta_producto_pedido_guiaRow As sp_consulta_producto_pedido_guiaRow = CType(Me.NewRow,sp_consulta_producto_pedido_guiaRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, CodigoProducto, CodigoProductoF, Nombre, Precio, Modelo}
            rowsp_consulta_producto_pedido_guiaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_producto_pedido_guiaRow)
            Return rowsp_consulta_producto_pedido_guiaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_producto_pedido_guiaDataTable = CType(MyBase.Clone,sp_consulta_producto_pedido_guiaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_producto_pedido_guiaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnModelo = MyBase.Columns("Modelo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidad.ReadOnly = true
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 25
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 50
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnPrecio.ReadOnly = true
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_producto_pedido_guiaRow() As sp_consulta_producto_pedido_guiaRow
            Return CType(Me.NewRow,sp_consulta_producto_pedido_guiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_producto_pedido_guiaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_producto_pedido_guiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_producto_pedido_guiaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_producto_pedido_guiaRowChanged(Me, New sp_consulta_producto_pedido_guiaRowChangeEvent(CType(e.Row,sp_consulta_producto_pedido_guiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_producto_pedido_guiaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_producto_pedido_guiaRowChanging(Me, New sp_consulta_producto_pedido_guiaRowChangeEvent(CType(e.Row,sp_consulta_producto_pedido_guiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_producto_pedido_guiaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_producto_pedido_guiaRowDeleted(Me, New sp_consulta_producto_pedido_guiaRowChangeEvent(CType(e.Row,sp_consulta_producto_pedido_guiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_producto_pedido_guiaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_producto_pedido_guiaRowDeleting(Me, New sp_consulta_producto_pedido_guiaRowChangeEvent(CType(e.Row,sp_consulta_producto_pedido_guiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_producto_pedido_guiaRow(ByVal row As sp_consulta_producto_pedido_guiaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_producto_pedido_guiaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaPreferenciasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoPreferencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaPreferencias"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPreferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPreferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaPreferenciasRow
            Get
                Return CType(Me.Rows(index),sp_consultaPreferenciasRow)
            End Get
        End Property
        
        Public Event sp_consultaPreferenciasRowChanging As sp_consultaPreferenciasRowChangeEventHandler
        
        Public Event sp_consultaPreferenciasRowChanged As sp_consultaPreferenciasRowChangeEventHandler
        
        Public Event sp_consultaPreferenciasRowDeleting As sp_consultaPreferenciasRowChangeEventHandler
        
        Public Event sp_consultaPreferenciasRowDeleted As sp_consultaPreferenciasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaPreferenciasRow(ByVal row As sp_consultaPreferenciasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaPreferenciasRow(ByVal Nombre As String, ByVal CodigoPreferencia As Integer) As sp_consultaPreferenciasRow
            Dim rowsp_consultaPreferenciasRow As sp_consultaPreferenciasRow = CType(Me.NewRow,sp_consultaPreferenciasRow)
            Dim columnValuesArray() As Object = New Object() {Nombre, CodigoPreferencia}
            rowsp_consultaPreferenciasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaPreferenciasRow)
            Return rowsp_consultaPreferenciasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoPreferencia(ByVal CodigoPreferencia As Integer) As sp_consultaPreferenciasRow
            Return CType(Me.Rows.Find(New Object() {CodigoPreferencia}),sp_consultaPreferenciasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaPreferenciasDataTable = CType(MyBase.Clone,sp_consultaPreferenciasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaPreferenciasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoPreferencia = MyBase.Columns("CodigoPreferencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoPreferencia = New Global.System.Data.DataColumn("CodigoPreferencia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPreferencia)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoPreferencia}, true))
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 25
            Me.columnCodigoPreferencia.AllowDBNull = false
            Me.columnCodigoPreferencia.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaPreferenciasRow() As sp_consultaPreferenciasRow
            Return CType(Me.NewRow,sp_consultaPreferenciasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaPreferenciasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaPreferenciasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaPreferenciasRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPreferenciasRowChanged(Me, New sp_consultaPreferenciasRowChangeEvent(CType(e.Row,sp_consultaPreferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaPreferenciasRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPreferenciasRowChanging(Me, New sp_consultaPreferenciasRowChangeEvent(CType(e.Row,sp_consultaPreferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaPreferenciasRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPreferenciasRowDeleted(Me, New sp_consultaPreferenciasRowChangeEvent(CType(e.Row,sp_consultaPreferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaPreferenciasRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPreferenciasRowDeleting(Me, New sp_consultaPreferenciasRowChangeEvent(CType(e.Row,sp_consultaPreferenciasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaPreferenciasRow(ByVal row As sp_consultaPreferenciasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaPreferenciasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_VerTransporteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoTransporte As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_VerTransporte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTransporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTransporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_VerTransporteRow
            Get
                Return CType(Me.Rows(index),sp_VerTransporteRow)
            End Get
        End Property
        
        Public Event sp_VerTransporteRowChanging As sp_VerTransporteRowChangeEventHandler
        
        Public Event sp_VerTransporteRowChanged As sp_VerTransporteRowChangeEventHandler
        
        Public Event sp_VerTransporteRowDeleting As sp_VerTransporteRowChangeEventHandler
        
        Public Event sp_VerTransporteRowDeleted As sp_VerTransporteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_VerTransporteRow(ByVal row As sp_VerTransporteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_VerTransporteRow(ByVal Nombre As String) As sp_VerTransporteRow
            Dim rowsp_VerTransporteRow As sp_VerTransporteRow = CType(Me.NewRow,sp_VerTransporteRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nombre}
            rowsp_VerTransporteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_VerTransporteRow)
            Return rowsp_VerTransporteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoTransporte(ByVal CodigoTransporte As Integer) As sp_VerTransporteRow
            Return CType(Me.Rows.Find(New Object() {CodigoTransporte}),sp_VerTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_VerTransporteDataTable = CType(MyBase.Clone,sp_VerTransporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_VerTransporteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoTransporte = MyBase.Columns("CodigoTransporte")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoTransporte = New Global.System.Data.DataColumn("CodigoTransporte", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTransporte)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoTransporte}, true))
            Me.columnCodigoTransporte.AutoIncrement = true
            Me.columnCodigoTransporte.AutoIncrementSeed = -1
            Me.columnCodigoTransporte.AutoIncrementStep = -1
            Me.columnCodigoTransporte.AllowDBNull = false
            Me.columnCodigoTransporte.ReadOnly = true
            Me.columnCodigoTransporte.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_VerTransporteRow() As sp_VerTransporteRow
            Return CType(Me.NewRow,sp_VerTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_VerTransporteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_VerTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_VerTransporteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_VerTransporteRowChanged(Me, New sp_VerTransporteRowChangeEvent(CType(e.Row,sp_VerTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_VerTransporteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_VerTransporteRowChanging(Me, New sp_VerTransporteRowChangeEvent(CType(e.Row,sp_VerTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_VerTransporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_VerTransporteRowDeleted(Me, New sp_VerTransporteRowChangeEvent(CType(e.Row,sp_VerTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_VerTransporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_VerTransporteRowDeleting(Me, New sp_VerTransporteRowChangeEvent(CType(e.Row,sp_VerTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_VerTransporteRow(ByVal row As sp_VerTransporteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_VerTransporteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaNC_rdlcDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNroControl As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnFechaF As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCodigoNotaCredito As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaNC_rdlc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoNotaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoNotaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaNC_rdlcRow
            Get
                Return CType(Me.Rows(index),sp_consultaNC_rdlcRow)
            End Get
        End Property
        
        Public Event sp_consultaNC_rdlcRowChanging As sp_consultaNC_rdlcRowChangeEventHandler
        
        Public Event sp_consultaNC_rdlcRowChanged As sp_consultaNC_rdlcRowChangeEventHandler
        
        Public Event sp_consultaNC_rdlcRowDeleting As sp_consultaNC_rdlcRowChangeEventHandler
        
        Public Event sp_consultaNC_rdlcRowDeleted As sp_consultaNC_rdlcRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaNC_rdlcRow(ByVal row As sp_consultaNC_rdlcRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaNC_rdlcRow(ByVal NroControl As Integer, ByVal ControlInicio As Decimal, ByVal Fecha As Date, ByVal FechaF As Date, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal Direccion As String, ByVal Rif As String, ByVal Telefono1 As String, ByVal Telefono2 As String, ByVal Monto As Double, ByVal Observacion As String, ByVal Iva As Decimal, ByVal Tipo As Boolean, ByVal MontoTotal As Decimal) As sp_consultaNC_rdlcRow
            Dim rowsp_consultaNC_rdlcRow As sp_consultaNC_rdlcRow = CType(Me.NewRow,sp_consultaNC_rdlcRow)
            Dim columnValuesArray() As Object = New Object() {NroControl, ControlInicio, Fecha, FechaF, CodigoCliente, RazonSocial, Direccion, Rif, Telefono1, Telefono2, Monto, Observacion, Iva, Tipo, Nothing, MontoTotal}
            rowsp_consultaNC_rdlcRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaNC_rdlcRow)
            Return rowsp_consultaNC_rdlcRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoNotaCredito(ByVal CodigoNotaCredito As Integer) As sp_consultaNC_rdlcRow
            Return CType(Me.Rows.Find(New Object() {CodigoNotaCredito}),sp_consultaNC_rdlcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaNC_rdlcDataTable = CType(MyBase.Clone,sp_consultaNC_rdlcDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaNC_rdlcDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNroControl = MyBase.Columns("NroControl")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnFechaF = MyBase.Columns("FechaF")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCodigoNotaCredito = MyBase.Columns("CodigoNotaCredito")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNroControl = New Global.System.Data.DataColumn("NroControl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroControl)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnFechaF = New Global.System.Data.DataColumn("FechaF", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaF)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCodigoNotaCredito = New Global.System.Data.DataColumn("CodigoNotaCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoNotaCredito)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoNotaCredito}, true))
            Me.columnNroControl.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnDireccion.MaxLength = 200
            Me.columnRif.MaxLength = 15
            Me.columnTelefono1.MaxLength = 30
            Me.columnTelefono2.MaxLength = 30
            Me.columnMonto.AllowDBNull = false
            Me.columnObservacion.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnTipo.AllowDBNull = false
            Me.columnCodigoNotaCredito.AutoIncrement = true
            Me.columnCodigoNotaCredito.AutoIncrementSeed = -1
            Me.columnCodigoNotaCredito.AutoIncrementStep = -1
            Me.columnCodigoNotaCredito.AllowDBNull = false
            Me.columnCodigoNotaCredito.ReadOnly = true
            Me.columnCodigoNotaCredito.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaNC_rdlcRow() As sp_consultaNC_rdlcRow
            Return CType(Me.NewRow,sp_consultaNC_rdlcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaNC_rdlcRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaNC_rdlcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaNC_rdlcRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNC_rdlcRowChanged(Me, New sp_consultaNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaNC_rdlcRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNC_rdlcRowChanging(Me, New sp_consultaNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaNC_rdlcRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNC_rdlcRowDeleted(Me, New sp_consultaNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaNC_rdlcRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNC_rdlcRowDeleting(Me, New sp_consultaNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaNC_rdlcRow(ByVal row As sp_consultaNC_rdlcRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaNC_rdlcDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_Listado_ModeloDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnEmpaque As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columncantidadExistencia As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_Listado_Modelo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpaqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpaque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_Listado_ModeloRow
            Get
                Return CType(Me.Rows(index),sp_consulta_Listado_ModeloRow)
            End Get
        End Property
        
        Public Event sp_consulta_Listado_ModeloRowChanging As sp_consulta_Listado_ModeloRowChangeEventHandler
        
        Public Event sp_consulta_Listado_ModeloRowChanged As sp_consulta_Listado_ModeloRowChangeEventHandler
        
        Public Event sp_consulta_Listado_ModeloRowDeleting As sp_consulta_Listado_ModeloRowChangeEventHandler
        
        Public Event sp_consulta_Listado_ModeloRowDeleted As sp_consulta_Listado_ModeloRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_Listado_ModeloRow(ByVal row As sp_consulta_Listado_ModeloRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_Listado_ModeloRow(ByVal CodigoInterno As String, ByVal Empaque As String, ByVal Observacion As String, ByVal Nombre As String, ByVal MarcaProducto As String, ByVal Marca As String, ByVal PrecioVenta As Double, ByVal cantidadExistencia As Decimal, ByVal Modelo As String) As sp_consulta_Listado_ModeloRow
            Dim rowsp_consulta_Listado_ModeloRow As sp_consulta_Listado_ModeloRow = CType(Me.NewRow,sp_consulta_Listado_ModeloRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Empaque, Observacion, Nombre, MarcaProducto, Marca, PrecioVenta, cantidadExistencia, Modelo}
            rowsp_consulta_Listado_ModeloRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_Listado_ModeloRow)
            Return rowsp_consulta_Listado_ModeloRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_Listado_ModeloDataTable = CType(MyBase.Clone,sp_consulta_Listado_ModeloDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_Listado_ModeloDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnEmpaque = MyBase.Columns("Empaque")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columncantidadExistencia = MyBase.Columns("cantidadExistencia")
            Me.columnModelo = MyBase.Columns("Modelo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnEmpaque = New Global.System.Data.DataColumn("Empaque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpaque)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columncantidadExistencia = New Global.System.Data.DataColumn("cantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantidadExistencia)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnEmpaque.MaxLength = 50
            Me.columnObservacion.MaxLength = 50
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnMarcaProducto.MaxLength = 50
            Me.columnMarca.AllowDBNull = false
            Me.columnMarca.MaxLength = 50
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columncantidadExistencia.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 203
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_Listado_ModeloRow() As sp_consulta_Listado_ModeloRow
            Return CType(Me.NewRow,sp_consulta_Listado_ModeloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_Listado_ModeloRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_Listado_ModeloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_Listado_ModeloRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_ModeloRowChanged(Me, New sp_consulta_Listado_ModeloRowChangeEvent(CType(e.Row,sp_consulta_Listado_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_Listado_ModeloRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_ModeloRowChanging(Me, New sp_consulta_Listado_ModeloRowChangeEvent(CType(e.Row,sp_consulta_Listado_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_Listado_ModeloRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_ModeloRowDeleted(Me, New sp_consulta_Listado_ModeloRowChangeEvent(CType(e.Row,sp_consulta_Listado_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_Listado_ModeloRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_ModeloRowDeleting(Me, New sp_consulta_Listado_ModeloRowChangeEvent(CType(e.Row,sp_consulta_Listado_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_Listado_ModeloRow(ByVal row As sp_consulta_Listado_ModeloRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_Listado_ModeloDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_Listado_AlfabeticoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnparaOrdenar As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnmp As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_Listado_Alfabetico"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paraOrdenarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnparaOrdenar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_Listado_AlfabeticoRow
            Get
                Return CType(Me.Rows(index),sp_consulta_Listado_AlfabeticoRow)
            End Get
        End Property
        
        Public Event sp_consulta_Listado_AlfabeticoRowChanging As sp_consulta_Listado_AlfabeticoRowChangeEventHandler
        
        Public Event sp_consulta_Listado_AlfabeticoRowChanged As sp_consulta_Listado_AlfabeticoRowChangeEventHandler
        
        Public Event sp_consulta_Listado_AlfabeticoRowDeleting As sp_consulta_Listado_AlfabeticoRowChangeEventHandler
        
        Public Event sp_consulta_Listado_AlfabeticoRowDeleted As sp_consulta_Listado_AlfabeticoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_Listado_AlfabeticoRow(ByVal row As sp_consulta_Listado_AlfabeticoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_Listado_AlfabeticoRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Modelo As String, ByVal PrecioVenta As Double, ByVal paraOrdenar As String, ByVal MarcaProducto As String, ByVal mp As String, ByVal Marca As String, ByVal CantidadExistencia As Decimal) As sp_consulta_Listado_AlfabeticoRow
            Dim rowsp_consulta_Listado_AlfabeticoRow As sp_consulta_Listado_AlfabeticoRow = CType(Me.NewRow,sp_consulta_Listado_AlfabeticoRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Modelo, PrecioVenta, paraOrdenar, MarcaProducto, mp, Marca, CantidadExistencia}
            rowsp_consulta_Listado_AlfabeticoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_Listado_AlfabeticoRow)
            Return rowsp_consulta_Listado_AlfabeticoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consulta_Listado_AlfabeticoRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consulta_Listado_AlfabeticoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_Listado_AlfabeticoDataTable = CType(MyBase.Clone,sp_consulta_Listado_AlfabeticoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_Listado_AlfabeticoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnparaOrdenar = MyBase.Columns("paraOrdenar")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnmp = MyBase.Columns("mp")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnparaOrdenar = New Global.System.Data.DataColumn("paraOrdenar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnparaOrdenar)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnmp = New Global.System.Data.DataColumn("mp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnparaOrdenar.ReadOnly = true
            Me.columnparaOrdenar.MaxLength = 54
            Me.columnMarcaProducto.MaxLength = 50
            Me.columnmp.MaxLength = 50
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnCantidadExistencia.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_Listado_AlfabeticoRow() As sp_consulta_Listado_AlfabeticoRow
            Return CType(Me.NewRow,sp_consulta_Listado_AlfabeticoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_Listado_AlfabeticoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_Listado_AlfabeticoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_Listado_AlfabeticoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_AlfabeticoRowChanged(Me, New sp_consulta_Listado_AlfabeticoRowChangeEvent(CType(e.Row,sp_consulta_Listado_AlfabeticoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_Listado_AlfabeticoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_AlfabeticoRowChanging(Me, New sp_consulta_Listado_AlfabeticoRowChangeEvent(CType(e.Row,sp_consulta_Listado_AlfabeticoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_Listado_AlfabeticoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_AlfabeticoRowDeleted(Me, New sp_consulta_Listado_AlfabeticoRowChangeEvent(CType(e.Row,sp_consulta_Listado_AlfabeticoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_Listado_AlfabeticoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Listado_AlfabeticoRowDeleting(Me, New sp_consulta_Listado_AlfabeticoRowChangeEvent(CType(e.Row,sp_consulta_Listado_AlfabeticoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_Listado_AlfabeticoRow(ByVal row As sp_consulta_Listado_AlfabeticoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_Listado_AlfabeticoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaFacturaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnFacturador As Global.System.Data.DataColumn
        
        Private columnNumeroBultos As Global.System.Data.DataColumn
        
        Private columnMontoCancelado As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnDiasCred As Global.System.Data.DataColumn
        
        Private columnCodigoPedido As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnEnviado As Global.System.Data.DataColumn
        
        Private columnEntregada As Global.System.Data.DataColumn
        
        Private columnObservacionPedido As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaFactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroBultosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroBultos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoCanceladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoCancelado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasCred
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnviadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnviado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntregadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntregada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacionPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaFacturaRow
            Get
                Return CType(Me.Rows(index),sp_consultaFacturaRow)
            End Get
        End Property
        
        Public Event sp_consultaFacturaRowChanging As sp_consultaFacturaRowChangeEventHandler
        
        Public Event sp_consultaFacturaRowChanged As sp_consultaFacturaRowChangeEventHandler
        
        Public Event sp_consultaFacturaRowDeleting As sp_consultaFacturaRowChangeEventHandler
        
        Public Event sp_consultaFacturaRowDeleted As sp_consultaFacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaFacturaRow(ByVal row As sp_consultaFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaFacturaRow(ByVal Fecha As Date, ByVal ControlInicio As Decimal, ByVal Facturador As String, ByVal NumeroBultos As String, ByVal MontoCancelado As Decimal, ByVal MontoTotal As Decimal, ByVal Observacion As String, ByVal DiasCred As Integer, ByVal CodigoPedido As Integer, ByVal Iva As Decimal, ByVal Enviado As Boolean, ByVal Entregada As Boolean, ByVal ObservacionPedido As String, ByVal Vendedor As Integer) As sp_consultaFacturaRow
            Dim rowsp_consultaFacturaRow As sp_consultaFacturaRow = CType(Me.NewRow,sp_consultaFacturaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha, ControlInicio, Facturador, NumeroBultos, MontoCancelado, MontoTotal, Observacion, DiasCred, CodigoPedido, Iva, Enviado, Entregada, ObservacionPedido, Vendedor}
            rowsp_consultaFacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaFacturaRow)
            Return rowsp_consultaFacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNumeroFactura(ByVal NumeroFactura As Integer) As sp_consultaFacturaRow
            Return CType(Me.Rows.Find(New Object() {NumeroFactura}),sp_consultaFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaFacturaDataTable = CType(MyBase.Clone,sp_consultaFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaFacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnFacturador = MyBase.Columns("Facturador")
            Me.columnNumeroBultos = MyBase.Columns("NumeroBultos")
            Me.columnMontoCancelado = MyBase.Columns("MontoCancelado")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnDiasCred = MyBase.Columns("DiasCred")
            Me.columnCodigoPedido = MyBase.Columns("CodigoPedido")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnEnviado = MyBase.Columns("Enviado")
            Me.columnEntregada = MyBase.Columns("Entregada")
            Me.columnObservacionPedido = MyBase.Columns("ObservacionPedido")
            Me.columnVendedor = MyBase.Columns("Vendedor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnFacturador = New Global.System.Data.DataColumn("Facturador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturador)
            Me.columnNumeroBultos = New Global.System.Data.DataColumn("NumeroBultos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroBultos)
            Me.columnMontoCancelado = New Global.System.Data.DataColumn("MontoCancelado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoCancelado)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnDiasCred = New Global.System.Data.DataColumn("DiasCred", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCred)
            Me.columnCodigoPedido = New Global.System.Data.DataColumn("CodigoPedido", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPedido)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnEnviado = New Global.System.Data.DataColumn("Enviado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnviado)
            Me.columnEntregada = New Global.System.Data.DataColumn("Entregada", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntregada)
            Me.columnObservacionPedido = New Global.System.Data.DataColumn("ObservacionPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacionPedido)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNumeroFactura}, true))
            Me.columnNumeroFactura.AutoIncrement = true
            Me.columnNumeroFactura.AutoIncrementSeed = -1
            Me.columnNumeroFactura.AutoIncrementStep = -1
            Me.columnNumeroFactura.AllowDBNull = false
            Me.columnNumeroFactura.ReadOnly = true
            Me.columnNumeroFactura.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnControlInicio.AllowDBNull = false
            Me.columnFacturador.AllowDBNull = false
            Me.columnFacturador.MaxLength = 20
            Me.columnNumeroBultos.MaxLength = 100
            Me.columnMontoCancelado.AllowDBNull = false
            Me.columnMontoTotal.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnCodigoPedido.AllowDBNull = false
            Me.columnIva.AllowDBNull = false
            Me.columnObservacionPedido.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaFacturaRow() As sp_consultaFacturaRow
            Return CType(Me.NewRow,sp_consultaFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaFacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturaRowChanged(Me, New sp_consultaFacturaRowChangeEvent(CType(e.Row,sp_consultaFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturaRowChanging(Me, New sp_consultaFacturaRowChangeEvent(CType(e.Row,sp_consultaFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturaRowDeleted(Me, New sp_consultaFacturaRowChangeEvent(CType(e.Row,sp_consultaFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFacturaRowDeleting(Me, New sp_consultaFacturaRowChangeEvent(CType(e.Row,sp_consultaFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaFacturaRow(ByVal row As sp_consultaFacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaFacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaPedido_Producto_ClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnChequeado As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaPedido_Producto_Cliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChequeadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChequeado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaPedido_Producto_ClienteRow
            Get
                Return CType(Me.Rows(index),sp_consultaPedido_Producto_ClienteRow)
            End Get
        End Property
        
        Public Event sp_consultaPedido_Producto_ClienteRowChanging As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        Public Event sp_consultaPedido_Producto_ClienteRowChanged As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        Public Event sp_consultaPedido_Producto_ClienteRowDeleting As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        Public Event sp_consultaPedido_Producto_ClienteRowDeleted As sp_consultaPedido_Producto_ClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaPedido_Producto_ClienteRow(ByVal row As sp_consultaPedido_Producto_ClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaPedido_Producto_ClienteRow(ByVal Cantidad As Decimal, ByVal CodigoProducto As String, ByVal CodigoProductoF As String, ByVal Nombre As String, ByVal Precio As Double, ByVal CantidadExistencia As Decimal, ByVal Modelo As String, ByVal CodigoTramo As Integer, ByVal Ubicacion As String, ByVal RazonSocial As String, ByVal Chequeado As Boolean, ByVal Observacion As String, ByVal Codigo As Integer) As sp_consultaPedido_Producto_ClienteRow
            Dim rowsp_consultaPedido_Producto_ClienteRow As sp_consultaPedido_Producto_ClienteRow = CType(Me.NewRow,sp_consultaPedido_Producto_ClienteRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, CodigoProducto, CodigoProductoF, Nombre, Precio, CantidadExistencia, Modelo, CodigoTramo, Ubicacion, RazonSocial, Chequeado, Observacion, Codigo}
            rowsp_consultaPedido_Producto_ClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaPedido_Producto_ClienteRow)
            Return rowsp_consultaPedido_Producto_ClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaPedido_Producto_ClienteDataTable = CType(MyBase.Clone,sp_consultaPedido_Producto_ClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaPedido_Producto_ClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnChequeado = MyBase.Columns("Chequeado")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigo = MyBase.Columns("Codigo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnChequeado = New Global.System.Data.DataColumn("Chequeado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChequeado)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCantidad.AllowDBNull = false
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 25
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 50
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 101
            Me.columnPrecio.AllowDBNull = false
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 50
            Me.columnCodigoTramo.AllowDBNull = false
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 83
            Me.columnRazonSocial.MaxLength = 100
            Me.columnObservacion.MaxLength = 250
            Me.columnCodigo.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaPedido_Producto_ClienteRow() As sp_consultaPedido_Producto_ClienteRow
            Return CType(Me.NewRow,sp_consultaPedido_Producto_ClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaPedido_Producto_ClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaPedido_Producto_ClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowChanged(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowChanging(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowDeleted(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaPedido_Producto_ClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedido_Producto_ClienteRowDeleting(Me, New sp_consultaPedido_Producto_ClienteRowChangeEvent(CType(e.Row,sp_consultaPedido_Producto_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaPedido_Producto_ClienteRow(ByVal row As sp_consultaPedido_Producto_ClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaPedido_Producto_ClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_prefacturaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_prefactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_prefacturaRow
            Get
                Return CType(Me.Rows(index),sp_prefacturaRow)
            End Get
        End Property
        
        Public Event sp_prefacturaRowChanging As sp_prefacturaRowChangeEventHandler
        
        Public Event sp_prefacturaRowChanged As sp_prefacturaRowChangeEventHandler
        
        Public Event sp_prefacturaRowDeleting As sp_prefacturaRowChangeEventHandler
        
        Public Event sp_prefacturaRowDeleted As sp_prefacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_prefacturaRow(ByVal row As sp_prefacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_prefacturaRow(ByVal CodigoProducto As String, ByVal Nombre As String, ByVal Modelo As String, ByVal Cantidad As Decimal, ByVal Precio As Double, ByVal Subtotal As Double) As sp_prefacturaRow
            Dim rowsp_prefacturaRow As sp_prefacturaRow = CType(Me.NewRow,sp_prefacturaRow)
            Dim columnValuesArray() As Object = New Object() {CodigoProducto, Nombre, Modelo, Cantidad, Precio, Subtotal}
            rowsp_prefacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_prefacturaRow)
            Return rowsp_prefacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_prefacturaDataTable = CType(MyBase.Clone,sp_prefacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_prefacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 50
            Me.columnCantidad.ReadOnly = true
            Me.columnPrecio.ReadOnly = true
            Me.columnSubtotal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_prefacturaRow() As sp_prefacturaRow
            Return CType(Me.NewRow,sp_prefacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_prefacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_prefacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_prefacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_prefacturaRowChanged(Me, New sp_prefacturaRowChangeEvent(CType(e.Row,sp_prefacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_prefacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_prefacturaRowChanging(Me, New sp_prefacturaRowChangeEvent(CType(e.Row,sp_prefacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_prefacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_prefacturaRowDeleted(Me, New sp_prefacturaRowChangeEvent(CType(e.Row,sp_prefacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_prefacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_prefacturaRowDeleting(Me, New sp_prefacturaRowChangeEvent(CType(e.Row,sp_prefacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_prefacturaRow(ByVal row As sp_prefacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_prefacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_R_traspasosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncodproducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnUbicacionant As Global.System.Data.DataColumn
        
        Private columnUbicacionact As Global.System.Data.DataColumn
        
        Private columncant As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_R_traspasos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codproductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodproducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacionant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacionact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_R_traspasosRow
            Get
                Return CType(Me.Rows(index),sp_R_traspasosRow)
            End Get
        End Property
        
        Public Event sp_R_traspasosRowChanging As sp_R_traspasosRowChangeEventHandler
        
        Public Event sp_R_traspasosRowChanged As sp_R_traspasosRowChangeEventHandler
        
        Public Event sp_R_traspasosRowDeleting As sp_R_traspasosRowChangeEventHandler
        
        Public Event sp_R_traspasosRowDeleted As sp_R_traspasosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_R_traspasosRow(ByVal row As sp_R_traspasosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_R_traspasosRow(ByVal codproducto As String, ByVal Nombre As String, ByVal Ubicacionant As String, ByVal Ubicacionact As String, ByVal cant As Integer, ByVal Modelo As String, ByVal CodigoFabrica As String) As sp_R_traspasosRow
            Dim rowsp_R_traspasosRow As sp_R_traspasosRow = CType(Me.NewRow,sp_R_traspasosRow)
            Dim columnValuesArray() As Object = New Object() {codproducto, Nombre, Ubicacionant, Ubicacionact, cant, Modelo, CodigoFabrica}
            rowsp_R_traspasosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_R_traspasosRow)
            Return rowsp_R_traspasosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_R_traspasosDataTable = CType(MyBase.Clone,sp_R_traspasosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_R_traspasosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodproducto = MyBase.Columns("codproducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnUbicacionant = MyBase.Columns("Ubicacionant")
            Me.columnUbicacionact = MyBase.Columns("Ubicacionact")
            Me.columncant = MyBase.Columns("cant")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodproducto = New Global.System.Data.DataColumn("codproducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodproducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnUbicacionant = New Global.System.Data.DataColumn("Ubicacionant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacionant)
            Me.columnUbicacionact = New Global.System.Data.DataColumn("Ubicacionact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacionact)
            Me.columncant = New Global.System.Data.DataColumn("cant", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncant)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columncodproducto.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnUbicacionant.ReadOnly = true
            Me.columnUbicacionant.MaxLength = 83
            Me.columnUbicacionact.ReadOnly = true
            Me.columnUbicacionact.MaxLength = 83
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 254
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_R_traspasosRow() As sp_R_traspasosRow
            Return CType(Me.NewRow,sp_R_traspasosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_R_traspasosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_R_traspasosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_R_traspasosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_R_traspasosRowChanged(Me, New sp_R_traspasosRowChangeEvent(CType(e.Row,sp_R_traspasosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_R_traspasosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_R_traspasosRowChanging(Me, New sp_R_traspasosRowChangeEvent(CType(e.Row,sp_R_traspasosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_R_traspasosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_R_traspasosRowDeleted(Me, New sp_R_traspasosRowChangeEvent(CType(e.Row,sp_R_traspasosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_R_traspasosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_R_traspasosRowDeleting(Me, New sp_R_traspasosRowChangeEvent(CType(e.Row,sp_R_traspasosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_R_traspasosRow(ByVal row As sp_R_traspasosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_R_traspasosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaproductosNC_rdlcDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDev As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaproductosNC_rdlc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaproductosNC_rdlcRow
            Get
                Return CType(Me.Rows(index),sp_consultaproductosNC_rdlcRow)
            End Get
        End Property
        
        Public Event sp_consultaproductosNC_rdlcRowChanging As sp_consultaproductosNC_rdlcRowChangeEventHandler
        
        Public Event sp_consultaproductosNC_rdlcRowChanged As sp_consultaproductosNC_rdlcRowChangeEventHandler
        
        Public Event sp_consultaproductosNC_rdlcRowDeleting As sp_consultaproductosNC_rdlcRowChangeEventHandler
        
        Public Event sp_consultaproductosNC_rdlcRowDeleted As sp_consultaproductosNC_rdlcRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaproductosNC_rdlcRow(ByVal row As sp_consultaproductosNC_rdlcRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaproductosNC_rdlcRow(ByVal Dev As Decimal, ByVal Cantidad As Decimal, ByVal CodigoProducto As String, ByVal Nombre As String, ByVal Precio As Double, ByVal Modelo As String) As sp_consultaproductosNC_rdlcRow
            Dim rowsp_consultaproductosNC_rdlcRow As sp_consultaproductosNC_rdlcRow = CType(Me.NewRow,sp_consultaproductosNC_rdlcRow)
            Dim columnValuesArray() As Object = New Object() {Dev, Cantidad, CodigoProducto, Nombre, Precio, Modelo}
            rowsp_consultaproductosNC_rdlcRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaproductosNC_rdlcRow)
            Return rowsp_consultaproductosNC_rdlcRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaproductosNC_rdlcDataTable = CType(MyBase.Clone,sp_consultaproductosNC_rdlcDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaproductosNC_rdlcDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDev = MyBase.Columns("Dev")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnModelo = MyBase.Columns("Modelo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDev = New Global.System.Data.DataColumn("Dev", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDev)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnDev.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaproductosNC_rdlcRow() As sp_consultaproductosNC_rdlcRow
            Return CType(Me.NewRow,sp_consultaproductosNC_rdlcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaproductosNC_rdlcRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaproductosNC_rdlcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaproductosNC_rdlcRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaproductosNC_rdlcRowChanged(Me, New sp_consultaproductosNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaproductosNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaproductosNC_rdlcRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaproductosNC_rdlcRowChanging(Me, New sp_consultaproductosNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaproductosNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaproductosNC_rdlcRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaproductosNC_rdlcRowDeleted(Me, New sp_consultaproductosNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaproductosNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaproductosNC_rdlcRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaproductosNC_rdlcRowDeleting(Me, New sp_consultaproductosNC_rdlcRowChangeEvent(CType(e.Row,sp_consultaproductosNC_rdlcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaproductosNC_rdlcRow(ByVal row As sp_consultaproductosNC_rdlcRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaproductosNC_rdlcDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosVariacionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnCostoPromedio As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnPrecioNuevo As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnGrupo As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosVariacion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoPromedioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoPromedio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioNuevoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioNuevo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosVariacionRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosVariacionRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosVariacionRowChanging As sp_consultaProductosVariacionRowChangeEventHandler
        
        Public Event sp_consultaProductosVariacionRowChanged As sp_consultaProductosVariacionRowChangeEventHandler
        
        Public Event sp_consultaProductosVariacionRowDeleting As sp_consultaProductosVariacionRowChangeEventHandler
        
        Public Event sp_consultaProductosVariacionRowDeleted As sp_consultaProductosVariacionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosVariacionRow(ByVal row As sp_consultaProductosVariacionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosVariacionRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Modelo As String, ByVal CantidadExistencia As Decimal, ByVal CostoPromedio As Double, ByVal PrecioVenta As Double, ByVal PrecioNuevo As Integer, ByVal Marca As String, ByVal Grupo As String, ByVal Proveedor As String) As sp_consultaProductosVariacionRow
            Dim rowsp_consultaProductosVariacionRow As sp_consultaProductosVariacionRow = CType(Me.NewRow,sp_consultaProductosVariacionRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Modelo, CantidadExistencia, CostoPromedio, PrecioVenta, PrecioNuevo, Marca, Grupo, Proveedor}
            rowsp_consultaProductosVariacionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosVariacionRow)
            Return rowsp_consultaProductosVariacionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductosVariacionRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductosVariacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosVariacionDataTable = CType(MyBase.Clone,sp_consultaProductosVariacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosVariacionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnCostoPromedio = MyBase.Columns("CostoPromedio")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnPrecioNuevo = MyBase.Columns("PrecioNuevo")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnGrupo = MyBase.Columns("Grupo")
            Me.columnProveedor = MyBase.Columns("Proveedor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnCostoPromedio = New Global.System.Data.DataColumn("CostoPromedio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoPromedio)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnPrecioNuevo = New Global.System.Data.DataColumn("PrecioNuevo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioNuevo)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnGrupo = New Global.System.Data.DataColumn("Grupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupo)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnPrecioNuevo.ReadOnly = true
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnGrupo.ReadOnly = true
            Me.columnGrupo.MaxLength = 500
            Me.columnProveedor.ReadOnly = true
            Me.columnProveedor.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosVariacionRow() As sp_consultaProductosVariacionRow
            Return CType(Me.NewRow,sp_consultaProductosVariacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosVariacionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosVariacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosVariacionRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosVariacionRowChanged(Me, New sp_consultaProductosVariacionRowChangeEvent(CType(e.Row,sp_consultaProductosVariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosVariacionRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosVariacionRowChanging(Me, New sp_consultaProductosVariacionRowChangeEvent(CType(e.Row,sp_consultaProductosVariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosVariacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosVariacionRowDeleted(Me, New sp_consultaProductosVariacionRowChangeEvent(CType(e.Row,sp_consultaProductosVariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosVariacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosVariacionRowDeleting(Me, New sp_consultaProductosVariacionRowChangeEvent(CType(e.Row,sp_consultaProductosVariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosVariacionRow(ByVal row As sp_consultaProductosVariacionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosVariacionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_ConsultaClienteFacturaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnControl As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_ConsultaClienteFactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_ConsultaClienteFacturaRow
            Get
                Return CType(Me.Rows(index),sp_ConsultaClienteFacturaRow)
            End Get
        End Property
        
        Public Event sp_ConsultaClienteFacturaRowChanging As sp_ConsultaClienteFacturaRowChangeEventHandler
        
        Public Event sp_ConsultaClienteFacturaRowChanged As sp_ConsultaClienteFacturaRowChangeEventHandler
        
        Public Event sp_ConsultaClienteFacturaRowDeleting As sp_ConsultaClienteFacturaRowChangeEventHandler
        
        Public Event sp_ConsultaClienteFacturaRowDeleted As sp_ConsultaClienteFacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_ConsultaClienteFacturaRow(ByVal row As sp_ConsultaClienteFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_ConsultaClienteFacturaRow(ByVal NumeroFactura As Integer, ByVal ControlInicio As Decimal, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal Estado As String, ByVal Control As String) As sp_ConsultaClienteFacturaRow
            Dim rowsp_ConsultaClienteFacturaRow As sp_ConsultaClienteFacturaRow = CType(Me.NewRow,sp_ConsultaClienteFacturaRow)
            Dim columnValuesArray() As Object = New Object() {NumeroFactura, ControlInicio, CodigoCliente, RazonSocial, Estado, Control}
            rowsp_ConsultaClienteFacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_ConsultaClienteFacturaRow)
            Return rowsp_ConsultaClienteFacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNumeroFacturaCodigoCliente(ByVal NumeroFactura As Integer, ByVal CodigoCliente As Integer) As sp_ConsultaClienteFacturaRow
            Return CType(Me.Rows.Find(New Object() {NumeroFactura, CodigoCliente}),sp_ConsultaClienteFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_ConsultaClienteFacturaDataTable = CType(MyBase.Clone,sp_ConsultaClienteFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_ConsultaClienteFacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnControl = MyBase.Columns("Control")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnControl = New Global.System.Data.DataColumn("Control", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControl)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNumeroFactura, Me.columnCodigoCliente}, true))
            Me.columnNumeroFactura.AllowDBNull = false
            Me.columnControlInicio.AllowDBNull = false
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnEstado.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_ConsultaClienteFacturaRow() As sp_ConsultaClienteFacturaRow
            Return CType(Me.NewRow,sp_ConsultaClienteFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_ConsultaClienteFacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_ConsultaClienteFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_ConsultaClienteFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaClienteFacturaRowChanged(Me, New sp_ConsultaClienteFacturaRowChangeEvent(CType(e.Row,sp_ConsultaClienteFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_ConsultaClienteFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaClienteFacturaRowChanging(Me, New sp_ConsultaClienteFacturaRowChangeEvent(CType(e.Row,sp_ConsultaClienteFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_ConsultaClienteFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaClienteFacturaRowDeleted(Me, New sp_ConsultaClienteFacturaRowChangeEvent(CType(e.Row,sp_ConsultaClienteFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_ConsultaClienteFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaClienteFacturaRowDeleting(Me, New sp_ConsultaClienteFacturaRowChangeEvent(CType(e.Row,sp_ConsultaClienteFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_ConsultaClienteFacturaRow(ByVal row As sp_ConsultaClienteFacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_ConsultaClienteFacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductoGranSelect2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductoGranSelect2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductoGranSelect2Row
            Get
                Return CType(Me.Rows(index),sp_consultaProductoGranSelect2Row)
            End Get
        End Property
        
        Public Event sp_consultaProductoGranSelect2RowChanging As sp_consultaProductoGranSelect2RowChangeEventHandler
        
        Public Event sp_consultaProductoGranSelect2RowChanged As sp_consultaProductoGranSelect2RowChangeEventHandler
        
        Public Event sp_consultaProductoGranSelect2RowDeleting As sp_consultaProductoGranSelect2RowChangeEventHandler
        
        Public Event sp_consultaProductoGranSelect2RowDeleted As sp_consultaProductoGranSelect2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductoGranSelect2Row(ByVal row As sp_consultaProductoGranSelect2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductoGranSelect2Row(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal Modelo As String, ByVal Ubicacion As String, ByVal CodigoTramo As Integer) As sp_consultaProductoGranSelect2Row
            Dim rowsp_consultaProductoGranSelect2Row As sp_consultaProductoGranSelect2Row = CType(Me.NewRow,sp_consultaProductoGranSelect2Row)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CantidadExistencia, PrecioVenta, Modelo, Ubicacion, CodigoTramo}
            rowsp_consultaProductoGranSelect2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductoGranSelect2Row)
            Return rowsp_consultaProductoGranSelect2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductoGranSelect2Row
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductoGranSelect2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductoGranSelect2DataTable = CType(MyBase.Clone,sp_consultaProductoGranSelect2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductoGranSelect2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 101
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 254
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 83
            Me.columnCodigoTramo.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductoGranSelect2Row() As sp_consultaProductoGranSelect2Row
            Return CType(Me.NewRow,sp_consultaProductoGranSelect2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductoGranSelect2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductoGranSelect2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductoGranSelect2RowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoGranSelect2RowChanged(Me, New sp_consultaProductoGranSelect2RowChangeEvent(CType(e.Row,sp_consultaProductoGranSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductoGranSelect2RowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoGranSelect2RowChanging(Me, New sp_consultaProductoGranSelect2RowChangeEvent(CType(e.Row,sp_consultaProductoGranSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductoGranSelect2RowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoGranSelect2RowDeleted(Me, New sp_consultaProductoGranSelect2RowChangeEvent(CType(e.Row,sp_consultaProductoGranSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductoGranSelect2RowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoGranSelect2RowDeleting(Me, New sp_consultaProductoGranSelect2RowChangeEvent(CType(e.Row,sp_consultaProductoGranSelect2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductoGranSelect2Row(ByVal row As sp_consultaProductoGranSelect2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductoGranSelect2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_lvAjustesPorNCDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoAjuste As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnCodigoNota As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnControlNota As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_lvAjustesPorNC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAjusteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAjuste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_lvAjustesPorNCRow
            Get
                Return CType(Me.Rows(index),sp_lvAjustesPorNCRow)
            End Get
        End Property
        
        Public Event sp_lvAjustesPorNCRowChanging As sp_lvAjustesPorNCRowChangeEventHandler
        
        Public Event sp_lvAjustesPorNCRowChanged As sp_lvAjustesPorNCRowChangeEventHandler
        
        Public Event sp_lvAjustesPorNCRowDeleting As sp_lvAjustesPorNCRowChangeEventHandler
        
        Public Event sp_lvAjustesPorNCRowDeleted As sp_lvAjustesPorNCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_lvAjustesPorNCRow(ByVal row As sp_lvAjustesPorNCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_lvAjustesPorNCRow(ByVal CodigoAjuste As String, ByVal Usuario As String, ByVal Fecha As Date, ByVal Observacion As String, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal CodigoNota As Integer, ByVal ControlInicio As String, ByVal ControlNota As String) As sp_lvAjustesPorNCRow
            Dim rowsp_lvAjustesPorNCRow As sp_lvAjustesPorNCRow = CType(Me.NewRow,sp_lvAjustesPorNCRow)
            Dim columnValuesArray() As Object = New Object() {CodigoAjuste, Usuario, Fecha, Observacion, CodigoCliente, RazonSocial, CodigoNota, ControlInicio, ControlNota}
            rowsp_lvAjustesPorNCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_lvAjustesPorNCRow)
            Return rowsp_lvAjustesPorNCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_lvAjustesPorNCDataTable = CType(MyBase.Clone,sp_lvAjustesPorNCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_lvAjustesPorNCDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoAjuste = MyBase.Columns("CodigoAjuste")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnCodigoNota = MyBase.Columns("CodigoNota")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnControlNota = MyBase.Columns("ControlNota")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoAjuste = New Global.System.Data.DataColumn("CodigoAjuste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAjuste)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnCodigoNota = New Global.System.Data.DataColumn("CodigoNota", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoNota)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnControlNota = New Global.System.Data.DataColumn("ControlNota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlNota)
            Me.columnCodigoAjuste.AutoIncrementSeed = -1
            Me.columnCodigoAjuste.AutoIncrementStep = -1
            Me.columnCodigoAjuste.AllowDBNull = false
            Me.columnCodigoAjuste.ReadOnly = true
            Me.columnUsuario.AllowDBNull = false
            Me.columnUsuario.MaxLength = 100
            Me.columnFecha.AllowDBNull = false
            Me.columnObservacion.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnCodigoNota.AllowDBNull = false
            Me.columnControlInicio.AllowDBNull = false
            Me.columnControlNota.ReadOnly = true
            Me.columnControlNota.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_lvAjustesPorNCRow() As sp_lvAjustesPorNCRow
            Return CType(Me.NewRow,sp_lvAjustesPorNCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_lvAjustesPorNCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_lvAjustesPorNCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_lvAjustesPorNCRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesPorNCRowChanged(Me, New sp_lvAjustesPorNCRowChangeEvent(CType(e.Row,sp_lvAjustesPorNCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_lvAjustesPorNCRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesPorNCRowChanging(Me, New sp_lvAjustesPorNCRowChangeEvent(CType(e.Row,sp_lvAjustesPorNCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_lvAjustesPorNCRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesPorNCRowDeleted(Me, New sp_lvAjustesPorNCRowChangeEvent(CType(e.Row,sp_lvAjustesPorNCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_lvAjustesPorNCRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesPorNCRowDeleting(Me, New sp_lvAjustesPorNCRowChangeEvent(CType(e.Row,sp_lvAjustesPorNCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_lvAjustesPorNCRow(ByVal row As sp_lvAjustesPorNCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_lvAjustesPorNCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaNotaCreditoNoAjustadaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNroControl As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCodigoNotaCredito As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnNroControl2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaNotaCreditoNoAjustada"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoNotaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoNotaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroControl2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroControl2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaNotaCreditoNoAjustadaRow
            Get
                Return CType(Me.Rows(index),sp_consultaNotaCreditoNoAjustadaRow)
            End Get
        End Property
        
        Public Event sp_consultaNotaCreditoNoAjustadaRowChanging As sp_consultaNotaCreditoNoAjustadaRowChangeEventHandler
        
        Public Event sp_consultaNotaCreditoNoAjustadaRowChanged As sp_consultaNotaCreditoNoAjustadaRowChangeEventHandler
        
        Public Event sp_consultaNotaCreditoNoAjustadaRowDeleting As sp_consultaNotaCreditoNoAjustadaRowChangeEventHandler
        
        Public Event sp_consultaNotaCreditoNoAjustadaRowDeleted As sp_consultaNotaCreditoNoAjustadaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaNotaCreditoNoAjustadaRow(ByVal row As sp_consultaNotaCreditoNoAjustadaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaNotaCreditoNoAjustadaRow(ByVal NroControl As Integer, ByVal ControlInicio As String, ByVal Fecha As Date, ByVal RazonSocial As String, ByVal Monto As Double, ByVal Observacion As String, ByVal Iva As Decimal, ByVal Tipo As Boolean, ByVal MontoTotal As Decimal, ByVal CodigoCliente As Integer, ByVal NroControl2 As String) As sp_consultaNotaCreditoNoAjustadaRow
            Dim rowsp_consultaNotaCreditoNoAjustadaRow As sp_consultaNotaCreditoNoAjustadaRow = CType(Me.NewRow,sp_consultaNotaCreditoNoAjustadaRow)
            Dim columnValuesArray() As Object = New Object() {NroControl, ControlInicio, Fecha, RazonSocial, Monto, Observacion, Iva, Tipo, Nothing, MontoTotal, CodigoCliente, NroControl2}
            rowsp_consultaNotaCreditoNoAjustadaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaNotaCreditoNoAjustadaRow)
            Return rowsp_consultaNotaCreditoNoAjustadaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaNotaCreditoNoAjustadaDataTable = CType(MyBase.Clone,sp_consultaNotaCreditoNoAjustadaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaNotaCreditoNoAjustadaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNroControl = MyBase.Columns("NroControl")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCodigoNotaCredito = MyBase.Columns("CodigoNotaCredito")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnNroControl2 = MyBase.Columns("NroControl2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNroControl = New Global.System.Data.DataColumn("NroControl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroControl)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCodigoNotaCredito = New Global.System.Data.DataColumn("CodigoNotaCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoNotaCredito)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnNroControl2 = New Global.System.Data.DataColumn("NroControl2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroControl2)
            Me.columnNroControl.AllowDBNull = false
            Me.columnControlInicio.ReadOnly = true
            Me.columnControlInicio.MaxLength = 15
            Me.columnFecha.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnObservacion.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnIva.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCodigoNotaCredito.AutoIncrement = true
            Me.columnCodigoNotaCredito.AutoIncrementSeed = -1
            Me.columnCodigoNotaCredito.AutoIncrementStep = -1
            Me.columnCodigoNotaCredito.AllowDBNull = false
            Me.columnCodigoNotaCredito.ReadOnly = true
            Me.columnMontoTotal.AllowDBNull = false
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnNroControl2.ReadOnly = true
            Me.columnNroControl2.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaNotaCreditoNoAjustadaRow() As sp_consultaNotaCreditoNoAjustadaRow
            Return CType(Me.NewRow,sp_consultaNotaCreditoNoAjustadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaNotaCreditoNoAjustadaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaNotaCreditoNoAjustadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaNotaCreditoNoAjustadaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotaCreditoNoAjustadaRowChanged(Me, New sp_consultaNotaCreditoNoAjustadaRowChangeEvent(CType(e.Row,sp_consultaNotaCreditoNoAjustadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaNotaCreditoNoAjustadaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotaCreditoNoAjustadaRowChanging(Me, New sp_consultaNotaCreditoNoAjustadaRowChangeEvent(CType(e.Row,sp_consultaNotaCreditoNoAjustadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaNotaCreditoNoAjustadaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotaCreditoNoAjustadaRowDeleted(Me, New sp_consultaNotaCreditoNoAjustadaRowChangeEvent(CType(e.Row,sp_consultaNotaCreditoNoAjustadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaNotaCreditoNoAjustadaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotaCreditoNoAjustadaRowDeleting(Me, New sp_consultaNotaCreditoNoAjustadaRowChangeEvent(CType(e.Row,sp_consultaNotaCreditoNoAjustadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaNotaCreditoNoAjustadaRow(ByVal row As sp_consultaNotaCreditoNoAjustadaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaNotaCreditoNoAjustadaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosParaPedidoCompraDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCant2 As Global.System.Data.DataColumn
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnVariante1 As Global.System.Data.DataColumn
        
        Private columnVariante2 As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnOEM As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnCodigoF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosParaPedidoCompra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cant2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Variante1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVariante1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Variante2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVariante2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosParaPedidoCompraRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosParaPedidoCompraRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosParaPedidoCompraRowChanging As sp_consultaProductosParaPedidoCompraRowChangeEventHandler
        
        Public Event sp_consultaProductosParaPedidoCompraRowChanged As sp_consultaProductosParaPedidoCompraRowChangeEventHandler
        
        Public Event sp_consultaProductosParaPedidoCompraRowDeleting As sp_consultaProductosParaPedidoCompraRowChangeEventHandler
        
        Public Event sp_consultaProductosParaPedidoCompraRowDeleted As sp_consultaProductosParaPedidoCompraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosParaPedidoCompraRow(ByVal row As sp_consultaProductosParaPedidoCompraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosParaPedidoCompraRow(ByVal Cant2 As String, ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Variante1 As String, ByVal Variante2 As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal Modelo As String, ByVal Marca As String, ByVal OEM As String, ByVal CodigoProductoF As String, ByVal Proveedor As String, ByVal CodigoF As String) As sp_consultaProductosParaPedidoCompraRow
            Dim rowsp_consultaProductosParaPedidoCompraRow As sp_consultaProductosParaPedidoCompraRow = CType(Me.NewRow,sp_consultaProductosParaPedidoCompraRow)
            Dim columnValuesArray() As Object = New Object() {Cant2, CodigoInterno, Nombre, Variante1, Variante2, CantidadExistencia, PrecioVenta, Modelo, Marca, OEM, CodigoProductoF, Proveedor, CodigoF}
            rowsp_consultaProductosParaPedidoCompraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosParaPedidoCompraRow)
            Return rowsp_consultaProductosParaPedidoCompraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductosParaPedidoCompraRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductosParaPedidoCompraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosParaPedidoCompraDataTable = CType(MyBase.Clone,sp_consultaProductosParaPedidoCompraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosParaPedidoCompraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCant2 = MyBase.Columns("Cant2")
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnVariante1 = MyBase.Columns("Variante1")
            Me.columnVariante2 = MyBase.Columns("Variante2")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnOEM = MyBase.Columns("OEM")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnCodigoF = MyBase.Columns("CodigoF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCant2 = New Global.System.Data.DataColumn("Cant2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant2)
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnVariante1 = New Global.System.Data.DataColumn("Variante1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVariante1)
            Me.columnVariante2 = New Global.System.Data.DataColumn("Variante2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVariante2)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnOEM = New Global.System.Data.DataColumn("OEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOEM)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnCodigoF = New Global.System.Data.DataColumn("CodigoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCant2.MaxLength = 10
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 101
            Me.columnVariante1.MaxLength = 30
            Me.columnVariante2.MaxLength = 30
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnOEM.MaxLength = 30
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 500
            Me.columnProveedor.ReadOnly = true
            Me.columnProveedor.MaxLength = 500
            Me.columnCodigoF.ReadOnly = true
            Me.columnCodigoF.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosParaPedidoCompraRow() As sp_consultaProductosParaPedidoCompraRow
            Return CType(Me.NewRow,sp_consultaProductosParaPedidoCompraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosParaPedidoCompraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosParaPedidoCompraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosParaPedidoCompraRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaPedidoCompraRowChanged(Me, New sp_consultaProductosParaPedidoCompraRowChangeEvent(CType(e.Row,sp_consultaProductosParaPedidoCompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosParaPedidoCompraRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaPedidoCompraRowChanging(Me, New sp_consultaProductosParaPedidoCompraRowChangeEvent(CType(e.Row,sp_consultaProductosParaPedidoCompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosParaPedidoCompraRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaPedidoCompraRowDeleted(Me, New sp_consultaProductosParaPedidoCompraRowChangeEvent(CType(e.Row,sp_consultaProductosParaPedidoCompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosParaPedidoCompraRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaPedidoCompraRowDeleting(Me, New sp_consultaProductosParaPedidoCompraRowChangeEvent(CType(e.Row,sp_consultaProductosParaPedidoCompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosParaPedidoCompraRow(ByVal row As sp_consultaProductosParaPedidoCompraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosParaPedidoCompraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosGruposDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCHK As Global.System.Data.DataColumn
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnGrupos As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosGrupos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GruposColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosGruposRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosGruposRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosGruposRowChanging As sp_consultaProductosGruposRowChangeEventHandler
        
        Public Event sp_consultaProductosGruposRowChanged As sp_consultaProductosGruposRowChangeEventHandler
        
        Public Event sp_consultaProductosGruposRowDeleting As sp_consultaProductosGruposRowChangeEventHandler
        
        Public Event sp_consultaProductosGruposRowDeleted As sp_consultaProductosGruposRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosGruposRow(ByVal row As sp_consultaProductosGruposRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosGruposRow(ByVal CHK As Integer, ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Modelo As String, ByVal PrecioVenta As Double, ByVal CantidadExistencia As String, ByVal Grupos As String, ByVal Marca As String) As sp_consultaProductosGruposRow
            Dim rowsp_consultaProductosGruposRow As sp_consultaProductosGruposRow = CType(Me.NewRow,sp_consultaProductosGruposRow)
            Dim columnValuesArray() As Object = New Object() {CHK, CodigoInterno, Nombre, Modelo, PrecioVenta, CantidadExistencia, Grupos, Marca}
            rowsp_consultaProductosGruposRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosGruposRow)
            Return rowsp_consultaProductosGruposRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductosGruposRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductosGruposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosGruposDataTable = CType(MyBase.Clone,sp_consultaProductosGruposDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosGruposDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCHK = MyBase.Columns("CHK")
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnGrupos = MyBase.Columns("Grupos")
            Me.columnMarca = MyBase.Columns("Marca")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCHK = New Global.System.Data.DataColumn("CHK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHK)
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnGrupos = New Global.System.Data.DataColumn("Grupos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupos)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnCantidadExistencia.MaxLength = 5
            Me.columnGrupos.ReadOnly = true
            Me.columnGrupos.MaxLength = 500
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosGruposRow() As sp_consultaProductosGruposRow
            Return CType(Me.NewRow,sp_consultaProductosGruposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosGruposRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosGruposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosGruposRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosGruposRowChanged(Me, New sp_consultaProductosGruposRowChangeEvent(CType(e.Row,sp_consultaProductosGruposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosGruposRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosGruposRowChanging(Me, New sp_consultaProductosGruposRowChangeEvent(CType(e.Row,sp_consultaProductosGruposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosGruposRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosGruposRowDeleted(Me, New sp_consultaProductosGruposRowChangeEvent(CType(e.Row,sp_consultaProductosGruposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosGruposRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosGruposRowDeleting(Me, New sp_consultaProductosGruposRowChangeEvent(CType(e.Row,sp_consultaProductosGruposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosGruposRow(ByVal row As sp_consultaProductosGruposRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosGruposDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosCodArancelariosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCHK As Global.System.Data.DataColumn
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnCodigoArancelario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosCodArancelarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoArancelarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoArancelario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosCodArancelariosRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosCodArancelariosRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosCodArancelariosRowChanging As sp_consultaProductosCodArancelariosRowChangeEventHandler
        
        Public Event sp_consultaProductosCodArancelariosRowChanged As sp_consultaProductosCodArancelariosRowChangeEventHandler
        
        Public Event sp_consultaProductosCodArancelariosRowDeleting As sp_consultaProductosCodArancelariosRowChangeEventHandler
        
        Public Event sp_consultaProductosCodArancelariosRowDeleted As sp_consultaProductosCodArancelariosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosCodArancelariosRow(ByVal row As sp_consultaProductosCodArancelariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosCodArancelariosRow(ByVal CHK As Integer, ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Modelo As String, ByVal Marca As String, ByVal CodigoArancelario As String) As sp_consultaProductosCodArancelariosRow
            Dim rowsp_consultaProductosCodArancelariosRow As sp_consultaProductosCodArancelariosRow = CType(Me.NewRow,sp_consultaProductosCodArancelariosRow)
            Dim columnValuesArray() As Object = New Object() {CHK, CodigoInterno, Nombre, Modelo, Marca, CodigoArancelario}
            rowsp_consultaProductosCodArancelariosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosCodArancelariosRow)
            Return rowsp_consultaProductosCodArancelariosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductosCodArancelariosRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductosCodArancelariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosCodArancelariosDataTable = CType(MyBase.Clone,sp_consultaProductosCodArancelariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosCodArancelariosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCHK = MyBase.Columns("CHK")
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnCodigoArancelario = MyBase.Columns("CodigoArancelario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCHK = New Global.System.Data.DataColumn("CHK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHK)
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnCodigoArancelario = New Global.System.Data.DataColumn("CodigoArancelario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoArancelario)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.ReadOnly = true
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnCodigoArancelario.ReadOnly = true
            Me.columnCodigoArancelario.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosCodArancelariosRow() As sp_consultaProductosCodArancelariosRow
            Return CType(Me.NewRow,sp_consultaProductosCodArancelariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosCodArancelariosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosCodArancelariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosCodArancelariosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosCodArancelariosRowChanged(Me, New sp_consultaProductosCodArancelariosRowChangeEvent(CType(e.Row,sp_consultaProductosCodArancelariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosCodArancelariosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosCodArancelariosRowChanging(Me, New sp_consultaProductosCodArancelariosRowChangeEvent(CType(e.Row,sp_consultaProductosCodArancelariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosCodArancelariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosCodArancelariosRowDeleted(Me, New sp_consultaProductosCodArancelariosRowChangeEvent(CType(e.Row,sp_consultaProductosCodArancelariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosCodArancelariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosCodArancelariosRowDeleting(Me, New sp_consultaProductosCodArancelariosRowChangeEvent(CType(e.Row,sp_consultaProductosCodArancelariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosCodArancelariosRow(ByVal row As sp_consultaProductosCodArancelariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosCodArancelariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaCatalogo2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnCostoPromedio As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCatalogo2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoPromedioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoPromedio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaCatalogo2Row
            Get
                Return CType(Me.Rows(index),sp_consultaCatalogo2Row)
            End Get
        End Property
        
        Public Event sp_consultaCatalogo2RowChanging As sp_consultaCatalogo2RowChangeEventHandler
        
        Public Event sp_consultaCatalogo2RowChanged As sp_consultaCatalogo2RowChangeEventHandler
        
        Public Event sp_consultaCatalogo2RowDeleting As sp_consultaCatalogo2RowChangeEventHandler
        
        Public Event sp_consultaCatalogo2RowDeleted As sp_consultaCatalogo2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaCatalogo2Row(ByVal row As sp_consultaCatalogo2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaCatalogo2Row(ByVal Modelo As String, ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal CostoPromedio As Double, ByVal Marca As String) As sp_consultaCatalogo2Row
            Dim rowsp_consultaCatalogo2Row As sp_consultaCatalogo2Row = CType(Me.NewRow,sp_consultaCatalogo2Row)
            Dim columnValuesArray() As Object = New Object() {Modelo, CodigoInterno, Nombre, CantidadExistencia, PrecioVenta, CostoPromedio, Marca}
            rowsp_consultaCatalogo2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaCatalogo2Row)
            Return rowsp_consultaCatalogo2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaCatalogo2Row
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaCatalogo2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaCatalogo2DataTable = CType(MyBase.Clone,sp_consultaCatalogo2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaCatalogo2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnCostoPromedio = MyBase.Columns("CostoPromedio")
            Me.columnMarca = MyBase.Columns("Marca")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnCostoPromedio = New Global.System.Data.DataColumn("CostoPromedio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoPromedio)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaCatalogo2Row() As sp_consultaCatalogo2Row
            Return CType(Me.NewRow,sp_consultaCatalogo2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaCatalogo2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaCatalogo2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaCatalogo2RowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogo2RowChanged(Me, New sp_consultaCatalogo2RowChangeEvent(CType(e.Row,sp_consultaCatalogo2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaCatalogo2RowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogo2RowChanging(Me, New sp_consultaCatalogo2RowChangeEvent(CType(e.Row,sp_consultaCatalogo2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaCatalogo2RowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogo2RowDeleted(Me, New sp_consultaCatalogo2RowChangeEvent(CType(e.Row,sp_consultaCatalogo2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaCatalogo2RowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogo2RowDeleting(Me, New sp_consultaCatalogo2RowChangeEvent(CType(e.Row,sp_consultaCatalogo2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaCatalogo2Row(ByVal row As sp_consultaCatalogo2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaCatalogo2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosEvaluacionDSSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosEvaluacionDSS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosEvaluacionDSSRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosEvaluacionDSSRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosEvaluacionDSSRowChanging As sp_consultaProductosEvaluacionDSSRowChangeEventHandler
        
        Public Event sp_consultaProductosEvaluacionDSSRowChanged As sp_consultaProductosEvaluacionDSSRowChangeEventHandler
        
        Public Event sp_consultaProductosEvaluacionDSSRowDeleting As sp_consultaProductosEvaluacionDSSRowChangeEventHandler
        
        Public Event sp_consultaProductosEvaluacionDSSRowDeleted As sp_consultaProductosEvaluacionDSSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosEvaluacionDSSRow(ByVal row As sp_consultaProductosEvaluacionDSSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosEvaluacionDSSRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Modelo As String, ByVal CantidadExistencia As Decimal, ByVal CodigoFabrica As String) As sp_consultaProductosEvaluacionDSSRow
            Dim rowsp_consultaProductosEvaluacionDSSRow As sp_consultaProductosEvaluacionDSSRow = CType(Me.NewRow,sp_consultaProductosEvaluacionDSSRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Modelo, CantidadExistencia, CodigoFabrica}
            rowsp_consultaProductosEvaluacionDSSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosEvaluacionDSSRow)
            Return rowsp_consultaProductosEvaluacionDSSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductosEvaluacionDSSRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductosEvaluacionDSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosEvaluacionDSSDataTable = CType(MyBase.Clone,sp_consultaProductosEvaluacionDSSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosEvaluacionDSSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosEvaluacionDSSRow() As sp_consultaProductosEvaluacionDSSRow
            Return CType(Me.NewRow,sp_consultaProductosEvaluacionDSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosEvaluacionDSSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosEvaluacionDSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosEvaluacionDSSRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosEvaluacionDSSRowChanged(Me, New sp_consultaProductosEvaluacionDSSRowChangeEvent(CType(e.Row,sp_consultaProductosEvaluacionDSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosEvaluacionDSSRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosEvaluacionDSSRowChanging(Me, New sp_consultaProductosEvaluacionDSSRowChangeEvent(CType(e.Row,sp_consultaProductosEvaluacionDSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosEvaluacionDSSRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosEvaluacionDSSRowDeleted(Me, New sp_consultaProductosEvaluacionDSSRowChangeEvent(CType(e.Row,sp_consultaProductosEvaluacionDSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosEvaluacionDSSRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosEvaluacionDSSRowDeleting(Me, New sp_consultaProductosEvaluacionDSSRowChangeEvent(CType(e.Row,sp_consultaProductosEvaluacionDSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosEvaluacionDSSRow(ByVal row As sp_consultaProductosEvaluacionDSSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosEvaluacionDSSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_analisisCobranzasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columncontrol As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnmontoTotal As Global.System.Data.DataColumn
        
        Private columnDiasCred As Global.System.Data.DataColumn
        
        Private columnVencimiento As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnMontoPendiente As Global.System.Data.DataColumn
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_analisisCobranzas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property controlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontrol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasCred
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VencimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVencimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoPendienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoPendiente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_analisisCobranzasRow
            Get
                Return CType(Me.Rows(index),sp_analisisCobranzasRow)
            End Get
        End Property
        
        Public Event sp_analisisCobranzasRowChanging As sp_analisisCobranzasRowChangeEventHandler
        
        Public Event sp_analisisCobranzasRowChanged As sp_analisisCobranzasRowChangeEventHandler
        
        Public Event sp_analisisCobranzasRowDeleting As sp_analisisCobranzasRowChangeEventHandler
        
        Public Event sp_analisisCobranzasRowDeleted As sp_analisisCobranzasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_analisisCobranzasRow(ByVal row As sp_analisisCobranzasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_analisisCobranzasRow(ByVal fecha As Date, ByVal control As Decimal, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal montoTotal As Decimal, ByVal DiasCred As Integer, ByVal Vencimiento As Date, ByVal Dias As Integer, ByVal MontoPendiente As Decimal, ByVal NumeroFactura As Integer, ByVal Iva As Decimal, ByVal Vendedor As Integer) As sp_analisisCobranzasRow
            Dim rowsp_analisisCobranzasRow As sp_analisisCobranzasRow = CType(Me.NewRow,sp_analisisCobranzasRow)
            Dim columnValuesArray() As Object = New Object() {fecha, control, CodigoCliente, RazonSocial, montoTotal, DiasCred, Vencimiento, Dias, MontoPendiente, NumeroFactura, Iva, Vendedor}
            rowsp_analisisCobranzasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_analisisCobranzasRow)
            Return rowsp_analisisCobranzasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_analisisCobranzasDataTable = CType(MyBase.Clone,sp_analisisCobranzasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_analisisCobranzasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columncontrol = MyBase.Columns("control")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnmontoTotal = MyBase.Columns("montoTotal")
            Me.columnDiasCred = MyBase.Columns("DiasCred")
            Me.columnVencimiento = MyBase.Columns("Vencimiento")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnMontoPendiente = MyBase.Columns("MontoPendiente")
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnVendedor = MyBase.Columns("Vendedor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columncontrol = New Global.System.Data.DataColumn("control", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontrol)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnmontoTotal = New Global.System.Data.DataColumn("montoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoTotal)
            Me.columnDiasCred = New Global.System.Data.DataColumn("DiasCred", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCred)
            Me.columnVencimiento = New Global.System.Data.DataColumn("Vencimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVencimiento)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnMontoPendiente = New Global.System.Data.DataColumn("MontoPendiente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoPendiente)
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnfecha.AllowDBNull = false
            Me.columncontrol.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnmontoTotal.ReadOnly = true
            Me.columnVencimiento.ReadOnly = true
            Me.columnDias.ReadOnly = true
            Me.columnMontoPendiente.ReadOnly = true
            Me.columnNumeroFactura.AllowDBNull = false
            Me.columnIva.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_analisisCobranzasRow() As sp_analisisCobranzasRow
            Return CType(Me.NewRow,sp_analisisCobranzasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_analisisCobranzasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_analisisCobranzasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_analisisCobranzasRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_analisisCobranzasRowChanged(Me, New sp_analisisCobranzasRowChangeEvent(CType(e.Row,sp_analisisCobranzasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_analisisCobranzasRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_analisisCobranzasRowChanging(Me, New sp_analisisCobranzasRowChangeEvent(CType(e.Row,sp_analisisCobranzasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_analisisCobranzasRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_analisisCobranzasRowDeleted(Me, New sp_analisisCobranzasRowChangeEvent(CType(e.Row,sp_analisisCobranzasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_analisisCobranzasRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_analisisCobranzasRowDeleting(Me, New sp_analisisCobranzasRowChangeEvent(CType(e.Row,sp_analisisCobranzasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_analisisCobranzasRow(ByVal row As sp_analisisCobranzasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_analisisCobranzasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaAjustesSaldosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumeroAjuste As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaAjustesSaldos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroAjusteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroAjuste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaAjustesSaldosRow
            Get
                Return CType(Me.Rows(index),sp_consultaAjustesSaldosRow)
            End Get
        End Property
        
        Public Event sp_consultaAjustesSaldosRowChanging As sp_consultaAjustesSaldosRowChangeEventHandler
        
        Public Event sp_consultaAjustesSaldosRowChanged As sp_consultaAjustesSaldosRowChangeEventHandler
        
        Public Event sp_consultaAjustesSaldosRowDeleting As sp_consultaAjustesSaldosRowChangeEventHandler
        
        Public Event sp_consultaAjustesSaldosRowDeleted As sp_consultaAjustesSaldosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaAjustesSaldosRow(ByVal row As sp_consultaAjustesSaldosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaAjustesSaldosRow(ByVal NumeroAjuste As String, ByVal Fecha As Date, ByVal NumeroFactura As String, ByVal Cliente As String, ByVal Monto As Double, ByVal ControlInicio As String) As sp_consultaAjustesSaldosRow
            Dim rowsp_consultaAjustesSaldosRow As sp_consultaAjustesSaldosRow = CType(Me.NewRow,sp_consultaAjustesSaldosRow)
            Dim columnValuesArray() As Object = New Object() {NumeroAjuste, Fecha, NumeroFactura, Cliente, Monto, ControlInicio}
            rowsp_consultaAjustesSaldosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaAjustesSaldosRow)
            Return rowsp_consultaAjustesSaldosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaAjustesSaldosDataTable = CType(MyBase.Clone,sp_consultaAjustesSaldosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaAjustesSaldosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroAjuste = MyBase.Columns("NumeroAjuste")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroAjuste = New Global.System.Data.DataColumn("NumeroAjuste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroAjuste)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnNumeroAjuste.ReadOnly = true
            Me.columnNumeroAjuste.MaxLength = 15
            Me.columnFecha.AllowDBNull = false
            Me.columnNumeroFactura.ReadOnly = true
            Me.columnNumeroFactura.MaxLength = 15
            Me.columnCliente.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnControlInicio.ReadOnly = true
            Me.columnControlInicio.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaAjustesSaldosRow() As sp_consultaAjustesSaldosRow
            Return CType(Me.NewRow,sp_consultaAjustesSaldosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaAjustesSaldosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaAjustesSaldosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaAjustesSaldosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaAjustesSaldosRowChanged(Me, New sp_consultaAjustesSaldosRowChangeEvent(CType(e.Row,sp_consultaAjustesSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaAjustesSaldosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaAjustesSaldosRowChanging(Me, New sp_consultaAjustesSaldosRowChangeEvent(CType(e.Row,sp_consultaAjustesSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaAjustesSaldosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaAjustesSaldosRowDeleted(Me, New sp_consultaAjustesSaldosRowChangeEvent(CType(e.Row,sp_consultaAjustesSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaAjustesSaldosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaAjustesSaldosRowDeleting(Me, New sp_consultaAjustesSaldosRowChangeEvent(CType(e.Row,sp_consultaAjustesSaldosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaAjustesSaldosRow(ByVal row As sp_consultaAjustesSaldosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaAjustesSaldosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaFactNoAjustadasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFact As Global.System.Data.DataColumn
        
        Private columnCtrl As Global.System.Data.DataColumn
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnMontoPendiente As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnCodCliente As Global.System.Data.DataColumn
        
        Private columnpte As Global.System.Data.DataColumn
        
        Private columnRecibos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaFactNoAjustadas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CtrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCtrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoPendienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoPendiente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecibosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecibos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaFactNoAjustadasRow
            Get
                Return CType(Me.Rows(index),sp_consultaFactNoAjustadasRow)
            End Get
        End Property
        
        Public Event sp_consultaFactNoAjustadasRowChanging As sp_consultaFactNoAjustadasRowChangeEventHandler
        
        Public Event sp_consultaFactNoAjustadasRowChanged As sp_consultaFactNoAjustadasRowChangeEventHandler
        
        Public Event sp_consultaFactNoAjustadasRowDeleting As sp_consultaFactNoAjustadasRowChangeEventHandler
        
        Public Event sp_consultaFactNoAjustadasRowDeleted As sp_consultaFactNoAjustadasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaFactNoAjustadasRow(ByVal row As sp_consultaFactNoAjustadasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaFactNoAjustadasRow(ByVal Fact As String, ByVal Ctrl As String, ByVal fecha As Date, ByVal Cliente As String, ByVal MontoPendiente As Decimal, ByVal Iva As Decimal, ByVal CodCliente As Integer, ByVal pte As Decimal, ByVal Recibos As String) As sp_consultaFactNoAjustadasRow
            Dim rowsp_consultaFactNoAjustadasRow As sp_consultaFactNoAjustadasRow = CType(Me.NewRow,sp_consultaFactNoAjustadasRow)
            Dim columnValuesArray() As Object = New Object() {Fact, Ctrl, fecha, Cliente, MontoPendiente, Iva, CodCliente, pte, Recibos}
            rowsp_consultaFactNoAjustadasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaFactNoAjustadasRow)
            Return rowsp_consultaFactNoAjustadasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaFactNoAjustadasDataTable = CType(MyBase.Clone,sp_consultaFactNoAjustadasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaFactNoAjustadasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFact = MyBase.Columns("Fact")
            Me.columnCtrl = MyBase.Columns("Ctrl")
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnMontoPendiente = MyBase.Columns("MontoPendiente")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnpte = MyBase.Columns("pte")
            Me.columnRecibos = MyBase.Columns("Recibos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFact = New Global.System.Data.DataColumn("Fact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact)
            Me.columnCtrl = New Global.System.Data.DataColumn("Ctrl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCtrl)
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnMontoPendiente = New Global.System.Data.DataColumn("MontoPendiente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoPendiente)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnCodCliente = New Global.System.Data.DataColumn("CodCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnpte = New Global.System.Data.DataColumn("pte", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpte)
            Me.columnRecibos = New Global.System.Data.DataColumn("Recibos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecibos)
            Me.columnFact.ReadOnly = true
            Me.columnFact.MaxLength = 15
            Me.columnCtrl.ReadOnly = true
            Me.columnCtrl.MaxLength = 15
            Me.columnfecha.AllowDBNull = false
            Me.columnCliente.MaxLength = 100
            Me.columnMontoPendiente.ReadOnly = true
            Me.columnIva.AllowDBNull = false
            Me.columnpte.ReadOnly = true
            Me.columnRecibos.ReadOnly = true
            Me.columnRecibos.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaFactNoAjustadasRow() As sp_consultaFactNoAjustadasRow
            Return CType(Me.NewRow,sp_consultaFactNoAjustadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaFactNoAjustadasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaFactNoAjustadasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaFactNoAjustadasRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactNoAjustadasRowChanged(Me, New sp_consultaFactNoAjustadasRowChangeEvent(CType(e.Row,sp_consultaFactNoAjustadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaFactNoAjustadasRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactNoAjustadasRowChanging(Me, New sp_consultaFactNoAjustadasRowChangeEvent(CType(e.Row,sp_consultaFactNoAjustadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaFactNoAjustadasRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactNoAjustadasRowDeleted(Me, New sp_consultaFactNoAjustadasRowChangeEvent(CType(e.Row,sp_consultaFactNoAjustadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaFactNoAjustadasRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactNoAjustadasRowDeleting(Me, New sp_consultaFactNoAjustadasRowChangeEvent(CType(e.Row,sp_consultaFactNoAjustadasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaFactNoAjustadasRow(ByVal row As sp_consultaFactNoAjustadasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaFactNoAjustadasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_lvAjustesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoAjuste As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_lvAjustes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAjusteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAjuste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_lvAjustesRow
            Get
                Return CType(Me.Rows(index),sp_lvAjustesRow)
            End Get
        End Property
        
        Public Event sp_lvAjustesRowChanging As sp_lvAjustesRowChangeEventHandler
        
        Public Event sp_lvAjustesRowChanged As sp_lvAjustesRowChangeEventHandler
        
        Public Event sp_lvAjustesRowDeleting As sp_lvAjustesRowChangeEventHandler
        
        Public Event sp_lvAjustesRowDeleted As sp_lvAjustesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_lvAjustesRow(ByVal row As sp_lvAjustesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_lvAjustesRow(ByVal CodigoAjuste As String, ByVal Fecha As Date, ByVal Usuario As String, ByVal Descripcion As String) As sp_lvAjustesRow
            Dim rowsp_lvAjustesRow As sp_lvAjustesRow = CType(Me.NewRow,sp_lvAjustesRow)
            Dim columnValuesArray() As Object = New Object() {CodigoAjuste, Fecha, Usuario, Descripcion}
            rowsp_lvAjustesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_lvAjustesRow)
            Return rowsp_lvAjustesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_lvAjustesDataTable = CType(MyBase.Clone,sp_lvAjustesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_lvAjustesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoAjuste = MyBase.Columns("CodigoAjuste")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoAjuste = New Global.System.Data.DataColumn("CodigoAjuste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAjuste)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCodigoAjuste.ReadOnly = true
            Me.columnCodigoAjuste.MaxLength = 15
            Me.columnFecha.AllowDBNull = false
            Me.columnUsuario.MaxLength = 25
            Me.columnDescripcion.AllowDBNull = false
            Me.columnDescripcion.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_lvAjustesRow() As sp_lvAjustesRow
            Return CType(Me.NewRow,sp_lvAjustesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_lvAjustesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_lvAjustesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_lvAjustesRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesRowChanged(Me, New sp_lvAjustesRowChangeEvent(CType(e.Row,sp_lvAjustesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_lvAjustesRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesRowChanging(Me, New sp_lvAjustesRowChangeEvent(CType(e.Row,sp_lvAjustesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_lvAjustesRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesRowDeleted(Me, New sp_lvAjustesRowChangeEvent(CType(e.Row,sp_lvAjustesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_lvAjustesRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_lvAjustesRowDeleting(Me, New sp_lvAjustesRowChangeEvent(CType(e.Row,sp_lvAjustesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_lvAjustesRow(ByVal row As sp_lvAjustesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_lvAjustesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_ConsultaProductosAjusteInvDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnExist As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columncuartoId As Global.System.Data.DataColumn
        
        Private columnalmacenId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_ConsultaProductosAjusteInv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExist
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuartoIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncuartoId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property almacenIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalmacenId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_ConsultaProductosAjusteInvRow
            Get
                Return CType(Me.Rows(index),sp_ConsultaProductosAjusteInvRow)
            End Get
        End Property
        
        Public Event sp_ConsultaProductosAjusteInvRowChanging As sp_ConsultaProductosAjusteInvRowChangeEventHandler
        
        Public Event sp_ConsultaProductosAjusteInvRowChanged As sp_ConsultaProductosAjusteInvRowChangeEventHandler
        
        Public Event sp_ConsultaProductosAjusteInvRowDeleting As sp_ConsultaProductosAjusteInvRowChangeEventHandler
        
        Public Event sp_ConsultaProductosAjusteInvRowDeleted As sp_ConsultaProductosAjusteInvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_ConsultaProductosAjusteInvRow(ByVal row As sp_ConsultaProductosAjusteInvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_ConsultaProductosAjusteInvRow(ByVal Cantidad As String, ByVal Observacion As String, ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Exist As Integer, ByVal Modelo As String, ByVal Ubicacion As String, ByVal CodigoTramo As Integer, ByVal PrecioVenta As Double, ByVal CodigoProductoF As String) As sp_ConsultaProductosAjusteInvRow
            Dim rowsp_ConsultaProductosAjusteInvRow As sp_ConsultaProductosAjusteInvRow = CType(Me.NewRow,sp_ConsultaProductosAjusteInvRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, Observacion, CodigoInterno, Nombre, Exist, Modelo, Ubicacion, CodigoTramo, PrecioVenta, CodigoProductoF, Nothing, Nothing}
            rowsp_ConsultaProductosAjusteInvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_ConsultaProductosAjusteInvRow)
            Return rowsp_ConsultaProductosAjusteInvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_ConsultaProductosAjusteInvDataTable = CType(MyBase.Clone,sp_ConsultaProductosAjusteInvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_ConsultaProductosAjusteInvDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnExist = MyBase.Columns("Exist")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columncuartoId = MyBase.Columns("cuartoId")
            Me.columnalmacenId = MyBase.Columns("almacenId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnExist = New Global.System.Data.DataColumn("Exist", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExist)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columncuartoId = New Global.System.Data.DataColumn("cuartoId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuartoId)
            Me.columnalmacenId = New Global.System.Data.DataColumn("almacenId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalmacenId)
            Me.columnCantidad.MaxLength = 1
            Me.columnObservacion.MaxLength = 1
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.ReadOnly = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnUbicacion.MaxLength = 83
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnPrecioVenta.ReadOnly = true
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 500
            Me.columncuartoId.AutoIncrement = true
            Me.columncuartoId.AutoIncrementSeed = -1
            Me.columncuartoId.AutoIncrementStep = -1
            Me.columnalmacenId.AutoIncrement = true
            Me.columnalmacenId.AutoIncrementSeed = -1
            Me.columnalmacenId.AutoIncrementStep = -1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_ConsultaProductosAjusteInvRow() As sp_ConsultaProductosAjusteInvRow
            Return CType(Me.NewRow,sp_ConsultaProductosAjusteInvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_ConsultaProductosAjusteInvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_ConsultaProductosAjusteInvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_ConsultaProductosAjusteInvRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosAjusteInvRowChanged(Me, New sp_ConsultaProductosAjusteInvRowChangeEvent(CType(e.Row,sp_ConsultaProductosAjusteInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_ConsultaProductosAjusteInvRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosAjusteInvRowChanging(Me, New sp_ConsultaProductosAjusteInvRowChangeEvent(CType(e.Row,sp_ConsultaProductosAjusteInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_ConsultaProductosAjusteInvRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosAjusteInvRowDeleted(Me, New sp_ConsultaProductosAjusteInvRowChangeEvent(CType(e.Row,sp_ConsultaProductosAjusteInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_ConsultaProductosAjusteInvRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosAjusteInvRowDeleting(Me, New sp_ConsultaProductosAjusteInvRowChangeEvent(CType(e.Row,sp_ConsultaProductosAjusteInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_ConsultaProductosAjusteInvRow(ByVal row As sp_ConsultaProductosAjusteInvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_ConsultaProductosAjusteInvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaCodigosInternosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnnombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCodigosInternos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaCodigosInternosRow
            Get
                Return CType(Me.Rows(index),sp_consultaCodigosInternosRow)
            End Get
        End Property
        
        Public Event sp_consultaCodigosInternosRowChanging As sp_consultaCodigosInternosRowChangeEventHandler
        
        Public Event sp_consultaCodigosInternosRowChanged As sp_consultaCodigosInternosRowChangeEventHandler
        
        Public Event sp_consultaCodigosInternosRowDeleting As sp_consultaCodigosInternosRowChangeEventHandler
        
        Public Event sp_consultaCodigosInternosRowDeleted As sp_consultaCodigosInternosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaCodigosInternosRow(ByVal row As sp_consultaCodigosInternosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaCodigosInternosRow(ByVal nombre As String) As sp_consultaCodigosInternosRow
            Dim rowsp_consultaCodigosInternosRow As sp_consultaCodigosInternosRow = CType(Me.NewRow,sp_consultaCodigosInternosRow)
            Dim columnValuesArray() As Object = New Object() {nombre}
            rowsp_consultaCodigosInternosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaCodigosInternosRow)
            Return rowsp_consultaCodigosInternosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaCodigosInternosDataTable = CType(MyBase.Clone,sp_consultaCodigosInternosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaCodigosInternosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnombre = MyBase.Columns("nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaCodigosInternosRow() As sp_consultaCodigosInternosRow
            Return CType(Me.NewRow,sp_consultaCodigosInternosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaCodigosInternosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaCodigosInternosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaCodigosInternosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigosInternosRowChanged(Me, New sp_consultaCodigosInternosRowChangeEvent(CType(e.Row,sp_consultaCodigosInternosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaCodigosInternosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigosInternosRowChanging(Me, New sp_consultaCodigosInternosRowChangeEvent(CType(e.Row,sp_consultaCodigosInternosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaCodigosInternosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigosInternosRowDeleted(Me, New sp_consultaCodigosInternosRowChangeEvent(CType(e.Row,sp_consultaCodigosInternosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaCodigosInternosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigosInternosRowDeleting(Me, New sp_consultaCodigosInternosRowChangeEvent(CType(e.Row,sp_consultaCodigosInternosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaCodigosInternosRow(ByVal row As sp_consultaCodigosInternosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaCodigosInternosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_Productos_PedidoClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnModelo2 As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_Productos_PedidoCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Modelo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_Productos_PedidoClienteRow
            Get
                Return CType(Me.Rows(index),sp_consulta_Productos_PedidoClienteRow)
            End Get
        End Property
        
        Public Event sp_consulta_Productos_PedidoClienteRowChanging As sp_consulta_Productos_PedidoClienteRowChangeEventHandler
        
        Public Event sp_consulta_Productos_PedidoClienteRowChanged As sp_consulta_Productos_PedidoClienteRowChangeEventHandler
        
        Public Event sp_consulta_Productos_PedidoClienteRowDeleting As sp_consulta_Productos_PedidoClienteRowChangeEventHandler
        
        Public Event sp_consulta_Productos_PedidoClienteRowDeleted As sp_consulta_Productos_PedidoClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_Productos_PedidoClienteRow(ByVal row As sp_consulta_Productos_PedidoClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_Productos_PedidoClienteRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CantidadExistencia As Decimal, ByVal PrecioVenta As Double, ByVal Modelo As String, ByVal Ubicacion As String, ByVal CodigoTramo As Integer, ByVal Modelo2 As String, ByVal CodigoProductoF As String) As sp_consulta_Productos_PedidoClienteRow
            Dim rowsp_consulta_Productos_PedidoClienteRow As sp_consulta_Productos_PedidoClienteRow = CType(Me.NewRow,sp_consulta_Productos_PedidoClienteRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CantidadExistencia, PrecioVenta, Modelo, Ubicacion, CodigoTramo, Modelo2, CodigoProductoF}
            rowsp_consulta_Productos_PedidoClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_Productos_PedidoClienteRow)
            Return rowsp_consulta_Productos_PedidoClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_Productos_PedidoClienteDataTable = CType(MyBase.Clone,sp_consulta_Productos_PedidoClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_Productos_PedidoClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnModelo2 = MyBase.Columns("Modelo2")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnModelo2 = New Global.System.Data.DataColumn("Modelo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo2)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 83
            Me.columnCodigoTramo.ReadOnly = true
            Me.columnModelo2.ReadOnly = true
            Me.columnModelo2.MaxLength = 500
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_Productos_PedidoClienteRow() As sp_consulta_Productos_PedidoClienteRow
            Return CType(Me.NewRow,sp_consulta_Productos_PedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_Productos_PedidoClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_Productos_PedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_Productos_PedidoClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_PedidoClienteRowChanged(Me, New sp_consulta_Productos_PedidoClienteRowChangeEvent(CType(e.Row,sp_consulta_Productos_PedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_Productos_PedidoClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_PedidoClienteRowChanging(Me, New sp_consulta_Productos_PedidoClienteRowChangeEvent(CType(e.Row,sp_consulta_Productos_PedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_Productos_PedidoClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_PedidoClienteRowDeleted(Me, New sp_consulta_Productos_PedidoClienteRowChangeEvent(CType(e.Row,sp_consulta_Productos_PedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_Productos_PedidoClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_PedidoClienteRowDeleting(Me, New sp_consulta_Productos_PedidoClienteRowChangeEvent(CType(e.Row,sp_consulta_Productos_PedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_Productos_PedidoClienteRow(ByVal row As sp_consulta_Productos_PedidoClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_Productos_PedidoClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_R_ChequesDevDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNCheque As Global.System.Data.DataColumn
        
        Private columnFechaD As Global.System.Data.DataColumn
        
        Private columnFechaDev As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnNControl As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_R_ChequesDev"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_R_ChequesDevRow
            Get
                Return CType(Me.Rows(index),sp_R_ChequesDevRow)
            End Get
        End Property
        
        Public Event sp_R_ChequesDevRowChanging As sp_R_ChequesDevRowChangeEventHandler
        
        Public Event sp_R_ChequesDevRowChanged As sp_R_ChequesDevRowChangeEventHandler
        
        Public Event sp_R_ChequesDevRowDeleting As sp_R_ChequesDevRowChangeEventHandler
        
        Public Event sp_R_ChequesDevRowDeleted As sp_R_ChequesDevRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_R_ChequesDevRow(ByVal row As sp_R_ChequesDevRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_R_ChequesDevRow(ByVal NCheque As String, ByVal FechaD As Date, ByVal FechaDev As Date, ByVal Monto As Double, ByVal ControlInicio As String, ByVal NControl As String, ByVal RazonSocial As String, ByVal CodigoVendedor As Integer, ByVal Nombre As String) As sp_R_ChequesDevRow
            Dim rowsp_R_ChequesDevRow As sp_R_ChequesDevRow = CType(Me.NewRow,sp_R_ChequesDevRow)
            Dim columnValuesArray() As Object = New Object() {NCheque, FechaD, FechaDev, Monto, ControlInicio, NControl, RazonSocial, CodigoVendedor, Nombre}
            rowsp_R_ChequesDevRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_R_ChequesDevRow)
            Return rowsp_R_ChequesDevRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_R_ChequesDevDataTable = CType(MyBase.Clone,sp_R_ChequesDevDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_R_ChequesDevDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNCheque = MyBase.Columns("NCheque")
            Me.columnFechaD = MyBase.Columns("FechaD")
            Me.columnFechaDev = MyBase.Columns("FechaDev")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnNControl = MyBase.Columns("NControl")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNCheque = New Global.System.Data.DataColumn("NCheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCheque)
            Me.columnFechaD = New Global.System.Data.DataColumn("FechaD", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaD)
            Me.columnFechaDev = New Global.System.Data.DataColumn("FechaDev", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDev)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnNControl = New Global.System.Data.DataColumn("NControl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNControl)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoVendedor}, false))
            Me.columnNCheque.MaxLength = 50
            Me.columnMonto.AllowDBNull = false
            Me.columnNControl.AllowDBNull = false
            Me.columnNControl.MaxLength = 10
            Me.columnRazonSocial.MaxLength = 100
            Me.columnCodigoVendedor.Unique = true
            Me.columnNombre.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_R_ChequesDevRow() As sp_R_ChequesDevRow
            Return CType(Me.NewRow,sp_R_ChequesDevRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_R_ChequesDevRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_R_ChequesDevRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_R_ChequesDevRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_R_ChequesDevRowChanged(Me, New sp_R_ChequesDevRowChangeEvent(CType(e.Row,sp_R_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_R_ChequesDevRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_R_ChequesDevRowChanging(Me, New sp_R_ChequesDevRowChangeEvent(CType(e.Row,sp_R_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_R_ChequesDevRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_R_ChequesDevRowDeleted(Me, New sp_R_ChequesDevRowChangeEvent(CType(e.Row,sp_R_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_R_ChequesDevRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_R_ChequesDevRowDeleting(Me, New sp_R_ChequesDevRowChangeEvent(CType(e.Row,sp_R_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_R_ChequesDevRow(ByVal row As sp_R_ChequesDevRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_R_ChequesDevDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductoFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnOculto As Global.System.Data.DataColumn
        
        Private columnPorComplementar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductoF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcultoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOculto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorComplementarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorComplementar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductoFRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductoFRow)
            End Get
        End Property
        
        Public Event sp_consultaProductoFRowChanging As sp_consultaProductoFRowChangeEventHandler
        
        Public Event sp_consultaProductoFRowChanged As sp_consultaProductoFRowChangeEventHandler
        
        Public Event sp_consultaProductoFRowDeleting As sp_consultaProductoFRowChangeEventHandler
        
        Public Event sp_consultaProductoFRowDeleted As sp_consultaProductoFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductoFRow(ByVal row As sp_consultaProductoFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductoFRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CodigoProductoF As String, ByVal Oculto As Boolean, ByVal PorComplementar As Boolean) As sp_consultaProductoFRow
            Dim rowsp_consultaProductoFRow As sp_consultaProductoFRow = CType(Me.NewRow,sp_consultaProductoFRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CodigoProductoF, Oculto, PorComplementar}
            rowsp_consultaProductoFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductoFRow)
            Return rowsp_consultaProductoFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductoFRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductoFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductoFDataTable = CType(MyBase.Clone,sp_consultaProductoFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductoFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnOculto = MyBase.Columns("Oculto")
            Me.columnPorComplementar = MyBase.Columns("PorComplementar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnOculto = New Global.System.Data.DataColumn("Oculto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOculto)
            Me.columnPorComplementar = New Global.System.Data.DataColumn("PorComplementar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorComplementar)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductoFRow() As sp_consultaProductoFRow
            Return CType(Me.NewRow,sp_consultaProductoFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductoFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductoFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductoFRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoFRowChanged(Me, New sp_consultaProductoFRowChangeEvent(CType(e.Row,sp_consultaProductoFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductoFRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoFRowChanging(Me, New sp_consultaProductoFRowChangeEvent(CType(e.Row,sp_consultaProductoFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductoFRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoFRowDeleted(Me, New sp_consultaProductoFRowChangeEvent(CType(e.Row,sp_consultaProductoFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductoFRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductoFRowDeleting(Me, New sp_consultaProductoFRowChangeEvent(CType(e.Row,sp_consultaProductoFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductoFRow(ByVal row As sp_consultaProductoFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductoFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaNCPendientesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNroControl As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCodigoNotaCredito As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaNCPendientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoNotaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoNotaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaNCPendientesRow
            Get
                Return CType(Me.Rows(index),sp_consultaNCPendientesRow)
            End Get
        End Property
        
        Public Event sp_consultaNCPendientesRowChanging As sp_consultaNCPendientesRowChangeEventHandler
        
        Public Event sp_consultaNCPendientesRowChanged As sp_consultaNCPendientesRowChangeEventHandler
        
        Public Event sp_consultaNCPendientesRowDeleting As sp_consultaNCPendientesRowChangeEventHandler
        
        Public Event sp_consultaNCPendientesRowDeleted As sp_consultaNCPendientesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaNCPendientesRow(ByVal row As sp_consultaNCPendientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaNCPendientesRow(ByVal NroControl As Integer, ByVal ControlInicio As Decimal, ByVal Fecha As Date, ByVal RazonSocial As String, ByVal Monto As String, ByVal Observacion As String, ByVal Iva As Decimal, ByVal Tipo As String, ByVal MontoTotal As Decimal, ByVal Nombre As String, ByVal CodigoVendedor As Integer) As sp_consultaNCPendientesRow
            Dim rowsp_consultaNCPendientesRow As sp_consultaNCPendientesRow = CType(Me.NewRow,sp_consultaNCPendientesRow)
            Dim columnValuesArray() As Object = New Object() {NroControl, ControlInicio, Fecha, RazonSocial, Monto, Observacion, Iva, Tipo, Nothing, MontoTotal, Nombre, CodigoVendedor}
            rowsp_consultaNCPendientesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaNCPendientesRow)
            Return rowsp_consultaNCPendientesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaNCPendientesDataTable = CType(MyBase.Clone,sp_consultaNCPendientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaNCPendientesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNroControl = MyBase.Columns("NroControl")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCodigoNotaCredito = MyBase.Columns("CodigoNotaCredito")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNroControl = New Global.System.Data.DataColumn("NroControl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroControl)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCodigoNotaCredito = New Global.System.Data.DataColumn("CodigoNotaCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoNotaCredito)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnNroControl.AllowDBNull = false
            Me.columnControlInicio.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnObservacion.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnIva.AllowDBNull = false
            Me.columnTipo.ReadOnly = true
            Me.columnTipo.MaxLength = 5
            Me.columnCodigoNotaCredito.AutoIncrement = true
            Me.columnCodigoNotaCredito.AutoIncrementSeed = -1
            Me.columnCodigoNotaCredito.AutoIncrementStep = -1
            Me.columnCodigoNotaCredito.AllowDBNull = false
            Me.columnCodigoNotaCredito.ReadOnly = true
            Me.columnMontoTotal.AllowDBNull = false
            Me.columnNombre.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaNCPendientesRow() As sp_consultaNCPendientesRow
            Return CType(Me.NewRow,sp_consultaNCPendientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaNCPendientesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaNCPendientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaNCPendientesRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNCPendientesRowChanged(Me, New sp_consultaNCPendientesRowChangeEvent(CType(e.Row,sp_consultaNCPendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaNCPendientesRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNCPendientesRowChanging(Me, New sp_consultaNCPendientesRowChangeEvent(CType(e.Row,sp_consultaNCPendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaNCPendientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNCPendientesRowDeleted(Me, New sp_consultaNCPendientesRowChangeEvent(CType(e.Row,sp_consultaNCPendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaNCPendientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNCPendientesRowDeleting(Me, New sp_consultaNCPendientesRowChangeEvent(CType(e.Row,sp_consultaNCPendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaNCPendientesRow(ByVal row As sp_consultaNCPendientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaNCPendientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosDanadosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnDevueltos As Global.System.Data.DataColumn
        
        Private columnFacturados As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRecibo As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnFechaNC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosDanados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevueltosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDevueltos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturadosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturados
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosDanadosRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosDanadosRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosDanadosRowChanging As sp_consultaProductosDanadosRowChangeEventHandler
        
        Public Event sp_consultaProductosDanadosRowChanged As sp_consultaProductosDanadosRowChangeEventHandler
        
        Public Event sp_consultaProductosDanadosRowDeleting As sp_consultaProductosDanadosRowChangeEventHandler
        
        Public Event sp_consultaProductosDanadosRowDeleted As sp_consultaProductosDanadosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosDanadosRow(ByVal row As sp_consultaProductosDanadosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosDanadosRow(ByVal CodigoProducto As String, ByVal Nombre As String, ByVal Modelo As String, ByVal Devueltos As Integer, ByVal Facturados As Decimal, ByVal ControlInicio As Decimal, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal Recibo As String, ByVal CodigoVendedor As Integer, ByVal Vendedor As String, ByVal Observacion As String, ByVal FechaNC As Date) As sp_consultaProductosDanadosRow
            Dim rowsp_consultaProductosDanadosRow As sp_consultaProductosDanadosRow = CType(Me.NewRow,sp_consultaProductosDanadosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoProducto, Nombre, Modelo, Devueltos, Facturados, ControlInicio, CodigoCliente, RazonSocial, Recibo, CodigoVendedor, Vendedor, Observacion, FechaNC}
            rowsp_consultaProductosDanadosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosDanadosRow)
            Return rowsp_consultaProductosDanadosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosDanadosDataTable = CType(MyBase.Clone,sp_consultaProductosDanadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosDanadosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnDevueltos = MyBase.Columns("Devueltos")
            Me.columnFacturados = MyBase.Columns("Facturados")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRecibo = MyBase.Columns("Recibo")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnFechaNC = MyBase.Columns("FechaNC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnDevueltos = New Global.System.Data.DataColumn("Devueltos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDevueltos)
            Me.columnFacturados = New Global.System.Data.DataColumn("Facturados", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturados)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRecibo = New Global.System.Data.DataColumn("Recibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecibo)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnFechaNC = New Global.System.Data.DataColumn("FechaNC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNC)
            Me.columnCodigoProducto.MaxLength = 25
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnDevueltos.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnRecibo.ReadOnly = true
            Me.columnRecibo.MaxLength = 10
            Me.columnVendedor.MaxLength = 40
            Me.columnObservacion.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosDanadosRow() As sp_consultaProductosDanadosRow
            Return CType(Me.NewRow,sp_consultaProductosDanadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosDanadosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosDanadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosDanadosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosDanadosRowChanged(Me, New sp_consultaProductosDanadosRowChangeEvent(CType(e.Row,sp_consultaProductosDanadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosDanadosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosDanadosRowChanging(Me, New sp_consultaProductosDanadosRowChangeEvent(CType(e.Row,sp_consultaProductosDanadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosDanadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosDanadosRowDeleted(Me, New sp_consultaProductosDanadosRowChangeEvent(CType(e.Row,sp_consultaProductosDanadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosDanadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosDanadosRowDeleting(Me, New sp_consultaProductosDanadosRowChangeEvent(CType(e.Row,sp_consultaProductosDanadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosDanadosRow(ByVal row As sp_consultaProductosDanadosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosDanadosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_Productos_FacturaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnCodigoF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_Productos_Factura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_Productos_FacturaRow
            Get
                Return CType(Me.Rows(index),sp_consulta_Productos_FacturaRow)
            End Get
        End Property
        
        Public Event sp_consulta_Productos_FacturaRowChanging As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        Public Event sp_consulta_Productos_FacturaRowChanged As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        Public Event sp_consulta_Productos_FacturaRowDeleting As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        Public Event sp_consulta_Productos_FacturaRowDeleted As sp_consulta_Productos_FacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_Productos_FacturaRow(ByVal row As sp_consulta_Productos_FacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_Productos_FacturaRow(ByVal Cantidad As Decimal, ByVal CodigoProducto As String, ByVal Nombre As String, ByVal Modelo As String, ByVal Precio As Double, ByVal CodigoF As String) As sp_consulta_Productos_FacturaRow
            Dim rowsp_consulta_Productos_FacturaRow As sp_consulta_Productos_FacturaRow = CType(Me.NewRow,sp_consulta_Productos_FacturaRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, CodigoProducto, Nombre, Modelo, Precio, CodigoF}
            rowsp_consulta_Productos_FacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_Productos_FacturaRow)
            Return rowsp_consulta_Productos_FacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_Productos_FacturaDataTable = CType(MyBase.Clone,sp_consulta_Productos_FacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_Productos_FacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnCodigoF = MyBase.Columns("CodigoF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnCodigoF = New Global.System.Data.DataColumn("CodigoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoF)
            Me.columnCantidad.ReadOnly = true
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 50
            Me.columnPrecio.AllowDBNull = false
            Me.columnCodigoF.ReadOnly = true
            Me.columnCodigoF.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_Productos_FacturaRow() As sp_consulta_Productos_FacturaRow
            Return CType(Me.NewRow,sp_consulta_Productos_FacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_Productos_FacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_Productos_FacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowChanged(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowChanging(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowDeleted(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_Productos_FacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Productos_FacturaRowDeleting(Me, New sp_consulta_Productos_FacturaRowChangeEvent(CType(e.Row,sp_consulta_Productos_FacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_Productos_FacturaRow(ByVal row As sp_consulta_Productos_FacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_Productos_FacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaClienteCombo3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaClienteCombo3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaClienteCombo3Row
            Get
                Return CType(Me.Rows(index),sp_consultaClienteCombo3Row)
            End Get
        End Property
        
        Public Event sp_consultaClienteCombo3RowChanging As sp_consultaClienteCombo3RowChangeEventHandler
        
        Public Event sp_consultaClienteCombo3RowChanged As sp_consultaClienteCombo3RowChangeEventHandler
        
        Public Event sp_consultaClienteCombo3RowDeleting As sp_consultaClienteCombo3RowChangeEventHandler
        
        Public Event sp_consultaClienteCombo3RowDeleted As sp_consultaClienteCombo3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaClienteCombo3Row(ByVal row As sp_consultaClienteCombo3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaClienteCombo3Row(ByVal CodigoCliente As String, ByVal RazonSocial As String) As sp_consultaClienteCombo3Row
            Dim rowsp_consultaClienteCombo3Row As sp_consultaClienteCombo3Row = CType(Me.NewRow,sp_consultaClienteCombo3Row)
            Dim columnValuesArray() As Object = New Object() {CodigoCliente, RazonSocial}
            rowsp_consultaClienteCombo3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaClienteCombo3Row)
            Return rowsp_consultaClienteCombo3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaClienteCombo3DataTable = CType(MyBase.Clone,sp_consultaClienteCombo3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaClienteCombo3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnCodigoCliente.ReadOnly = true
            Me.columnCodigoCliente.MaxLength = 25
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaClienteCombo3Row() As sp_consultaClienteCombo3Row
            Return CType(Me.NewRow,sp_consultaClienteCombo3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaClienteCombo3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaClienteCombo3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaClienteCombo3RowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteCombo3RowChanged(Me, New sp_consultaClienteCombo3RowChangeEvent(CType(e.Row,sp_consultaClienteCombo3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaClienteCombo3RowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteCombo3RowChanging(Me, New sp_consultaClienteCombo3RowChangeEvent(CType(e.Row,sp_consultaClienteCombo3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaClienteCombo3RowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteCombo3RowDeleted(Me, New sp_consultaClienteCombo3RowChangeEvent(CType(e.Row,sp_consultaClienteCombo3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaClienteCombo3RowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteCombo3RowDeleting(Me, New sp_consultaClienteCombo3RowChangeEvent(CType(e.Row,sp_consultaClienteCombo3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaClienteCombo3Row(ByVal row As sp_consultaClienteCombo3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaClienteCombo3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_relacionFactDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnNC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_relacionFact"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_relacionFactRow
            Get
                Return CType(Me.Rows(index),sp_relacionFactRow)
            End Get
        End Property
        
        Public Event sp_relacionFactRowChanging As sp_relacionFactRowChangeEventHandler
        
        Public Event sp_relacionFactRowChanged As sp_relacionFactRowChangeEventHandler
        
        Public Event sp_relacionFactRowDeleting As sp_relacionFactRowChangeEventHandler
        
        Public Event sp_relacionFactRowDeleted As sp_relacionFactRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_relacionFactRow(ByVal row As sp_relacionFactRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_relacionFactRow(ByVal ControlInicio As Decimal, ByVal CodigoCliente As Integer, ByVal RazonSocial As String, ByVal Fecha As Date, ByVal MontoTotal As Decimal, ByVal Nombre As String, ByVal NC As Double) As sp_relacionFactRow
            Dim rowsp_relacionFactRow As sp_relacionFactRow = CType(Me.NewRow,sp_relacionFactRow)
            Dim columnValuesArray() As Object = New Object() {ControlInicio, CodigoCliente, RazonSocial, Fecha, MontoTotal, Nombre, NC}
            rowsp_relacionFactRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_relacionFactRow)
            Return rowsp_relacionFactRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_relacionFactDataTable = CType(MyBase.Clone,sp_relacionFactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_relacionFactDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnNC = MyBase.Columns("NC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnNC = New Global.System.Data.DataColumn("NC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNC)
            Me.columnControlInicio.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnFecha.AllowDBNull = false
            Me.columnMontoTotal.AllowDBNull = false
            Me.columnNombre.MaxLength = 40
            Me.columnNC.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_relacionFactRow() As sp_relacionFactRow
            Return CType(Me.NewRow,sp_relacionFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_relacionFactRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_relacionFactRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_relacionFactRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_relacionFactRowChanged(Me, New sp_relacionFactRowChangeEvent(CType(e.Row,sp_relacionFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_relacionFactRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_relacionFactRowChanging(Me, New sp_relacionFactRowChangeEvent(CType(e.Row,sp_relacionFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_relacionFactRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_relacionFactRowDeleted(Me, New sp_relacionFactRowChangeEvent(CType(e.Row,sp_relacionFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_relacionFactRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_relacionFactRowDeleting(Me, New sp_relacionFactRowChangeEvent(CType(e.Row,sp_relacionFactRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_relacionFactRow(ByVal row As sp_relacionFactRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_relacionFactDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaLogoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnDireccionTexto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaLogo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionTextoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionTexto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaLogoRow
            Get
                Return CType(Me.Rows(index),sp_consultaLogoRow)
            End Get
        End Property
        
        Public Event sp_consultaLogoRowChanging As sp_consultaLogoRowChangeEventHandler
        
        Public Event sp_consultaLogoRowChanged As sp_consultaLogoRowChangeEventHandler
        
        Public Event sp_consultaLogoRowDeleting As sp_consultaLogoRowChangeEventHandler
        
        Public Event sp_consultaLogoRowDeleted As sp_consultaLogoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaLogoRow(ByVal row As sp_consultaLogoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaLogoRow(ByVal Logo() As Byte, ByVal Direccion() As Byte, ByVal DireccionTexto As String) As sp_consultaLogoRow
            Dim rowsp_consultaLogoRow As sp_consultaLogoRow = CType(Me.NewRow,sp_consultaLogoRow)
            Dim columnValuesArray() As Object = New Object() {Logo, Direccion, DireccionTexto}
            rowsp_consultaLogoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaLogoRow)
            Return rowsp_consultaLogoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaLogoDataTable = CType(MyBase.Clone,sp_consultaLogoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaLogoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnDireccionTexto = MyBase.Columns("DireccionTexto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnDireccionTexto = New Global.System.Data.DataColumn("DireccionTexto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionTexto)
            Me.columnLogo.AllowDBNull = false
            Me.columnDireccionTexto.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaLogoRow() As sp_consultaLogoRow
            Return CType(Me.NewRow,sp_consultaLogoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaLogoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaLogoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaLogoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaLogoRowChanged(Me, New sp_consultaLogoRowChangeEvent(CType(e.Row,sp_consultaLogoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaLogoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaLogoRowChanging(Me, New sp_consultaLogoRowChangeEvent(CType(e.Row,sp_consultaLogoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaLogoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaLogoRowDeleted(Me, New sp_consultaLogoRowChangeEvent(CType(e.Row,sp_consultaLogoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaLogoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaLogoRowDeleting(Me, New sp_consultaLogoRowChangeEvent(CType(e.Row,sp_consultaLogoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaLogoRow(ByVal row As sp_consultaLogoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaLogoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaObsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnObsFactura As Global.System.Data.DataColumn
        
        Private columnObsReportes As Global.System.Data.DataColumn
        
        Private columnLeyenda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaObs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObsFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObsFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObsReportesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObsReportes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeyendaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeyenda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaObsRow
            Get
                Return CType(Me.Rows(index),sp_consultaObsRow)
            End Get
        End Property
        
        Public Event sp_consultaObsRowChanging As sp_consultaObsRowChangeEventHandler
        
        Public Event sp_consultaObsRowChanged As sp_consultaObsRowChangeEventHandler
        
        Public Event sp_consultaObsRowDeleting As sp_consultaObsRowChangeEventHandler
        
        Public Event sp_consultaObsRowDeleted As sp_consultaObsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaObsRow(ByVal row As sp_consultaObsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaObsRow(ByVal ObsFactura As String, ByVal ObsReportes As String, ByVal Leyenda As String) As sp_consultaObsRow
            Dim rowsp_consultaObsRow As sp_consultaObsRow = CType(Me.NewRow,sp_consultaObsRow)
            Dim columnValuesArray() As Object = New Object() {ObsFactura, ObsReportes, Leyenda}
            rowsp_consultaObsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaObsRow)
            Return rowsp_consultaObsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaObsDataTable = CType(MyBase.Clone,sp_consultaObsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaObsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObsFactura = MyBase.Columns("ObsFactura")
            Me.columnObsReportes = MyBase.Columns("ObsReportes")
            Me.columnLeyenda = MyBase.Columns("Leyenda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObsFactura = New Global.System.Data.DataColumn("ObsFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObsFactura)
            Me.columnObsReportes = New Global.System.Data.DataColumn("ObsReportes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObsReportes)
            Me.columnLeyenda = New Global.System.Data.DataColumn("Leyenda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeyenda)
            Me.columnObsFactura.MaxLength = 200
            Me.columnObsReportes.MaxLength = 200
            Me.columnLeyenda.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaObsRow() As sp_consultaObsRow
            Return CType(Me.NewRow,sp_consultaObsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaObsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaObsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaObsRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaObsRowChanged(Me, New sp_consultaObsRowChangeEvent(CType(e.Row,sp_consultaObsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaObsRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaObsRowChanging(Me, New sp_consultaObsRowChangeEvent(CType(e.Row,sp_consultaObsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaObsRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaObsRowDeleted(Me, New sp_consultaObsRowChangeEvent(CType(e.Row,sp_consultaObsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaObsRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaObsRowDeleting(Me, New sp_consultaObsRowChangeEvent(CType(e.Row,sp_consultaObsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaObsRow(ByVal row As sp_consultaObsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaObsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_lvclienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnRepresentante As Global.System.Data.DataColumn
        
        Private columnGerente As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnZona As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnClasificacionABC As Global.System.Data.DataColumn
        
        Private columnAutorizado As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        Private columnContEspecial As Global.System.Data.DataColumn
        
        Private columnCelular As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnUser As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnFletePago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_lvcliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepresentanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepresentante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GerenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGerente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClasificacionABCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasificacionABC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContEspecialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContEspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CelularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FletePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFletePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_lvclienteRow
            Get
                Return CType(Me.Rows(index),sp_lvclienteRow)
            End Get
        End Property
        
        Public Event sp_lvclienteRowChanging As sp_lvclienteRowChangeEventHandler
        
        Public Event sp_lvclienteRowChanged As sp_lvclienteRowChangeEventHandler
        
        Public Event sp_lvclienteRowDeleting As sp_lvclienteRowChangeEventHandler
        
        Public Event sp_lvclienteRowDeleted As sp_lvclienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_lvclienteRow(ByVal row As sp_lvclienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_lvclienteRow( _
                    ByVal CodigoCliente As Integer,  _
                    ByVal RazonSocial As String,  _
                    ByVal Rif As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Representante As String,  _
                    ByVal Gerente As String,  _
                    ByVal CodigoVendedor As Integer,  _
                    ByVal Zona As Integer,  _
                    ByVal Estado As String,  _
                    ByVal ClasificacionABC As String,  _
                    ByVal Autorizado As Boolean,  _
                    ByVal eliminado As Boolean,  _
                    ByVal ContEspecial As Boolean,  _
                    ByVal Celular As String,  _
                    ByVal Observacion As String,  _
                    ByVal User As String,  _
                    ByVal Password As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal FletePago As Boolean) As sp_lvclienteRow
            Dim rowsp_lvclienteRow As sp_lvclienteRow = CType(Me.NewRow,sp_lvclienteRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCliente, RazonSocial, Rif, FechaRegistro, Telefono1, Telefono2, Fax, Email, Direccion, Representante, Gerente, CodigoVendedor, Zona, Estado, ClasificacionABC, Autorizado, eliminado, ContEspecial, Celular, Observacion, User, Password, LimiteCredito, FletePago}
            rowsp_lvclienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_lvclienteRow)
            Return rowsp_lvclienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoCliente(ByVal CodigoCliente As Integer) As sp_lvclienteRow
            Return CType(Me.Rows.Find(New Object() {CodigoCliente}),sp_lvclienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_lvclienteDataTable = CType(MyBase.Clone,sp_lvclienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_lvclienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnRepresentante = MyBase.Columns("Representante")
            Me.columnGerente = MyBase.Columns("Gerente")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnZona = MyBase.Columns("Zona")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnClasificacionABC = MyBase.Columns("ClasificacionABC")
            Me.columnAutorizado = MyBase.Columns("Autorizado")
            Me.columneliminado = MyBase.Columns("eliminado")
            Me.columnContEspecial = MyBase.Columns("ContEspecial")
            Me.columnCelular = MyBase.Columns("Celular")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnUser = MyBase.Columns("User")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnFletePago = MyBase.Columns("FletePago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnRepresentante = New Global.System.Data.DataColumn("Representante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepresentante)
            Me.columnGerente = New Global.System.Data.DataColumn("Gerente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGerente)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnZona = New Global.System.Data.DataColumn("Zona", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZona)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnClasificacionABC = New Global.System.Data.DataColumn("ClasificacionABC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasificacionABC)
            Me.columnAutorizado = New Global.System.Data.DataColumn("Autorizado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizado)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.columnContEspecial = New Global.System.Data.DataColumn("ContEspecial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContEspecial)
            Me.columnCelular = New Global.System.Data.DataColumn("Celular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCelular)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnUser = New Global.System.Data.DataColumn("User", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnFletePago = New Global.System.Data.DataColumn("FletePago", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFletePago)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoCliente}, true))
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnCodigoCliente.Unique = true
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnRif.AllowDBNull = false
            Me.columnRif.MaxLength = 15
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnTelefono1.MaxLength = 30
            Me.columnTelefono2.MaxLength = 30
            Me.columnFax.MaxLength = 30
            Me.columnEmail.MaxLength = 50
            Me.columnDireccion.MaxLength = 200
            Me.columnRepresentante.MaxLength = 50
            Me.columnGerente.MaxLength = 50
            Me.columnCodigoVendedor.AllowDBNull = false
            Me.columnEstado.MaxLength = 50
            Me.columnClasificacionABC.MaxLength = 1
            Me.columnAutorizado.AllowDBNull = false
            Me.columneliminado.AllowDBNull = false
            Me.columnCelular.MaxLength = 30
            Me.columnObservacion.MaxLength = 250
            Me.columnUser.MaxLength = 25
            Me.columnPassword.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_lvclienteRow() As sp_lvclienteRow
            Return CType(Me.NewRow,sp_lvclienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_lvclienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_lvclienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_lvclienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_lvclienteRowChanged(Me, New sp_lvclienteRowChangeEvent(CType(e.Row,sp_lvclienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_lvclienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_lvclienteRowChanging(Me, New sp_lvclienteRowChangeEvent(CType(e.Row,sp_lvclienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_lvclienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_lvclienteRowDeleted(Me, New sp_lvclienteRowChangeEvent(CType(e.Row,sp_lvclienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_lvclienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_lvclienteRowDeleting(Me, New sp_lvclienteRowChangeEvent(CType(e.Row,sp_lvclienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_lvclienteRow(ByVal row As sp_lvclienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_lvclienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaTipoGastoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaTipoGasto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaTipoGastoRow
            Get
                Return CType(Me.Rows(index),sp_consultaTipoGastoRow)
            End Get
        End Property
        
        Public Event sp_consultaTipoGastoRowChanging As sp_consultaTipoGastoRowChangeEventHandler
        
        Public Event sp_consultaTipoGastoRowChanged As sp_consultaTipoGastoRowChangeEventHandler
        
        Public Event sp_consultaTipoGastoRowDeleting As sp_consultaTipoGastoRowChangeEventHandler
        
        Public Event sp_consultaTipoGastoRowDeleted As sp_consultaTipoGastoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaTipoGastoRow(ByVal row As sp_consultaTipoGastoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaTipoGastoRow(ByVal Nombre As String) As sp_consultaTipoGastoRow
            Dim rowsp_consultaTipoGastoRow As sp_consultaTipoGastoRow = CType(Me.NewRow,sp_consultaTipoGastoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nombre}
            rowsp_consultaTipoGastoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaTipoGastoRow)
            Return rowsp_consultaTipoGastoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As sp_consultaTipoGastoRow
            Return CType(Me.Rows.Find(New Object() {ID}),sp_consultaTipoGastoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaTipoGastoDataTable = CType(MyBase.Clone,sp_consultaTipoGastoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaTipoGastoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaTipoGastoRow() As sp_consultaTipoGastoRow
            Return CType(Me.NewRow,sp_consultaTipoGastoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaTipoGastoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaTipoGastoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaTipoGastoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaTipoGastoRowChanged(Me, New sp_consultaTipoGastoRowChangeEvent(CType(e.Row,sp_consultaTipoGastoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaTipoGastoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaTipoGastoRowChanging(Me, New sp_consultaTipoGastoRowChangeEvent(CType(e.Row,sp_consultaTipoGastoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaTipoGastoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaTipoGastoRowDeleted(Me, New sp_consultaTipoGastoRowChangeEvent(CType(e.Row,sp_consultaTipoGastoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaTipoGastoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaTipoGastoRowDeleting(Me, New sp_consultaTipoGastoRowChangeEvent(CType(e.Row,sp_consultaTipoGastoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaTipoGastoRow(ByVal row As sp_consultaTipoGastoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaTipoGastoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaCatalogoModelosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnEmpaque As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnresaltarc As Global.System.Data.DataColumn
        
        Private columnresaltar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCatalogoModelos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpaqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpaque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resaltarcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresaltarc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resaltarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresaltar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaCatalogoModelosRow
            Get
                Return CType(Me.Rows(index),sp_consultaCatalogoModelosRow)
            End Get
        End Property
        
        Public Event sp_consultaCatalogoModelosRowChanging As sp_consultaCatalogoModelosRowChangeEventHandler
        
        Public Event sp_consultaCatalogoModelosRowChanged As sp_consultaCatalogoModelosRowChangeEventHandler
        
        Public Event sp_consultaCatalogoModelosRowDeleting As sp_consultaCatalogoModelosRowChangeEventHandler
        
        Public Event sp_consultaCatalogoModelosRowDeleted As sp_consultaCatalogoModelosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaCatalogoModelosRow(ByVal row As sp_consultaCatalogoModelosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaCatalogoModelosRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Observacion As String, ByVal Marca As String, ByVal Modelo As String, ByVal PrecioVenta As Double, ByVal Empaque As String, ByVal CodigoProductoF As String, ByVal MarcaProducto As String, ByVal CantidadExistencia As Decimal, ByVal resaltarc As Integer, ByVal resaltar As Integer) As sp_consultaCatalogoModelosRow
            Dim rowsp_consultaCatalogoModelosRow As sp_consultaCatalogoModelosRow = CType(Me.NewRow,sp_consultaCatalogoModelosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Observacion, Marca, Modelo, PrecioVenta, Empaque, CodigoProductoF, MarcaProducto, CantidadExistencia, resaltarc, resaltar}
            rowsp_consultaCatalogoModelosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaCatalogoModelosRow)
            Return rowsp_consultaCatalogoModelosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaCatalogoModelosRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaCatalogoModelosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaCatalogoModelosDataTable = CType(MyBase.Clone,sp_consultaCatalogoModelosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaCatalogoModelosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnEmpaque = MyBase.Columns("Empaque")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnresaltarc = MyBase.Columns("resaltarc")
            Me.columnresaltar = MyBase.Columns("resaltar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnEmpaque = New Global.System.Data.DataColumn("Empaque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpaque)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnresaltarc = New Global.System.Data.DataColumn("resaltarc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresaltarc)
            Me.columnresaltar = New Global.System.Data.DataColumn("resaltar", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresaltar)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnObservacion.MaxLength = 100
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnEmpaque.MaxLength = 50
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 50
            Me.columnMarcaProducto.MaxLength = 50
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnresaltarc.ReadOnly = true
            Me.columnresaltar.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaCatalogoModelosRow() As sp_consultaCatalogoModelosRow
            Return CType(Me.NewRow,sp_consultaCatalogoModelosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaCatalogoModelosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaCatalogoModelosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaCatalogoModelosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelosRowChanged(Me, New sp_consultaCatalogoModelosRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaCatalogoModelosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelosRowChanging(Me, New sp_consultaCatalogoModelosRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaCatalogoModelosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelosRowDeleted(Me, New sp_consultaCatalogoModelosRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaCatalogoModelosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelosRowDeleting(Me, New sp_consultaCatalogoModelosRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaCatalogoModelosRow(ByVal row As sp_consultaCatalogoModelosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaCatalogoModelosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaCodigoArancelarioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoArancelario As Global.System.Data.DataColumn
        
        Private columnImpuesto As Global.System.Data.DataColumn
        
        Private columndescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCodigoArancelario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoArancelarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoArancelario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaCodigoArancelarioRow
            Get
                Return CType(Me.Rows(index),sp_consultaCodigoArancelarioRow)
            End Get
        End Property
        
        Public Event sp_consultaCodigoArancelarioRowChanging As sp_consultaCodigoArancelarioRowChangeEventHandler
        
        Public Event sp_consultaCodigoArancelarioRowChanged As sp_consultaCodigoArancelarioRowChangeEventHandler
        
        Public Event sp_consultaCodigoArancelarioRowDeleting As sp_consultaCodigoArancelarioRowChangeEventHandler
        
        Public Event sp_consultaCodigoArancelarioRowDeleted As sp_consultaCodigoArancelarioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaCodigoArancelarioRow(ByVal row As sp_consultaCodigoArancelarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaCodigoArancelarioRow(ByVal CodigoArancelario As String, ByVal Impuesto As String, ByVal descripcion As String) As sp_consultaCodigoArancelarioRow
            Dim rowsp_consultaCodigoArancelarioRow As sp_consultaCodigoArancelarioRow = CType(Me.NewRow,sp_consultaCodigoArancelarioRow)
            Dim columnValuesArray() As Object = New Object() {CodigoArancelario, Impuesto, descripcion}
            rowsp_consultaCodigoArancelarioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaCodigoArancelarioRow)
            Return rowsp_consultaCodigoArancelarioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoArancelario(ByVal CodigoArancelario As String) As sp_consultaCodigoArancelarioRow
            Return CType(Me.Rows.Find(New Object() {CodigoArancelario}),sp_consultaCodigoArancelarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaCodigoArancelarioDataTable = CType(MyBase.Clone,sp_consultaCodigoArancelarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaCodigoArancelarioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoArancelario = MyBase.Columns("CodigoArancelario")
            Me.columnImpuesto = MyBase.Columns("Impuesto")
            Me.columndescripcion = MyBase.Columns("descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoArancelario = New Global.System.Data.DataColumn("CodigoArancelario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoArancelario)
            Me.columnImpuesto = New Global.System.Data.DataColumn("Impuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuesto)
            Me.columndescripcion = New Global.System.Data.DataColumn("descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoArancelario}, true))
            Me.columnCodigoArancelario.AllowDBNull = false
            Me.columnCodigoArancelario.ReadOnly = true
            Me.columnCodigoArancelario.Unique = true
            Me.columnCodigoArancelario.MaxLength = 15
            Me.columnImpuesto.AllowDBNull = false
            Me.columnImpuesto.ReadOnly = true
            Me.columndescripcion.ReadOnly = true
            Me.columndescripcion.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaCodigoArancelarioRow() As sp_consultaCodigoArancelarioRow
            Return CType(Me.NewRow,sp_consultaCodigoArancelarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaCodigoArancelarioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaCodigoArancelarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaCodigoArancelarioRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigoArancelarioRowChanged(Me, New sp_consultaCodigoArancelarioRowChangeEvent(CType(e.Row,sp_consultaCodigoArancelarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaCodigoArancelarioRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigoArancelarioRowChanging(Me, New sp_consultaCodigoArancelarioRowChangeEvent(CType(e.Row,sp_consultaCodigoArancelarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaCodigoArancelarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigoArancelarioRowDeleted(Me, New sp_consultaCodigoArancelarioRowChangeEvent(CType(e.Row,sp_consultaCodigoArancelarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaCodigoArancelarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCodigoArancelarioRowDeleting(Me, New sp_consultaCodigoArancelarioRowChangeEvent(CType(e.Row,sp_consultaCodigoArancelarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaCodigoArancelarioRow(ByVal row As sp_consultaCodigoArancelarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaCodigoArancelarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnRepresentante As Global.System.Data.DataColumn
        
        Private columnGerente As Global.System.Data.DataColumn
        
        Private columncodZona As Global.System.Data.DataColumn
        
        Private columnzona As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnClasificacionABC As Global.System.Data.DataColumn
        
        Private columnAutorizado As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        Private columnContEspecial As Global.System.Data.DataColumn
        
        Private columnCelular As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnuser As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnFletePago As Global.System.Data.DataColumn
        
        Private columnDireccionEntrega As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepresentanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepresentante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GerenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGerente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codZonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodZona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClasificacionABCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasificacionABC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContEspecialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContEspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CelularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FletePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFletePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionEntregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionEntrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaClienteRow
            Get
                Return CType(Me.Rows(index),sp_consultaClienteRow)
            End Get
        End Property
        
        Public Event sp_consultaClienteRowChanging As sp_consultaClienteRowChangeEventHandler
        
        Public Event sp_consultaClienteRowChanged As sp_consultaClienteRowChangeEventHandler
        
        Public Event sp_consultaClienteRowDeleting As sp_consultaClienteRowChangeEventHandler
        
        Public Event sp_consultaClienteRowDeleted As sp_consultaClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaClienteRow(ByVal row As sp_consultaClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaClienteRow( _
                    ByVal CodigoCliente As Integer,  _
                    ByVal RazonSocial As String,  _
                    ByVal Rif As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Representante As String,  _
                    ByVal Gerente As String,  _
                    ByVal codZona As Integer,  _
                    ByVal zona As String,  _
                    ByVal Estado As String,  _
                    ByVal ClasificacionABC As String,  _
                    ByVal Autorizado As Boolean,  _
                    ByVal eliminado As Boolean,  _
                    ByVal ContEspecial As Boolean,  _
                    ByVal Celular As String,  _
                    ByVal Observacion As String,  _
                    ByVal CodigoVendedor As Integer,  _
                    ByVal Nombre As String,  _
                    ByVal user As String,  _
                    ByVal Password As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal FletePago As Boolean,  _
                    ByVal DireccionEntrega As String) As sp_consultaClienteRow
            Dim rowsp_consultaClienteRow As sp_consultaClienteRow = CType(Me.NewRow,sp_consultaClienteRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCliente, RazonSocial, Rif, FechaRegistro, Telefono1, Telefono2, Fax, Email, Direccion, Representante, Gerente, codZona, zona, Estado, ClasificacionABC, Autorizado, eliminado, ContEspecial, Celular, Observacion, CodigoVendedor, Nombre, user, Password, LimiteCredito, FletePago, DireccionEntrega}
            rowsp_consultaClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaClienteRow)
            Return rowsp_consultaClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaClienteDataTable = CType(MyBase.Clone,sp_consultaClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnRepresentante = MyBase.Columns("Representante")
            Me.columnGerente = MyBase.Columns("Gerente")
            Me.columncodZona = MyBase.Columns("codZona")
            Me.columnzona = MyBase.Columns("zona")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnClasificacionABC = MyBase.Columns("ClasificacionABC")
            Me.columnAutorizado = MyBase.Columns("Autorizado")
            Me.columneliminado = MyBase.Columns("eliminado")
            Me.columnContEspecial = MyBase.Columns("ContEspecial")
            Me.columnCelular = MyBase.Columns("Celular")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnuser = MyBase.Columns("user")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnFletePago = MyBase.Columns("FletePago")
            Me.columnDireccionEntrega = MyBase.Columns("DireccionEntrega")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnRepresentante = New Global.System.Data.DataColumn("Representante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepresentante)
            Me.columnGerente = New Global.System.Data.DataColumn("Gerente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGerente)
            Me.columncodZona = New Global.System.Data.DataColumn("codZona", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodZona)
            Me.columnzona = New Global.System.Data.DataColumn("zona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzona)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnClasificacionABC = New Global.System.Data.DataColumn("ClasificacionABC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasificacionABC)
            Me.columnAutorizado = New Global.System.Data.DataColumn("Autorizado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizado)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.columnContEspecial = New Global.System.Data.DataColumn("ContEspecial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContEspecial)
            Me.columnCelular = New Global.System.Data.DataColumn("Celular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCelular)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnuser = New Global.System.Data.DataColumn("user", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuser)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnFletePago = New Global.System.Data.DataColumn("FletePago", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFletePago)
            Me.columnDireccionEntrega = New Global.System.Data.DataColumn("DireccionEntrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionEntrega)
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnRif.AllowDBNull = false
            Me.columnRif.MaxLength = 15
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnTelefono1.MaxLength = 30
            Me.columnTelefono2.MaxLength = 30
            Me.columnFax.MaxLength = 30
            Me.columnEmail.MaxLength = 50
            Me.columnDireccion.MaxLength = 200
            Me.columnRepresentante.MaxLength = 50
            Me.columnGerente.MaxLength = 50
            Me.columnzona.MaxLength = 100
            Me.columnEstado.MaxLength = 50
            Me.columnClasificacionABC.MaxLength = 1
            Me.columnAutorizado.AllowDBNull = false
            Me.columneliminado.AllowDBNull = false
            Me.columnCelular.MaxLength = 30
            Me.columnObservacion.MaxLength = 250
            Me.columnNombre.MaxLength = 40
            Me.columnuser.MaxLength = 25
            Me.columnPassword.MaxLength = 25
            Me.columnDireccionEntrega.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaClienteRow() As sp_consultaClienteRow
            Return CType(Me.NewRow,sp_consultaClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowChanged(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowChanging(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowDeleted(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaClienteRowDeleting(Me, New sp_consultaClienteRowChangeEvent(CType(e.Row,sp_consultaClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaClienteRow(ByVal row As sp_consultaClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaEmpresaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnTelefono3 As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnActiva As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaEmpresa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActiva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaEmpresaRow
            Get
                Return CType(Me.Rows(index),sp_consultaEmpresaRow)
            End Get
        End Property
        
        Public Event sp_consultaEmpresaRowChanging As sp_consultaEmpresaRowChangeEventHandler
        
        Public Event sp_consultaEmpresaRowChanged As sp_consultaEmpresaRowChangeEventHandler
        
        Public Event sp_consultaEmpresaRowDeleting As sp_consultaEmpresaRowChangeEventHandler
        
        Public Event sp_consultaEmpresaRowDeleted As sp_consultaEmpresaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaEmpresaRow(ByVal row As sp_consultaEmpresaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaEmpresaRow(ByVal Rif As String, ByVal RazonSocial As String, ByVal Telefono1 As String, ByVal Telefono2 As String, ByVal Telefono3 As String, ByVal Observacion As String, ByVal Activa As Boolean) As sp_consultaEmpresaRow
            Dim rowsp_consultaEmpresaRow As sp_consultaEmpresaRow = CType(Me.NewRow,sp_consultaEmpresaRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Rif, RazonSocial, Telefono1, Telefono2, Telefono3, Observacion, Activa}
            rowsp_consultaEmpresaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaEmpresaRow)
            Return rowsp_consultaEmpresaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As sp_consultaEmpresaRow
            Return CType(Me.Rows.Find(New Object() {Id}),sp_consultaEmpresaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaEmpresaDataTable = CType(MyBase.Clone,sp_consultaEmpresaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaEmpresaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnTelefono3 = MyBase.Columns("Telefono3")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnActiva = MyBase.Columns("Activa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnTelefono3 = New Global.System.Data.DataColumn("Telefono3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono3)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnActiva = New Global.System.Data.DataColumn("Activa", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActiva)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnRif.AllowDBNull = false
            Me.columnRif.MaxLength = 15
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono1.MaxLength = 15
            Me.columnTelefono2.MaxLength = 15
            Me.columnTelefono3.MaxLength = 15
            Me.columnObservacion.MaxLength = 200
            Me.columnActiva.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaEmpresaRow() As sp_consultaEmpresaRow
            Return CType(Me.NewRow,sp_consultaEmpresaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaEmpresaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaEmpresaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaEmpresaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaEmpresaRowChanged(Me, New sp_consultaEmpresaRowChangeEvent(CType(e.Row,sp_consultaEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaEmpresaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaEmpresaRowChanging(Me, New sp_consultaEmpresaRowChangeEvent(CType(e.Row,sp_consultaEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaEmpresaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaEmpresaRowDeleted(Me, New sp_consultaEmpresaRowChangeEvent(CType(e.Row,sp_consultaEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaEmpresaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaEmpresaRowDeleting(Me, New sp_consultaEmpresaRowChangeEvent(CType(e.Row,sp_consultaEmpresaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaEmpresaRow(ByVal row As sp_consultaEmpresaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaEmpresaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_Movimientos_AsociadosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnEgreso As Global.System.Data.DataColumn
        
        Private columnOficina As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnIngreso As Global.System.Data.DataColumn
        
        Private columnNumeroDeposito As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnIdS As Global.System.Data.DataColumn
        
        Private columnNombreS As Global.System.Data.DataColumn
        
        Private columnIdC As Global.System.Data.DataColumn
        
        Private columnNombreC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_Movimientos_Asociados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EgresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEgreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OficinaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOficina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDepositoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDeposito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_Movimientos_AsociadosRow
            Get
                Return CType(Me.Rows(index),sp_consulta_Movimientos_AsociadosRow)
            End Get
        End Property
        
        Public Event sp_consulta_Movimientos_AsociadosRowChanging As sp_consulta_Movimientos_AsociadosRowChangeEventHandler
        
        Public Event sp_consulta_Movimientos_AsociadosRowChanged As sp_consulta_Movimientos_AsociadosRowChangeEventHandler
        
        Public Event sp_consulta_Movimientos_AsociadosRowDeleting As sp_consulta_Movimientos_AsociadosRowChangeEventHandler
        
        Public Event sp_consulta_Movimientos_AsociadosRowDeleted As sp_consulta_Movimientos_AsociadosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_Movimientos_AsociadosRow(ByVal row As sp_consulta_Movimientos_AsociadosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_Movimientos_AsociadosRow(ByVal Egreso As String, ByVal Oficina As String, ByVal Fecha As Date, ByVal Ingreso As String, ByVal NumeroDeposito As String, ByVal Banco As String, ByVal Descripcion As String, ByVal NombreS As String, ByVal NombreC As String) As sp_consulta_Movimientos_AsociadosRow
            Dim rowsp_consulta_Movimientos_AsociadosRow As sp_consulta_Movimientos_AsociadosRow = CType(Me.NewRow,sp_consulta_Movimientos_AsociadosRow)
            Dim columnValuesArray() As Object = New Object() {Egreso, Oficina, Fecha, Ingreso, NumeroDeposito, Banco, Descripcion, Nothing, NombreS, Nothing, NombreC}
            rowsp_consulta_Movimientos_AsociadosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_Movimientos_AsociadosRow)
            Return rowsp_consulta_Movimientos_AsociadosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_Movimientos_AsociadosDataTable = CType(MyBase.Clone,sp_consulta_Movimientos_AsociadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_Movimientos_AsociadosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEgreso = MyBase.Columns("Egreso")
            Me.columnOficina = MyBase.Columns("Oficina")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnIngreso = MyBase.Columns("Ingreso")
            Me.columnNumeroDeposito = MyBase.Columns("NumeroDeposito")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnIdS = MyBase.Columns("IdS")
            Me.columnNombreS = MyBase.Columns("NombreS")
            Me.columnIdC = MyBase.Columns("IdC")
            Me.columnNombreC = MyBase.Columns("NombreC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEgreso = New Global.System.Data.DataColumn("Egreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEgreso)
            Me.columnOficina = New Global.System.Data.DataColumn("Oficina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOficina)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnIngreso = New Global.System.Data.DataColumn("Ingreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngreso)
            Me.columnNumeroDeposito = New Global.System.Data.DataColumn("NumeroDeposito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDeposito)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnIdS = New Global.System.Data.DataColumn("IdS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdS)
            Me.columnNombreS = New Global.System.Data.DataColumn("NombreS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreS)
            Me.columnIdC = New Global.System.Data.DataColumn("IdC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdC)
            Me.columnNombreC = New Global.System.Data.DataColumn("NombreC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreC)
            Me.columnEgreso.MaxLength = 25
            Me.columnOficina.MaxLength = 50
            Me.columnFecha.AllowDBNull = false
            Me.columnIngreso.MaxLength = 25
            Me.columnNumeroDeposito.MaxLength = 50
            Me.columnBanco.AllowDBNull = false
            Me.columnBanco.MaxLength = 50
            Me.columnDescripcion.MaxLength = 250
            Me.columnIdS.AutoIncrement = true
            Me.columnIdS.AutoIncrementSeed = -1
            Me.columnIdS.AutoIncrementStep = -1
            Me.columnIdS.AllowDBNull = false
            Me.columnIdS.ReadOnly = true
            Me.columnNombreS.AllowDBNull = false
            Me.columnNombreS.MaxLength = 80
            Me.columnIdC.AutoIncrement = true
            Me.columnIdC.AutoIncrementSeed = -1
            Me.columnIdC.AutoIncrementStep = -1
            Me.columnIdC.AllowDBNull = false
            Me.columnIdC.ReadOnly = true
            Me.columnNombreC.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_Movimientos_AsociadosRow() As sp_consulta_Movimientos_AsociadosRow
            Return CType(Me.NewRow,sp_consulta_Movimientos_AsociadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_Movimientos_AsociadosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_Movimientos_AsociadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_Movimientos_AsociadosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Movimientos_AsociadosRowChanged(Me, New sp_consulta_Movimientos_AsociadosRowChangeEvent(CType(e.Row,sp_consulta_Movimientos_AsociadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_Movimientos_AsociadosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Movimientos_AsociadosRowChanging(Me, New sp_consulta_Movimientos_AsociadosRowChangeEvent(CType(e.Row,sp_consulta_Movimientos_AsociadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_Movimientos_AsociadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Movimientos_AsociadosRowDeleted(Me, New sp_consulta_Movimientos_AsociadosRowChangeEvent(CType(e.Row,sp_consulta_Movimientos_AsociadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_Movimientos_AsociadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_Movimientos_AsociadosRowDeleting(Me, New sp_consulta_Movimientos_AsociadosRowChangeEvent(CType(e.Row,sp_consulta_Movimientos_AsociadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_Movimientos_AsociadosRow(ByVal row As sp_consulta_Movimientos_AsociadosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_Movimientos_AsociadosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaUsuariosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLogin As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaUsuarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaUsuariosRow
            Get
                Return CType(Me.Rows(index),sp_consultaUsuariosRow)
            End Get
        End Property
        
        Public Event sp_consultaUsuariosRowChanging As sp_consultaUsuariosRowChangeEventHandler
        
        Public Event sp_consultaUsuariosRowChanged As sp_consultaUsuariosRowChangeEventHandler
        
        Public Event sp_consultaUsuariosRowDeleting As sp_consultaUsuariosRowChangeEventHandler
        
        Public Event sp_consultaUsuariosRowDeleted As sp_consultaUsuariosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaUsuariosRow(ByVal row As sp_consultaUsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaUsuariosRow(ByVal Login As String, ByVal nombre As String) As sp_consultaUsuariosRow
            Dim rowsp_consultaUsuariosRow As sp_consultaUsuariosRow = CType(Me.NewRow,sp_consultaUsuariosRow)
            Dim columnValuesArray() As Object = New Object() {Login, nombre}
            rowsp_consultaUsuariosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaUsuariosRow)
            Return rowsp_consultaUsuariosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLogin(ByVal Login As String) As sp_consultaUsuariosRow
            Return CType(Me.Rows.Find(New Object() {Login}),sp_consultaUsuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaUsuariosDataTable = CType(MyBase.Clone,sp_consultaUsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaUsuariosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLogin = MyBase.Columns("Login")
            Me.columnnombre = MyBase.Columns("nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogin)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLogin}, true))
            Me.columnLogin.AllowDBNull = false
            Me.columnLogin.Unique = true
            Me.columnLogin.MaxLength = 25
            Me.columnnombre.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaUsuariosRow() As sp_consultaUsuariosRow
            Return CType(Me.NewRow,sp_consultaUsuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaUsuariosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaUsuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaUsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaUsuariosRowChanged(Me, New sp_consultaUsuariosRowChangeEvent(CType(e.Row,sp_consultaUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaUsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaUsuariosRowChanging(Me, New sp_consultaUsuariosRowChangeEvent(CType(e.Row,sp_consultaUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaUsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaUsuariosRowDeleted(Me, New sp_consultaUsuariosRowChangeEvent(CType(e.Row,sp_consultaUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaUsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaUsuariosRowDeleting(Me, New sp_consultaUsuariosRowChangeEvent(CType(e.Row,sp_consultaUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaUsuariosRow(ByVal row As sp_consultaUsuariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaUsuariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_movimiento_ProductosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnExistencia As Global.System.Data.DataColumn
        
        Private columnVendidos As Global.System.Data.DataColumn
        
        Private columnPromedio As Global.System.Data.DataColumn
        
        Private columnMeses As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnBs As Global.System.Data.DataColumn
        
        Private columnCompras As Global.System.Data.DataColumn
        
        Private columnCompras2 As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_movimiento_Productos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendidosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendidos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PromedioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPromedio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComprasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Compras2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompras2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_movimiento_ProductosRow
            Get
                Return CType(Me.Rows(index),sp_movimiento_ProductosRow)
            End Get
        End Property
        
        Public Event sp_movimiento_ProductosRowChanging As sp_movimiento_ProductosRowChangeEventHandler
        
        Public Event sp_movimiento_ProductosRowChanged As sp_movimiento_ProductosRowChangeEventHandler
        
        Public Event sp_movimiento_ProductosRowDeleting As sp_movimiento_ProductosRowChangeEventHandler
        
        Public Event sp_movimiento_ProductosRowDeleted As sp_movimiento_ProductosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_movimiento_ProductosRow(ByVal row As sp_movimiento_ProductosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_movimiento_ProductosRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Marca As String, ByVal Modelo As String, ByVal Existencia As Decimal, ByVal Vendidos As Decimal, ByVal Promedio As Decimal, ByVal Meses As Decimal, ByVal Precio As Decimal, ByVal Bs As Decimal, ByVal Compras As Decimal, ByVal Compras2 As Decimal, ByVal PrecioVenta As Double) As sp_movimiento_ProductosRow
            Dim rowsp_movimiento_ProductosRow As sp_movimiento_ProductosRow = CType(Me.NewRow,sp_movimiento_ProductosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Marca, Modelo, Existencia, Vendidos, Promedio, Meses, Precio, Bs, Compras, Compras2, PrecioVenta}
            rowsp_movimiento_ProductosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_movimiento_ProductosRow)
            Return rowsp_movimiento_ProductosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_movimiento_ProductosRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_movimiento_ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_movimiento_ProductosDataTable = CType(MyBase.Clone,sp_movimiento_ProductosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_movimiento_ProductosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnExistencia = MyBase.Columns("Existencia")
            Me.columnVendidos = MyBase.Columns("Vendidos")
            Me.columnPromedio = MyBase.Columns("Promedio")
            Me.columnMeses = MyBase.Columns("Meses")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnBs = MyBase.Columns("Bs")
            Me.columnCompras = MyBase.Columns("Compras")
            Me.columnCompras2 = MyBase.Columns("Compras2")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnExistencia = New Global.System.Data.DataColumn("Existencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistencia)
            Me.columnVendidos = New Global.System.Data.DataColumn("Vendidos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendidos)
            Me.columnPromedio = New Global.System.Data.DataColumn("Promedio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPromedio)
            Me.columnMeses = New Global.System.Data.DataColumn("Meses", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeses)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnBs = New Global.System.Data.DataColumn("Bs", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBs)
            Me.columnCompras = New Global.System.Data.DataColumn("Compras", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompras)
            Me.columnCompras2 = New Global.System.Data.DataColumn("Compras2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompras2)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 204
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnExistencia.AllowDBNull = false
            Me.columnVendidos.ReadOnly = true
            Me.columnPromedio.ReadOnly = true
            Me.columnMeses.ReadOnly = true
            Me.columnPrecio.ReadOnly = true
            Me.columnBs.ReadOnly = true
            Me.columnCompras.ReadOnly = true
            Me.columnCompras2.ReadOnly = true
            Me.columnPrecioVenta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_movimiento_ProductosRow() As sp_movimiento_ProductosRow
            Return CType(Me.NewRow,sp_movimiento_ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_movimiento_ProductosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_movimiento_ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_movimiento_ProductosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_movimiento_ProductosRowChanged(Me, New sp_movimiento_ProductosRowChangeEvent(CType(e.Row,sp_movimiento_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_movimiento_ProductosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_movimiento_ProductosRowChanging(Me, New sp_movimiento_ProductosRowChangeEvent(CType(e.Row,sp_movimiento_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_movimiento_ProductosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_movimiento_ProductosRowDeleted(Me, New sp_movimiento_ProductosRowChangeEvent(CType(e.Row,sp_movimiento_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_movimiento_ProductosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_movimiento_ProductosRowDeleting(Me, New sp_movimiento_ProductosRowChangeEvent(CType(e.Row,sp_movimiento_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_movimiento_ProductosRow(ByVal row As sp_movimiento_ProductosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_movimiento_ProductosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosInvetarioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidadAnterior As Global.System.Data.DataColumn
        
        Private columnCantidadActual As Global.System.Data.DataColumn
        
        Private columnDIF As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnCodigoEstante As Global.System.Data.DataColumn
        
        Private columnCodigoCuarto As Global.System.Data.DataColumn
        
        Private columnCodigoAlmacen As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosInvetario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadAnteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadAnterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEstanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEstante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCuartoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCuarto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAlmacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAlmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosInvetarioRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosInvetarioRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosInvetarioRowChanging As sp_consultaProductosInvetarioRowChangeEventHandler
        
        Public Event sp_consultaProductosInvetarioRowChanged As sp_consultaProductosInvetarioRowChangeEventHandler
        
        Public Event sp_consultaProductosInvetarioRowDeleting As sp_consultaProductosInvetarioRowChangeEventHandler
        
        Public Event sp_consultaProductosInvetarioRowDeleted As sp_consultaProductosInvetarioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosInvetarioRow(ByVal row As sp_consultaProductosInvetarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosInvetarioRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Marca As String, ByVal Modelo As String, ByVal CantidadAnterior As Integer, ByVal CantidadActual As Integer, ByVal DIF As Integer, ByVal Ubicacion As String, ByVal CodigoTramo As Integer, ByVal PrecioVenta As Double, ByVal Observacion As String, ByVal CodigoFabrica As String) As sp_consultaProductosInvetarioRow
            Dim rowsp_consultaProductosInvetarioRow As sp_consultaProductosInvetarioRow = CType(Me.NewRow,sp_consultaProductosInvetarioRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Marca, Modelo, CantidadAnterior, CantidadActual, DIF, Ubicacion, CodigoTramo, Nothing, Nothing, Nothing, PrecioVenta, Observacion, CodigoFabrica}
            rowsp_consultaProductosInvetarioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosInvetarioRow)
            Return rowsp_consultaProductosInvetarioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosInvetarioDataTable = CType(MyBase.Clone,sp_consultaProductosInvetarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosInvetarioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidadAnterior = MyBase.Columns("CantidadAnterior")
            Me.columnCantidadActual = MyBase.Columns("CantidadActual")
            Me.columnDIF = MyBase.Columns("DIF")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnCodigoEstante = MyBase.Columns("CodigoEstante")
            Me.columnCodigoCuarto = MyBase.Columns("CodigoCuarto")
            Me.columnCodigoAlmacen = MyBase.Columns("CodigoAlmacen")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidadAnterior = New Global.System.Data.DataColumn("CantidadAnterior", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadAnterior)
            Me.columnCantidadActual = New Global.System.Data.DataColumn("CantidadActual", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadActual)
            Me.columnDIF = New Global.System.Data.DataColumn("DIF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIF)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnCodigoEstante = New Global.System.Data.DataColumn("CodigoEstante", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEstante)
            Me.columnCodigoCuarto = New Global.System.Data.DataColumn("CodigoCuarto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCuarto)
            Me.columnCodigoAlmacen = New Global.System.Data.DataColumn("CodigoAlmacen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAlmacen)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 151
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnCantidadAnterior.AllowDBNull = false
            Me.columnUbicacion.MaxLength = 83
            Me.columnCodigoEstante.AutoIncrement = true
            Me.columnCodigoEstante.AutoIncrementSeed = -1
            Me.columnCodigoEstante.AutoIncrementStep = -1
            Me.columnCodigoCuarto.AutoIncrement = true
            Me.columnCodigoCuarto.AutoIncrementSeed = -1
            Me.columnCodigoCuarto.AutoIncrementStep = -1
            Me.columnCodigoAlmacen.AutoIncrement = true
            Me.columnCodigoAlmacen.AutoIncrementSeed = -1
            Me.columnCodigoAlmacen.AutoIncrementStep = -1
            Me.columnObservacion.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosInvetarioRow() As sp_consultaProductosInvetarioRow
            Return CType(Me.NewRow,sp_consultaProductosInvetarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosInvetarioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosInvetarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosInvetarioRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosInvetarioRowChanged(Me, New sp_consultaProductosInvetarioRowChangeEvent(CType(e.Row,sp_consultaProductosInvetarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosInvetarioRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosInvetarioRowChanging(Me, New sp_consultaProductosInvetarioRowChangeEvent(CType(e.Row,sp_consultaProductosInvetarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosInvetarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosInvetarioRowDeleted(Me, New sp_consultaProductosInvetarioRowChangeEvent(CType(e.Row,sp_consultaProductosInvetarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosInvetarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosInvetarioRowDeleting(Me, New sp_consultaProductosInvetarioRowChangeEvent(CType(e.Row,sp_consultaProductosInvetarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosInvetarioRow(ByVal row As sp_consultaProductosInvetarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosInvetarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosParaInventarioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCantidad2 As Global.System.Data.DataColumn
        
        Private columnDif As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnCodigoEstante As Global.System.Data.DataColumn
        
        Private columnCodigoCuarto As Global.System.Data.DataColumn
        
        Private columnCodigoAlmacen As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosParaInventario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cantidad2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEstanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEstante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCuartoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCuarto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAlmacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAlmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosParaInventarioRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosParaInventarioRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosParaInventarioRowChanging As sp_consultaProductosParaInventarioRowChangeEventHandler
        
        Public Event sp_consultaProductosParaInventarioRowChanged As sp_consultaProductosParaInventarioRowChangeEventHandler
        
        Public Event sp_consultaProductosParaInventarioRowDeleting As sp_consultaProductosParaInventarioRowChangeEventHandler
        
        Public Event sp_consultaProductosParaInventarioRowDeleted As sp_consultaProductosParaInventarioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosParaInventarioRow(ByVal row As sp_consultaProductosParaInventarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosParaInventarioRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal Marca As String, ByVal Modelo As String, ByVal Cantidad As Integer, ByVal Cantidad2 As Integer, ByVal Dif As Integer, ByVal CantidadExistencia As Decimal, ByVal Ubicacion As String, ByVal CodigoTramo As Integer, ByVal PrecioVenta As Double, ByVal CodigoFabrica As String) As sp_consultaProductosParaInventarioRow
            Dim rowsp_consultaProductosParaInventarioRow As sp_consultaProductosParaInventarioRow = CType(Me.NewRow,sp_consultaProductosParaInventarioRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Marca, Modelo, Cantidad, Cantidad2, Dif, CantidadExistencia, Ubicacion, CodigoTramo, Nothing, Nothing, Nothing, PrecioVenta, CodigoFabrica}
            rowsp_consultaProductosParaInventarioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosParaInventarioRow)
            Return rowsp_consultaProductosParaInventarioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosParaInventarioDataTable = CType(MyBase.Clone,sp_consultaProductosParaInventarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosParaInventarioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCantidad2 = MyBase.Columns("Cantidad2")
            Me.columnDif = MyBase.Columns("Dif")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnCodigoEstante = MyBase.Columns("CodigoEstante")
            Me.columnCodigoCuarto = MyBase.Columns("CodigoCuarto")
            Me.columnCodigoAlmacen = MyBase.Columns("CodigoAlmacen")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCantidad2 = New Global.System.Data.DataColumn("Cantidad2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad2)
            Me.columnDif = New Global.System.Data.DataColumn("Dif", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDif)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnCodigoEstante = New Global.System.Data.DataColumn("CodigoEstante", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEstante)
            Me.columnCodigoCuarto = New Global.System.Data.DataColumn("CodigoCuarto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCuarto)
            Me.columnCodigoAlmacen = New Global.System.Data.DataColumn("CodigoAlmacen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAlmacen)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 151
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnCantidad.ReadOnly = true
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnUbicacion.MaxLength = 83
            Me.columnCodigoEstante.AutoIncrement = true
            Me.columnCodigoEstante.AutoIncrementSeed = -1
            Me.columnCodigoEstante.AutoIncrementStep = -1
            Me.columnCodigoCuarto.AutoIncrement = true
            Me.columnCodigoCuarto.AutoIncrementSeed = -1
            Me.columnCodigoCuarto.AutoIncrementStep = -1
            Me.columnCodigoAlmacen.AutoIncrement = true
            Me.columnCodigoAlmacen.AutoIncrementSeed = -1
            Me.columnCodigoAlmacen.AutoIncrementStep = -1
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosParaInventarioRow() As sp_consultaProductosParaInventarioRow
            Return CType(Me.NewRow,sp_consultaProductosParaInventarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosParaInventarioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosParaInventarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosParaInventarioRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaInventarioRowChanged(Me, New sp_consultaProductosParaInventarioRowChangeEvent(CType(e.Row,sp_consultaProductosParaInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosParaInventarioRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaInventarioRowChanging(Me, New sp_consultaProductosParaInventarioRowChangeEvent(CType(e.Row,sp_consultaProductosParaInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosParaInventarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaInventarioRowDeleted(Me, New sp_consultaProductosParaInventarioRowChangeEvent(CType(e.Row,sp_consultaProductosParaInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosParaInventarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosParaInventarioRowDeleting(Me, New sp_consultaProductosParaInventarioRowChangeEvent(CType(e.Row,sp_consultaProductosParaInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosParaInventarioRow(ByVal row As sp_consultaProductosParaInventarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosParaInventarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaProductosOcultosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaProductosOcultos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaProductosOcultosRow
            Get
                Return CType(Me.Rows(index),sp_consultaProductosOcultosRow)
            End Get
        End Property
        
        Public Event sp_consultaProductosOcultosRowChanging As sp_consultaProductosOcultosRowChangeEventHandler
        
        Public Event sp_consultaProductosOcultosRowChanged As sp_consultaProductosOcultosRowChangeEventHandler
        
        Public Event sp_consultaProductosOcultosRowDeleting As sp_consultaProductosOcultosRowChangeEventHandler
        
        Public Event sp_consultaProductosOcultosRowDeleted As sp_consultaProductosOcultosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaProductosOcultosRow(ByVal row As sp_consultaProductosOcultosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaProductosOcultosRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CodigoFabrica As String, ByVal MarcaProducto As String, ByVal Modelo As String, ByVal Cantidad As Integer, ByVal PrecioVenta As Double, ByVal Ubicacion As String, ByVal Observacion As String) As sp_consultaProductosOcultosRow
            Dim rowsp_consultaProductosOcultosRow As sp_consultaProductosOcultosRow = CType(Me.NewRow,sp_consultaProductosOcultosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CodigoFabrica, MarcaProducto, Modelo, Cantidad, PrecioVenta, Ubicacion, Observacion}
            rowsp_consultaProductosOcultosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaProductosOcultosRow)
            Return rowsp_consultaProductosOcultosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaProductosOcultosRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaProductosOcultosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaProductosOcultosDataTable = CType(MyBase.Clone,sp_consultaProductosOcultosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaProductosOcultosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnObservacion = MyBase.Columns("Observacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 151
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
            Me.columnMarcaProducto.ReadOnly = true
            Me.columnMarcaProducto.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 83
            Me.columnObservacion.ReadOnly = true
            Me.columnObservacion.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaProductosOcultosRow() As sp_consultaProductosOcultosRow
            Return CType(Me.NewRow,sp_consultaProductosOcultosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaProductosOcultosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaProductosOcultosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaProductosOcultosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosOcultosRowChanged(Me, New sp_consultaProductosOcultosRowChangeEvent(CType(e.Row,sp_consultaProductosOcultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaProductosOcultosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosOcultosRowChanging(Me, New sp_consultaProductosOcultosRowChangeEvent(CType(e.Row,sp_consultaProductosOcultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaProductosOcultosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosOcultosRowDeleted(Me, New sp_consultaProductosOcultosRowChangeEvent(CType(e.Row,sp_consultaProductosOcultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaProductosOcultosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaProductosOcultosRowDeleting(Me, New sp_consultaProductosOcultosRowChangeEvent(CType(e.Row,sp_consultaProductosOcultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaProductosOcultosRow(ByVal row As sp_consultaProductosOcultosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaProductosOcultosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_infoGeneralDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCant As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnFoto As Global.System.Data.DataColumn
        
        Private columnOEM As Global.System.Data.DataColumn
        
        Private columnVar1 As Global.System.Data.DataColumn
        
        Private columnVar2 As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnVendidos As Global.System.Data.DataColumn
        
        Private columnGrupo As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        Private columnOculto As Global.System.Data.DataColumn
        
        Private columnPorComplementar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_infoGeneral"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Var1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVar1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Var2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVar2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendidosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendidos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcultoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOculto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorComplementarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorComplementar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_infoGeneralRow
            Get
                Return CType(Me.Rows(index),sp_infoGeneralRow)
            End Get
        End Property
        
        Public Event sp_infoGeneralRowChanging As sp_infoGeneralRowChangeEventHandler
        
        Public Event sp_infoGeneralRowChanged As sp_infoGeneralRowChangeEventHandler
        
        Public Event sp_infoGeneralRowDeleting As sp_infoGeneralRowChangeEventHandler
        
        Public Event sp_infoGeneralRowDeleted As sp_infoGeneralRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_infoGeneralRow(ByVal row As sp_infoGeneralRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_infoGeneralRow( _
                    ByVal CodigoInterno As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Cant As Decimal,  _
                    ByVal Precio As Double,  _
                    ByVal Modelo As String,  _
                    ByVal Foto As String,  _
                    ByVal OEM As String,  _
                    ByVal Var1 As String,  _
                    ByVal Var2 As String,  _
                    ByVal Marca As String,  _
                    ByVal Vendidos As Integer,  _
                    ByVal Grupo As String,  _
                    ByVal Proveedor As String,  _
                    ByVal CodigoFabrica As String,  _
                    ByVal Oculto As Boolean,  _
                    ByVal PorComplementar As Boolean) As sp_infoGeneralRow
            Dim rowsp_infoGeneralRow As sp_infoGeneralRow = CType(Me.NewRow,sp_infoGeneralRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Descripcion, Cant, Precio, Modelo, Foto, OEM, Var1, Var2, Marca, Vendidos, Grupo, Proveedor, CodigoFabrica, Oculto, PorComplementar}
            rowsp_infoGeneralRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_infoGeneralRow)
            Return rowsp_infoGeneralRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_infoGeneralRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_infoGeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_infoGeneralDataTable = CType(MyBase.Clone,sp_infoGeneralDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_infoGeneralDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCant = MyBase.Columns("Cant")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnFoto = MyBase.Columns("Foto")
            Me.columnOEM = MyBase.Columns("OEM")
            Me.columnVar1 = MyBase.Columns("Var1")
            Me.columnVar2 = MyBase.Columns("Var2")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnVendidos = MyBase.Columns("Vendidos")
            Me.columnGrupo = MyBase.Columns("Grupo")
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
            Me.columnOculto = MyBase.Columns("Oculto")
            Me.columnPorComplementar = MyBase.Columns("PorComplementar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCant = New Global.System.Data.DataColumn("Cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnFoto = New Global.System.Data.DataColumn("Foto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto)
            Me.columnOEM = New Global.System.Data.DataColumn("OEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOEM)
            Me.columnVar1 = New Global.System.Data.DataColumn("Var1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVar1)
            Me.columnVar2 = New Global.System.Data.DataColumn("Var2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVar2)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnVendidos = New Global.System.Data.DataColumn("Vendidos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendidos)
            Me.columnGrupo = New Global.System.Data.DataColumn("Grupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupo)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnOculto = New Global.System.Data.DataColumn("Oculto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOculto)
            Me.columnPorComplementar = New Global.System.Data.DataColumn("PorComplementar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorComplementar)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnDescripcion.ReadOnly = true
            Me.columnDescripcion.MaxLength = 151
            Me.columnCant.AllowDBNull = false
            Me.columnPrecio.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnFoto.MaxLength = 200
            Me.columnOEM.MaxLength = 30
            Me.columnVar1.MaxLength = 30
            Me.columnVar2.MaxLength = 30
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnVendidos.ReadOnly = true
            Me.columnGrupo.ReadOnly = true
            Me.columnGrupo.MaxLength = 500
            Me.columnProveedor.ReadOnly = true
            Me.columnProveedor.MaxLength = 500
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_infoGeneralRow() As sp_infoGeneralRow
            Return CType(Me.NewRow,sp_infoGeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_infoGeneralRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_infoGeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_infoGeneralRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralRowChanged(Me, New sp_infoGeneralRowChangeEvent(CType(e.Row,sp_infoGeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_infoGeneralRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralRowChanging(Me, New sp_infoGeneralRowChangeEvent(CType(e.Row,sp_infoGeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_infoGeneralRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralRowDeleted(Me, New sp_infoGeneralRowChangeEvent(CType(e.Row,sp_infoGeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_infoGeneralRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralRowDeleting(Me, New sp_infoGeneralRowChangeEvent(CType(e.Row,sp_infoGeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_infoGeneralRow(ByVal row As sp_infoGeneralRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_infoGeneralDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaCatalogoModelos_UbicDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnPrecioVenta As Global.System.Data.DataColumn
        
        Private columnEmpaque As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnresaltarc As Global.System.Data.DataColumn
        
        Private columnresaltar As Global.System.Data.DataColumn
        
        Private columnUbic As Global.System.Data.DataColumn
        
        Private columncantTramo As Global.System.Data.DataColumn
        
        Private columnalmacen As Global.System.Data.DataColumn
        
        Private columncuarto As Global.System.Data.DataColumn
        
        Private columnestante As Global.System.Data.DataColumn
        
        Private columntramo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaCatalogoModelos_Ubic"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpaqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpaque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resaltarcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresaltarc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resaltarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresaltar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property almacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuartoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncuarto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaCatalogoModelos_UbicRow
            Get
                Return CType(Me.Rows(index),sp_consultaCatalogoModelos_UbicRow)
            End Get
        End Property
        
        Public Event sp_consultaCatalogoModelos_UbicRowChanging As sp_consultaCatalogoModelos_UbicRowChangeEventHandler
        
        Public Event sp_consultaCatalogoModelos_UbicRowChanged As sp_consultaCatalogoModelos_UbicRowChangeEventHandler
        
        Public Event sp_consultaCatalogoModelos_UbicRowDeleting As sp_consultaCatalogoModelos_UbicRowChangeEventHandler
        
        Public Event sp_consultaCatalogoModelos_UbicRowDeleted As sp_consultaCatalogoModelos_UbicRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaCatalogoModelos_UbicRow(ByVal row As sp_consultaCatalogoModelos_UbicRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaCatalogoModelos_UbicRow( _
                    ByVal CodigoInterno As String,  _
                    ByVal Nombre As String,  _
                    ByVal Observacion As String,  _
                    ByVal Marca As String,  _
                    ByVal Modelo As String,  _
                    ByVal PrecioVenta As Double,  _
                    ByVal Empaque As String,  _
                    ByVal CodigoProductoF As String,  _
                    ByVal MarcaProducto As String,  _
                    ByVal CantidadExistencia As Decimal,  _
                    ByVal resaltarc As Integer,  _
                    ByVal resaltar As Integer,  _
                    ByVal Ubic As String,  _
                    ByVal cantTramo As Integer,  _
                    ByVal almacen As String,  _
                    ByVal cuarto As String,  _
                    ByVal estante As String,  _
                    ByVal tramo As String) As sp_consultaCatalogoModelos_UbicRow
            Dim rowsp_consultaCatalogoModelos_UbicRow As sp_consultaCatalogoModelos_UbicRow = CType(Me.NewRow,sp_consultaCatalogoModelos_UbicRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Observacion, Marca, Modelo, PrecioVenta, Empaque, CodigoProductoF, MarcaProducto, CantidadExistencia, resaltarc, resaltar, Ubic, cantTramo, almacen, cuarto, estante, tramo}
            rowsp_consultaCatalogoModelos_UbicRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaCatalogoModelos_UbicRow)
            Return rowsp_consultaCatalogoModelos_UbicRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_consultaCatalogoModelos_UbicRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_consultaCatalogoModelos_UbicRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaCatalogoModelos_UbicDataTable = CType(MyBase.Clone,sp_consultaCatalogoModelos_UbicDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaCatalogoModelos_UbicDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
            Me.columnEmpaque = MyBase.Columns("Empaque")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnresaltarc = MyBase.Columns("resaltarc")
            Me.columnresaltar = MyBase.Columns("resaltar")
            Me.columnUbic = MyBase.Columns("Ubic")
            Me.columncantTramo = MyBase.Columns("cantTramo")
            Me.columnalmacen = MyBase.Columns("almacen")
            Me.columncuarto = MyBase.Columns("cuarto")
            Me.columnestante = MyBase.Columns("estante")
            Me.columntramo = MyBase.Columns("tramo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVenta)
            Me.columnEmpaque = New Global.System.Data.DataColumn("Empaque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpaque)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnresaltarc = New Global.System.Data.DataColumn("resaltarc", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresaltarc)
            Me.columnresaltar = New Global.System.Data.DataColumn("resaltar", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresaltar)
            Me.columnUbic = New Global.System.Data.DataColumn("Ubic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbic)
            Me.columncantTramo = New Global.System.Data.DataColumn("cantTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantTramo)
            Me.columnalmacen = New Global.System.Data.DataColumn("almacen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalmacen)
            Me.columncuarto = New Global.System.Data.DataColumn("cuarto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuarto)
            Me.columnestante = New Global.System.Data.DataColumn("estante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestante)
            Me.columntramo = New Global.System.Data.DataColumn("tramo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntramo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnObservacion.MaxLength = 100
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnPrecioVenta.AllowDBNull = false
            Me.columnEmpaque.MaxLength = 50
            Me.columnCodigoProductoF.ReadOnly = true
            Me.columnCodigoProductoF.MaxLength = 50
            Me.columnMarcaProducto.MaxLength = 50
            Me.columnCantidadExistencia.AllowDBNull = false
            Me.columnresaltarc.ReadOnly = true
            Me.columnresaltar.ReadOnly = true
            Me.columnUbic.ReadOnly = true
            Me.columnUbic.MaxLength = 83
            Me.columnalmacen.MaxLength = 20
            Me.columncuarto.MaxLength = 20
            Me.columnestante.MaxLength = 20
            Me.columntramo.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaCatalogoModelos_UbicRow() As sp_consultaCatalogoModelos_UbicRow
            Return CType(Me.NewRow,sp_consultaCatalogoModelos_UbicRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaCatalogoModelos_UbicRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaCatalogoModelos_UbicRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaCatalogoModelos_UbicRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelos_UbicRowChanged(Me, New sp_consultaCatalogoModelos_UbicRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelos_UbicRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaCatalogoModelos_UbicRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelos_UbicRowChanging(Me, New sp_consultaCatalogoModelos_UbicRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelos_UbicRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaCatalogoModelos_UbicRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelos_UbicRowDeleted(Me, New sp_consultaCatalogoModelos_UbicRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelos_UbicRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaCatalogoModelos_UbicRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaCatalogoModelos_UbicRowDeleting(Me, New sp_consultaCatalogoModelos_UbicRowChangeEvent(CType(e.Row,sp_consultaCatalogoModelos_UbicRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaCatalogoModelos_UbicRow(ByVal row As sp_consultaCatalogoModelos_UbicRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaCatalogoModelos_UbicDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_infoGeneralComprasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnCant As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnFoto As Global.System.Data.DataColumn
        
        Private columnOEM As Global.System.Data.DataColumn
        
        Private columnVar1 As Global.System.Data.DataColumn
        
        Private columnVar2 As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnVendidos As Global.System.Data.DataColumn
        
        Private columnGrupo As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        Private columnOculto As Global.System.Data.DataColumn
        
        Private columnPorComplementar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_infoGeneralCompras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Var1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVar1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Var2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVar2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendidosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendidos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcultoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOculto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorComplementarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorComplementar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_infoGeneralComprasRow
            Get
                Return CType(Me.Rows(index),sp_infoGeneralComprasRow)
            End Get
        End Property
        
        Public Event sp_infoGeneralComprasRowChanging As sp_infoGeneralComprasRowChangeEventHandler
        
        Public Event sp_infoGeneralComprasRowChanged As sp_infoGeneralComprasRowChangeEventHandler
        
        Public Event sp_infoGeneralComprasRowDeleting As sp_infoGeneralComprasRowChangeEventHandler
        
        Public Event sp_infoGeneralComprasRowDeleted As sp_infoGeneralComprasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_infoGeneralComprasRow(ByVal row As sp_infoGeneralComprasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_infoGeneralComprasRow( _
                    ByVal CodigoInterno As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Cant As Decimal,  _
                    ByVal Precio As Double,  _
                    ByVal Modelo As String,  _
                    ByVal Foto As String,  _
                    ByVal OEM As String,  _
                    ByVal Var1 As String,  _
                    ByVal Var2 As String,  _
                    ByVal Marca As String,  _
                    ByVal Vendidos As Integer,  _
                    ByVal Grupo As String,  _
                    ByVal Proveedor As String,  _
                    ByVal CodigoFabrica As String,  _
                    ByVal Oculto As Boolean,  _
                    ByVal PorComplementar As Boolean) As sp_infoGeneralComprasRow
            Dim rowsp_infoGeneralComprasRow As sp_infoGeneralComprasRow = CType(Me.NewRow,sp_infoGeneralComprasRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Descripcion, Cant, Precio, Modelo, Foto, OEM, Var1, Var2, Marca, Vendidos, Grupo, Proveedor, CodigoFabrica, Oculto, PorComplementar}
            rowsp_infoGeneralComprasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_infoGeneralComprasRow)
            Return rowsp_infoGeneralComprasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_infoGeneralComprasRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_infoGeneralComprasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_infoGeneralComprasDataTable = CType(MyBase.Clone,sp_infoGeneralComprasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_infoGeneralComprasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCant = MyBase.Columns("Cant")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnFoto = MyBase.Columns("Foto")
            Me.columnOEM = MyBase.Columns("OEM")
            Me.columnVar1 = MyBase.Columns("Var1")
            Me.columnVar2 = MyBase.Columns("Var2")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnVendidos = MyBase.Columns("Vendidos")
            Me.columnGrupo = MyBase.Columns("Grupo")
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
            Me.columnOculto = MyBase.Columns("Oculto")
            Me.columnPorComplementar = MyBase.Columns("PorComplementar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCant = New Global.System.Data.DataColumn("Cant", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCant)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnFoto = New Global.System.Data.DataColumn("Foto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto)
            Me.columnOEM = New Global.System.Data.DataColumn("OEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOEM)
            Me.columnVar1 = New Global.System.Data.DataColumn("Var1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVar1)
            Me.columnVar2 = New Global.System.Data.DataColumn("Var2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVar2)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnVendidos = New Global.System.Data.DataColumn("Vendidos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendidos)
            Me.columnGrupo = New Global.System.Data.DataColumn("Grupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrupo)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnOculto = New Global.System.Data.DataColumn("Oculto", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOculto)
            Me.columnPorComplementar = New Global.System.Data.DataColumn("PorComplementar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorComplementar)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnDescripcion.ReadOnly = true
            Me.columnDescripcion.MaxLength = 151
            Me.columnCant.AllowDBNull = false
            Me.columnPrecio.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnFoto.MaxLength = 200
            Me.columnOEM.MaxLength = 30
            Me.columnVar1.MaxLength = 30
            Me.columnVar2.MaxLength = 30
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 500
            Me.columnVendidos.ReadOnly = true
            Me.columnGrupo.ReadOnly = true
            Me.columnGrupo.MaxLength = 500
            Me.columnProveedor.ReadOnly = true
            Me.columnProveedor.MaxLength = 500
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_infoGeneralComprasRow() As sp_infoGeneralComprasRow
            Return CType(Me.NewRow,sp_infoGeneralComprasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_infoGeneralComprasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_infoGeneralComprasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_infoGeneralComprasRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralComprasRowChanged(Me, New sp_infoGeneralComprasRowChangeEvent(CType(e.Row,sp_infoGeneralComprasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_infoGeneralComprasRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralComprasRowChanging(Me, New sp_infoGeneralComprasRowChangeEvent(CType(e.Row,sp_infoGeneralComprasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_infoGeneralComprasRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralComprasRowDeleted(Me, New sp_infoGeneralComprasRowChangeEvent(CType(e.Row,sp_infoGeneralComprasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_infoGeneralComprasRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_infoGeneralComprasRowDeleting(Me, New sp_infoGeneralComprasRowChangeEvent(CType(e.Row,sp_infoGeneralComprasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_infoGeneralComprasRow(ByVal row As sp_infoGeneralComprasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_infoGeneralComprasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaPedidoClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoPedido As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnFacturado As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnDiasCred As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnchequeado As Global.System.Data.DataColumn
        
        Private columnAutorizado As Global.System.Data.DataColumn
        
        Private columnBultos As Global.System.Data.DataColumn
        
        Private columnModalidadEnvio As Global.System.Data.DataColumn
        
        Private columnObservacionInterna As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaPedidoCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasCred
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chequeadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchequeado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModalidadEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModalidadEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionInternaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacionInterna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaPedidoClienteRow
            Get
                Return CType(Me.Rows(index),sp_consultaPedidoClienteRow)
            End Get
        End Property
        
        Public Event sp_consultaPedidoClienteRowChanging As sp_consultaPedidoClienteRowChangeEventHandler
        
        Public Event sp_consultaPedidoClienteRowChanged As sp_consultaPedidoClienteRowChangeEventHandler
        
        Public Event sp_consultaPedidoClienteRowDeleting As sp_consultaPedidoClienteRowChangeEventHandler
        
        Public Event sp_consultaPedidoClienteRowDeleted As sp_consultaPedidoClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaPedidoClienteRow(ByVal row As sp_consultaPedidoClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaPedidoClienteRow(ByVal Fecha As Date, ByVal CodigoCliente As Integer, ByVal MontoTotal As Double, ByVal Facturado As Boolean, ByVal Vendedor As Integer, ByVal DiasCred As Integer, ByVal Observacion As String, ByVal chequeado As Boolean, ByVal Autorizado As Boolean, ByVal Bultos As String, ByVal ModalidadEnvio As String, ByVal ObservacionInterna As String) As sp_consultaPedidoClienteRow
            Dim rowsp_consultaPedidoClienteRow As sp_consultaPedidoClienteRow = CType(Me.NewRow,sp_consultaPedidoClienteRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fecha, CodigoCliente, MontoTotal, Facturado, Vendedor, DiasCred, Observacion, chequeado, Autorizado, Bultos, ModalidadEnvio, ObservacionInterna}
            rowsp_consultaPedidoClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaPedidoClienteRow)
            Return rowsp_consultaPedidoClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoPedido(ByVal CodigoPedido As Integer) As sp_consultaPedidoClienteRow
            Return CType(Me.Rows.Find(New Object() {CodigoPedido}),sp_consultaPedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaPedidoClienteDataTable = CType(MyBase.Clone,sp_consultaPedidoClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaPedidoClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoPedido = MyBase.Columns("CodigoPedido")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnFacturado = MyBase.Columns("Facturado")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnDiasCred = MyBase.Columns("DiasCred")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnchequeado = MyBase.Columns("chequeado")
            Me.columnAutorizado = MyBase.Columns("Autorizado")
            Me.columnBultos = MyBase.Columns("Bultos")
            Me.columnModalidadEnvio = MyBase.Columns("ModalidadEnvio")
            Me.columnObservacionInterna = MyBase.Columns("ObservacionInterna")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoPedido = New Global.System.Data.DataColumn("CodigoPedido", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPedido)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnFacturado = New Global.System.Data.DataColumn("Facturado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturado)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnDiasCred = New Global.System.Data.DataColumn("DiasCred", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCred)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnchequeado = New Global.System.Data.DataColumn("chequeado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchequeado)
            Me.columnAutorizado = New Global.System.Data.DataColumn("Autorizado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizado)
            Me.columnBultos = New Global.System.Data.DataColumn("Bultos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultos)
            Me.columnModalidadEnvio = New Global.System.Data.DataColumn("ModalidadEnvio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModalidadEnvio)
            Me.columnObservacionInterna = New Global.System.Data.DataColumn("ObservacionInterna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacionInterna)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoPedido}, true))
            Me.columnCodigoPedido.AutoIncrement = true
            Me.columnCodigoPedido.AutoIncrementSeed = -1
            Me.columnCodigoPedido.AutoIncrementStep = -1
            Me.columnCodigoPedido.AllowDBNull = false
            Me.columnCodigoPedido.ReadOnly = true
            Me.columnCodigoPedido.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnMontoTotal.AllowDBNull = false
            Me.columnFacturado.AllowDBNull = false
            Me.columnObservacion.MaxLength = 250
            Me.columnBultos.MaxLength = 100
            Me.columnModalidadEnvio.MaxLength = 50
            Me.columnObservacionInterna.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaPedidoClienteRow() As sp_consultaPedidoClienteRow
            Return CType(Me.NewRow,sp_consultaPedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaPedidoClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaPedidoClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaPedidoClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowChanged(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaPedidoClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowChanging(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaPedidoClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowDeleted(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaPedidoClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaPedidoClienteRowDeleting(Me, New sp_consultaPedidoClienteRowChangeEvent(CType(e.Row,sp_consultaPedidoClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaPedidoClienteRow(ByVal row As sp_consultaPedidoClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaPedidoClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaNotasCreditoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNroControl As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCodigoNotaCredito As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnControl As Global.System.Data.DataColumn
        
        Private columnControl2 As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaNotasCredito"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoNotaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoNotaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Control2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnControl2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaNotasCreditoRow
            Get
                Return CType(Me.Rows(index),sp_consultaNotasCreditoRow)
            End Get
        End Property
        
        Public Event sp_consultaNotasCreditoRowChanging As sp_consultaNotasCreditoRowChangeEventHandler
        
        Public Event sp_consultaNotasCreditoRowChanged As sp_consultaNotasCreditoRowChangeEventHandler
        
        Public Event sp_consultaNotasCreditoRowDeleting As sp_consultaNotasCreditoRowChangeEventHandler
        
        Public Event sp_consultaNotasCreditoRowDeleted As sp_consultaNotasCreditoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaNotasCreditoRow(ByVal row As sp_consultaNotasCreditoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaNotasCreditoRow(ByVal NroControl As Integer, ByVal ControlInicio As Decimal, ByVal Fecha As Date, ByVal RazonSocial As String, ByVal Monto As Double, ByVal Observacion As String, ByVal Iva As Decimal, ByVal Tipo As Boolean, ByVal MontoTotal As Decimal, ByVal Control As String, ByVal Control2 As String, ByVal Usuario As String, ByVal CodigoCliente As Integer) As sp_consultaNotasCreditoRow
            Dim rowsp_consultaNotasCreditoRow As sp_consultaNotasCreditoRow = CType(Me.NewRow,sp_consultaNotasCreditoRow)
            Dim columnValuesArray() As Object = New Object() {NroControl, ControlInicio, Fecha, RazonSocial, Monto, Observacion, Iva, Tipo, Nothing, MontoTotal, Control, Control2, Usuario, CodigoCliente}
            rowsp_consultaNotasCreditoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaNotasCreditoRow)
            Return rowsp_consultaNotasCreditoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaNotasCreditoDataTable = CType(MyBase.Clone,sp_consultaNotasCreditoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaNotasCreditoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNroControl = MyBase.Columns("NroControl")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCodigoNotaCredito = MyBase.Columns("CodigoNotaCredito")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnControl = MyBase.Columns("Control")
            Me.columnControl2 = MyBase.Columns("Control2")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNroControl = New Global.System.Data.DataColumn("NroControl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroControl)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCodigoNotaCredito = New Global.System.Data.DataColumn("CodigoNotaCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoNotaCredito)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnControl = New Global.System.Data.DataColumn("Control", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControl)
            Me.columnControl2 = New Global.System.Data.DataColumn("Control2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControl2)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial.MaxLength = 100
            Me.columnObservacion.MaxLength = 200
            Me.columnCodigoNotaCredito.AutoIncrement = true
            Me.columnCodigoNotaCredito.AutoIncrementSeed = -1
            Me.columnCodigoNotaCredito.AutoIncrementStep = -1
            Me.columnCodigoNotaCredito.ReadOnly = true
            Me.columnControl.ReadOnly = true
            Me.columnControl.MaxLength = 20
            Me.columnControl2.ReadOnly = true
            Me.columnControl2.MaxLength = 20
            Me.columnUsuario.ReadOnly = true
            Me.columnUsuario.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaNotasCreditoRow() As sp_consultaNotasCreditoRow
            Return CType(Me.NewRow,sp_consultaNotasCreditoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaNotasCreditoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaNotasCreditoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaNotasCreditoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotasCreditoRowChanged(Me, New sp_consultaNotasCreditoRowChangeEvent(CType(e.Row,sp_consultaNotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaNotasCreditoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotasCreditoRowChanging(Me, New sp_consultaNotasCreditoRowChangeEvent(CType(e.Row,sp_consultaNotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaNotasCreditoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotasCreditoRowDeleted(Me, New sp_consultaNotasCreditoRowChangeEvent(CType(e.Row,sp_consultaNotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaNotasCreditoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaNotasCreditoRowDeleting(Me, New sp_consultaNotasCreditoRowChangeEvent(CType(e.Row,sp_consultaNotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaNotasCreditoRow(ByVal row As sp_consultaNotasCreditoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaNotasCreditoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaFactVentasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnControlInicio As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnControl As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaFactVentas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlInicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlInicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaFactVentasRow
            Get
                Return CType(Me.Rows(index),sp_consultaFactVentasRow)
            End Get
        End Property
        
        Public Event sp_consultaFactVentasRowChanging As sp_consultaFactVentasRowChangeEventHandler
        
        Public Event sp_consultaFactVentasRowChanged As sp_consultaFactVentasRowChangeEventHandler
        
        Public Event sp_consultaFactVentasRowDeleting As sp_consultaFactVentasRowChangeEventHandler
        
        Public Event sp_consultaFactVentasRowDeleted As sp_consultaFactVentasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaFactVentasRow(ByVal row As sp_consultaFactVentasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaFactVentasRow(ByVal Fecha As Date, ByVal ControlInicio As Decimal, ByVal RazonSocial As String, ByVal MontoTotal As Decimal, ByVal Iva As Decimal, ByVal Control As String, ByVal CodigoCliente As Integer) As sp_consultaFactVentasRow
            Dim rowsp_consultaFactVentasRow As sp_consultaFactVentasRow = CType(Me.NewRow,sp_consultaFactVentasRow)
            Dim columnValuesArray() As Object = New Object() {Fecha, ControlInicio, RazonSocial, MontoTotal, Iva, Nothing, Control, CodigoCliente}
            rowsp_consultaFactVentasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaFactVentasRow)
            Return rowsp_consultaFactVentasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaFactVentasDataTable = CType(MyBase.Clone,sp_consultaFactVentasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaFactVentasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnControlInicio = MyBase.Columns("ControlInicio")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnControl = MyBase.Columns("Control")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnControlInicio = New Global.System.Data.DataColumn("ControlInicio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlInicio)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnControl = New Global.System.Data.DataColumn("Control", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControl)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial.MaxLength = 100
            Me.columnNumeroFactura.AutoIncrement = true
            Me.columnNumeroFactura.AutoIncrementSeed = -1
            Me.columnNumeroFactura.AutoIncrementStep = -1
            Me.columnNumeroFactura.ReadOnly = true
            Me.columnControl.ReadOnly = true
            Me.columnControl.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaFactVentasRow() As sp_consultaFactVentasRow
            Return CType(Me.NewRow,sp_consultaFactVentasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaFactVentasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaFactVentasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaFactVentasRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactVentasRowChanged(Me, New sp_consultaFactVentasRowChangeEvent(CType(e.Row,sp_consultaFactVentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaFactVentasRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactVentasRowChanging(Me, New sp_consultaFactVentasRowChangeEvent(CType(e.Row,sp_consultaFactVentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaFactVentasRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactVentasRowDeleted(Me, New sp_consultaFactVentasRowChangeEvent(CType(e.Row,sp_consultaFactVentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaFactVentasRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaFactVentasRowDeleting(Me, New sp_consultaFactVentasRowChangeEvent(CType(e.Row,sp_consultaFactVentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaFactVentasRow(ByVal row As sp_consultaFactVentasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaFactVentasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaDiferenciasInventarioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadAnterior As Global.System.Data.DataColumn
        
        Private columnCantidadActual As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaDiferenciasInventario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadAnteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadAnterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaDiferenciasInventarioRow
            Get
                Return CType(Me.Rows(index),sp_consultaDiferenciasInventarioRow)
            End Get
        End Property
        
        Public Event sp_consultaDiferenciasInventarioRowChanging As sp_consultaDiferenciasInventarioRowChangeEventHandler
        
        Public Event sp_consultaDiferenciasInventarioRowChanged As sp_consultaDiferenciasInventarioRowChangeEventHandler
        
        Public Event sp_consultaDiferenciasInventarioRowDeleting As sp_consultaDiferenciasInventarioRowChangeEventHandler
        
        Public Event sp_consultaDiferenciasInventarioRowDeleted As sp_consultaDiferenciasInventarioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaDiferenciasInventarioRow(ByVal row As sp_consultaDiferenciasInventarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaDiferenciasInventarioRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CantidadAnterior As Integer, ByVal CantidadActual As Integer, ByVal Observacion As String, ByVal CodigoTramo As Integer, ByVal Ubicacion As String, ByVal Precio As Double, ByVal Modelo As String) As sp_consultaDiferenciasInventarioRow
            Dim rowsp_consultaDiferenciasInventarioRow As sp_consultaDiferenciasInventarioRow = CType(Me.NewRow,sp_consultaDiferenciasInventarioRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CantidadAnterior, CantidadActual, Observacion, CodigoTramo, Ubicacion, Precio, Modelo}
            rowsp_consultaDiferenciasInventarioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaDiferenciasInventarioRow)
            Return rowsp_consultaDiferenciasInventarioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaDiferenciasInventarioDataTable = CType(MyBase.Clone,sp_consultaDiferenciasInventarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaDiferenciasInventarioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadAnterior = MyBase.Columns("CantidadAnterior")
            Me.columnCantidadActual = MyBase.Columns("CantidadActual")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnModelo = MyBase.Columns("Modelo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadAnterior = New Global.System.Data.DataColumn("CantidadAnterior", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadAnterior)
            Me.columnCantidadActual = New Global.System.Data.DataColumn("CantidadActual", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadActual)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 150
            Me.columnCantidadAnterior.AllowDBNull = false
            Me.columnObservacion.AllowDBNull = false
            Me.columnObservacion.MaxLength = 200
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 83
            Me.columnPrecio.AllowDBNull = false
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaDiferenciasInventarioRow() As sp_consultaDiferenciasInventarioRow
            Return CType(Me.NewRow,sp_consultaDiferenciasInventarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaDiferenciasInventarioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaDiferenciasInventarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaDiferenciasInventarioRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaDiferenciasInventarioRowChanged(Me, New sp_consultaDiferenciasInventarioRowChangeEvent(CType(e.Row,sp_consultaDiferenciasInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaDiferenciasInventarioRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaDiferenciasInventarioRowChanging(Me, New sp_consultaDiferenciasInventarioRowChangeEvent(CType(e.Row,sp_consultaDiferenciasInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaDiferenciasInventarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaDiferenciasInventarioRowDeleted(Me, New sp_consultaDiferenciasInventarioRowChangeEvent(CType(e.Row,sp_consultaDiferenciasInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaDiferenciasInventarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaDiferenciasInventarioRowDeleting(Me, New sp_consultaDiferenciasInventarioRowChangeEvent(CType(e.Row,sp_consultaDiferenciasInventarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaDiferenciasInventarioRow(ByVal row As sp_consultaDiferenciasInventarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaDiferenciasInventarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_ubicacion_productosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columncodigoF As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnaqui As Global.System.Data.DataColumn
        
        Private columnCodigoAlmacen As Global.System.Data.DataColumn
        
        Private columnCodigoCuarto As Global.System.Data.DataColumn
        
        Private columnCodigoEstante As Global.System.Data.DataColumn
        
        Private columnCodigoTramo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnaqui2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_ubicacion_productos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property aquiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaqui
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAlmacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAlmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCuartoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCuarto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEstanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEstante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property aqui2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaqui2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_ubicacion_productosRow
            Get
                Return CType(Me.Rows(index),sp_consulta_ubicacion_productosRow)
            End Get
        End Property
        
        Public Event sp_consulta_ubicacion_productosRowChanging As sp_consulta_ubicacion_productosRowChangeEventHandler
        
        Public Event sp_consulta_ubicacion_productosRowChanged As sp_consulta_ubicacion_productosRowChangeEventHandler
        
        Public Event sp_consulta_ubicacion_productosRowDeleting As sp_consulta_ubicacion_productosRowChangeEventHandler
        
        Public Event sp_consulta_ubicacion_productosRowDeleted As sp_consulta_ubicacion_productosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_ubicacion_productosRow(ByVal row As sp_consulta_ubicacion_productosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_ubicacion_productosRow(ByVal CodigoProducto As String, ByVal codigoF As String, ByVal Nombre As String, ByVal Marca As String, ByVal Modelo As String, ByVal CantidadExistencia As Decimal, ByVal aqui As Integer, ByVal CodigoAlmacen As Integer, ByVal CodigoCuarto As Integer, ByVal CodigoEstante As Integer, ByVal CodigoTramo As Integer, ByVal Ubicacion As String, ByVal aqui2 As Integer) As sp_consulta_ubicacion_productosRow
            Dim rowsp_consulta_ubicacion_productosRow As sp_consulta_ubicacion_productosRow = CType(Me.NewRow,sp_consulta_ubicacion_productosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoProducto, codigoF, Nombre, Marca, Modelo, CantidadExistencia, aqui, CodigoAlmacen, CodigoCuarto, CodigoEstante, CodigoTramo, Ubicacion, aqui2}
            rowsp_consulta_ubicacion_productosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_ubicacion_productosRow)
            Return rowsp_consulta_ubicacion_productosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_ubicacion_productosDataTable = CType(MyBase.Clone,sp_consulta_ubicacion_productosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_ubicacion_productosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columncodigoF = MyBase.Columns("codigoF")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnaqui = MyBase.Columns("aqui")
            Me.columnCodigoAlmacen = MyBase.Columns("CodigoAlmacen")
            Me.columnCodigoCuarto = MyBase.Columns("CodigoCuarto")
            Me.columnCodigoEstante = MyBase.Columns("CodigoEstante")
            Me.columnCodigoTramo = MyBase.Columns("CodigoTramo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnaqui2 = MyBase.Columns("aqui2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columncodigoF = New Global.System.Data.DataColumn("codigoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoF)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnaqui = New Global.System.Data.DataColumn("aqui", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaqui)
            Me.columnCodigoAlmacen = New Global.System.Data.DataColumn("CodigoAlmacen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAlmacen)
            Me.columnCodigoCuarto = New Global.System.Data.DataColumn("CodigoCuarto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCuarto)
            Me.columnCodigoEstante = New Global.System.Data.DataColumn("CodigoEstante", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEstante)
            Me.columnCodigoTramo = New Global.System.Data.DataColumn("CodigoTramo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTramo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnaqui2 = New Global.System.Data.DataColumn("aqui2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaqui2)
            Me.columnCodigoProducto.AllowDBNull = false
            Me.columnCodigoProducto.MaxLength = 25
            Me.columncodigoF.ReadOnly = true
            Me.columncodigoF.MaxLength = 50
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 151
            Me.columnMarca.ReadOnly = true
            Me.columnMarca.MaxLength = 50
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 203
            Me.columnaqui.AllowDBNull = false
            Me.columnCodigoTramo.AllowDBNull = false
            Me.columnUbicacion.ReadOnly = true
            Me.columnUbicacion.MaxLength = 83
            Me.columnaqui2.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_ubicacion_productosRow() As sp_consulta_ubicacion_productosRow
            Return CType(Me.NewRow,sp_consulta_ubicacion_productosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_ubicacion_productosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_ubicacion_productosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_ubicacion_productosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_ubicacion_productosRowChanged(Me, New sp_consulta_ubicacion_productosRowChangeEvent(CType(e.Row,sp_consulta_ubicacion_productosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_ubicacion_productosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_ubicacion_productosRowChanging(Me, New sp_consulta_ubicacion_productosRowChangeEvent(CType(e.Row,sp_consulta_ubicacion_productosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_ubicacion_productosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_ubicacion_productosRowDeleted(Me, New sp_consulta_ubicacion_productosRowChangeEvent(CType(e.Row,sp_consulta_ubicacion_productosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_ubicacion_productosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_ubicacion_productosRowDeleting(Me, New sp_consulta_ubicacion_productosRowChangeEvent(CType(e.Row,sp_consulta_ubicacion_productosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_ubicacion_productosRow(ByVal row As sp_consulta_ubicacion_productosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_ubicacion_productosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consulta_actividades_SINPRODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnActividad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consulta_actividades_SINPRO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActividadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActividad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consulta_actividades_SINPRORow
            Get
                Return CType(Me.Rows(index),sp_consulta_actividades_SINPRORow)
            End Get
        End Property
        
        Public Event sp_consulta_actividades_SINPRORowChanging As sp_consulta_actividades_SINPRORowChangeEventHandler
        
        Public Event sp_consulta_actividades_SINPRORowChanged As sp_consulta_actividades_SINPRORowChangeEventHandler
        
        Public Event sp_consulta_actividades_SINPRORowDeleting As sp_consulta_actividades_SINPRORowChangeEventHandler
        
        Public Event sp_consulta_actividades_SINPRORowDeleted As sp_consulta_actividades_SINPRORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consulta_actividades_SINPRORow(ByVal row As sp_consulta_actividades_SINPRORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consulta_actividades_SINPRORow(ByVal Usuario As String, ByVal Fecha As Date, ByVal Actividad As String) As sp_consulta_actividades_SINPRORow
            Dim rowsp_consulta_actividades_SINPRORow As sp_consulta_actividades_SINPRORow = CType(Me.NewRow,sp_consulta_actividades_SINPRORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Usuario, Fecha, Actividad}
            rowsp_consulta_actividades_SINPRORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consulta_actividades_SINPRORow)
            Return rowsp_consulta_actividades_SINPRORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As sp_consulta_actividades_SINPRORow
            Return CType(Me.Rows.Find(New Object() {Id}),sp_consulta_actividades_SINPRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consulta_actividades_SINPRODataTable = CType(MyBase.Clone,sp_consulta_actividades_SINPRODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consulta_actividades_SINPRODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnActividad = MyBase.Columns("Actividad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnActividad = New Global.System.Data.DataColumn("Actividad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActividad)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnUsuario.AllowDBNull = false
            Me.columnUsuario.MaxLength = 25
            Me.columnFecha.AllowDBNull = false
            Me.columnActividad.AllowDBNull = false
            Me.columnActividad.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consulta_actividades_SINPRORow() As sp_consulta_actividades_SINPRORow
            Return CType(Me.NewRow,sp_consulta_actividades_SINPRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consulta_actividades_SINPRORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consulta_actividades_SINPRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consulta_actividades_SINPRORowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_actividades_SINPRORowChanged(Me, New sp_consulta_actividades_SINPRORowChangeEvent(CType(e.Row,sp_consulta_actividades_SINPRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consulta_actividades_SINPRORowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_actividades_SINPRORowChanging(Me, New sp_consulta_actividades_SINPRORowChangeEvent(CType(e.Row,sp_consulta_actividades_SINPRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consulta_actividades_SINPRORowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consulta_actividades_SINPRORowDeleted(Me, New sp_consulta_actividades_SINPRORowChangeEvent(CType(e.Row,sp_consulta_actividades_SINPRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consulta_actividades_SINPRORowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consulta_actividades_SINPRORowDeleting(Me, New sp_consulta_actividades_SINPRORowChangeEvent(CType(e.Row,sp_consulta_actividades_SINPRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consulta_actividades_SINPRORow(ByVal row As sp_consulta_actividades_SINPRORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consulta_actividades_SINPRODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_consultaRecibos2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoRecibo As Global.System.Data.DataColumn
        
        Private columnNControl As Global.System.Data.DataColumn
        
        Private columncodigoCliente As Global.System.Data.DataColumn
        
        Private columnrazonsocial As Global.System.Data.DataColumn
        
        Private columncontEspecial As Global.System.Data.DataColumn
        
        Private columnNDeposito As Global.System.Data.DataColumn
        
        Private columnphrase As Global.System.Data.DataColumn
        
        Private columnPD As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnConfirmado As Global.System.Data.DataColumn
        
        Private columnComprobanteRecibido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_consultaRecibos2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property razonsocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrazonsocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contEspecialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontEspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NDepositoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNDeposito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property phraseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphrase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComprobanteRecibidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComprobanteRecibido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_consultaRecibos2Row
            Get
                Return CType(Me.Rows(index),sp_consultaRecibos2Row)
            End Get
        End Property
        
        Public Event sp_consultaRecibos2RowChanging As sp_consultaRecibos2RowChangeEventHandler
        
        Public Event sp_consultaRecibos2RowChanged As sp_consultaRecibos2RowChangeEventHandler
        
        Public Event sp_consultaRecibos2RowDeleting As sp_consultaRecibos2RowChangeEventHandler
        
        Public Event sp_consultaRecibos2RowDeleted As sp_consultaRecibos2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_consultaRecibos2Row(ByVal row As sp_consultaRecibos2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_consultaRecibos2Row(ByVal CodigoRecibo As String, ByVal NControl As String, ByVal codigoCliente As Integer, ByVal razonsocial As String, ByVal contEspecial As Boolean, ByVal NDeposito As String, ByVal phrase As String, ByVal PD As Boolean, ByVal Monto As String, ByVal Confirmado As Boolean, ByVal ComprobanteRecibido As Integer) As sp_consultaRecibos2Row
            Dim rowsp_consultaRecibos2Row As sp_consultaRecibos2Row = CType(Me.NewRow,sp_consultaRecibos2Row)
            Dim columnValuesArray() As Object = New Object() {CodigoRecibo, NControl, codigoCliente, razonsocial, contEspecial, NDeposito, phrase, PD, Monto, Confirmado, ComprobanteRecibido}
            rowsp_consultaRecibos2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_consultaRecibos2Row)
            Return rowsp_consultaRecibos2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_consultaRecibos2DataTable = CType(MyBase.Clone,sp_consultaRecibos2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_consultaRecibos2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoRecibo = MyBase.Columns("CodigoRecibo")
            Me.columnNControl = MyBase.Columns("NControl")
            Me.columncodigoCliente = MyBase.Columns("codigoCliente")
            Me.columnrazonsocial = MyBase.Columns("razonsocial")
            Me.columncontEspecial = MyBase.Columns("contEspecial")
            Me.columnNDeposito = MyBase.Columns("NDeposito")
            Me.columnphrase = MyBase.Columns("phrase")
            Me.columnPD = MyBase.Columns("PD")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnConfirmado = MyBase.Columns("Confirmado")
            Me.columnComprobanteRecibido = MyBase.Columns("ComprobanteRecibido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoRecibo = New Global.System.Data.DataColumn("CodigoRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoRecibo)
            Me.columnNControl = New Global.System.Data.DataColumn("NControl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNControl)
            Me.columncodigoCliente = New Global.System.Data.DataColumn("codigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoCliente)
            Me.columnrazonsocial = New Global.System.Data.DataColumn("razonsocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrazonsocial)
            Me.columncontEspecial = New Global.System.Data.DataColumn("contEspecial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontEspecial)
            Me.columnNDeposito = New Global.System.Data.DataColumn("NDeposito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNDeposito)
            Me.columnphrase = New Global.System.Data.DataColumn("phrase", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphrase)
            Me.columnPD = New Global.System.Data.DataColumn("PD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPD)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnConfirmado = New Global.System.Data.DataColumn("Confirmado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmado)
            Me.columnComprobanteRecibido = New Global.System.Data.DataColumn("ComprobanteRecibido", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComprobanteRecibido)
            Me.columnCodigoRecibo.MaxLength = 15
            Me.columnNControl.AllowDBNull = false
            Me.columnNControl.MaxLength = 10
            Me.columnrazonsocial.MaxLength = 100
            Me.columnNDeposito.MaxLength = 50
            Me.columnphrase.MaxLength = 2147483647
            Me.columnMonto.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_consultaRecibos2Row() As sp_consultaRecibos2Row
            Return CType(Me.NewRow,sp_consultaRecibos2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_consultaRecibos2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_consultaRecibos2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_consultaRecibos2RowChangedEvent) Is Nothing) Then
                RaiseEvent sp_consultaRecibos2RowChanged(Me, New sp_consultaRecibos2RowChangeEvent(CType(e.Row,sp_consultaRecibos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_consultaRecibos2RowChangingEvent) Is Nothing) Then
                RaiseEvent sp_consultaRecibos2RowChanging(Me, New sp_consultaRecibos2RowChangeEvent(CType(e.Row,sp_consultaRecibos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_consultaRecibos2RowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_consultaRecibos2RowDeleted(Me, New sp_consultaRecibos2RowChangeEvent(CType(e.Row,sp_consultaRecibos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_consultaRecibos2RowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_consultaRecibos2RowDeleting(Me, New sp_consultaRecibos2RowChangeEvent(CType(e.Row,sp_consultaRecibos2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_consultaRecibos2Row(ByVal row As sp_consultaRecibos2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_consultaRecibos2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_ConsultaProductosProveedoresDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        Private columnVar1 As Global.System.Data.DataColumn
        
        Private columnVar2 As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_ConsultaProductosProveedores"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Var1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVar1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Var2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVar2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_ConsultaProductosProveedoresRow
            Get
                Return CType(Me.Rows(index),sp_ConsultaProductosProveedoresRow)
            End Get
        End Property
        
        Public Event sp_ConsultaProductosProveedoresRowChanging As sp_ConsultaProductosProveedoresRowChangeEventHandler
        
        Public Event sp_ConsultaProductosProveedoresRowChanged As sp_ConsultaProductosProveedoresRowChangeEventHandler
        
        Public Event sp_ConsultaProductosProveedoresRowDeleting As sp_ConsultaProductosProveedoresRowChangeEventHandler
        
        Public Event sp_ConsultaProductosProveedoresRowDeleted As sp_ConsultaProductosProveedoresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_ConsultaProductosProveedoresRow(ByVal row As sp_ConsultaProductosProveedoresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_ConsultaProductosProveedoresRow(ByVal CodigoInterno As String, ByVal Descripcion As String, ByVal Modelo As String, ByVal CodigoFabrica As String, ByVal Var1 As String, ByVal Var2 As String, ByVal Proveedor As String, ByVal CodigoProductoF As String, ByVal Marca As String) As sp_ConsultaProductosProveedoresRow
            Dim rowsp_ConsultaProductosProveedoresRow As sp_ConsultaProductosProveedoresRow = CType(Me.NewRow,sp_ConsultaProductosProveedoresRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Descripcion, Modelo, CodigoFabrica, Var1, Var2, Proveedor, CodigoProductoF, Marca}
            rowsp_ConsultaProductosProveedoresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_ConsultaProductosProveedoresRow)
            Return rowsp_ConsultaProductosProveedoresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoInterno(ByVal CodigoInterno As String) As sp_ConsultaProductosProveedoresRow
            Return CType(Me.Rows.Find(New Object() {CodigoInterno}),sp_ConsultaProductosProveedoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_ConsultaProductosProveedoresDataTable = CType(MyBase.Clone,sp_ConsultaProductosProveedoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_ConsultaProductosProveedoresDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
            Me.columnVar1 = MyBase.Columns("Var1")
            Me.columnVar2 = MyBase.Columns("Var2")
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnMarca = MyBase.Columns("Marca")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnVar1 = New Global.System.Data.DataColumn("Var1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVar1)
            Me.columnVar2 = New Global.System.Data.DataColumn("Var2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVar2)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoInterno}, true))
            Me.columnCodigoInterno.AllowDBNull = false
            Me.columnCodigoInterno.Unique = true
            Me.columnCodigoInterno.MaxLength = 25
            Me.columnDescripcion.ReadOnly = true
            Me.columnDescripcion.MaxLength = 151
            Me.columnModelo.ReadOnly = true
            Me.columnModelo.MaxLength = 500
            Me.columnCodigoFabrica.ReadOnly = true
            Me.columnCodigoFabrica.MaxLength = 500
            Me.columnVar1.MaxLength = 30
            Me.columnVar2.MaxLength = 30
            Me.columnProveedor.MaxLength = 500
            Me.columnCodigoProductoF.MaxLength = 50
            Me.columnMarca.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_ConsultaProductosProveedoresRow() As sp_ConsultaProductosProveedoresRow
            Return CType(Me.NewRow,sp_ConsultaProductosProveedoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_ConsultaProductosProveedoresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_ConsultaProductosProveedoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_ConsultaProductosProveedoresRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosProveedoresRowChanged(Me, New sp_ConsultaProductosProveedoresRowChangeEvent(CType(e.Row,sp_ConsultaProductosProveedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_ConsultaProductosProveedoresRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosProveedoresRowChanging(Me, New sp_ConsultaProductosProveedoresRowChangeEvent(CType(e.Row,sp_ConsultaProductosProveedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_ConsultaProductosProveedoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosProveedoresRowDeleted(Me, New sp_ConsultaProductosProveedoresRowChangeEvent(CType(e.Row,sp_ConsultaProductosProveedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_ConsultaProductosProveedoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_ConsultaProductosProveedoresRowDeleting(Me, New sp_ConsultaProductosProveedoresRowChangeEvent(CType(e.Row,sp_ConsultaProductosProveedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_ConsultaProductosProveedoresRow(ByVal row As sp_ConsultaProductosProveedoresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_ConsultaProductosProveedoresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_AlmacenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Almacen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_AlmacenRow
            Get
                Return CType(Me.Rows(index),Table_AlmacenRow)
            End Get
        End Property
        
        Public Event Table_AlmacenRowChanging As Table_AlmacenRowChangeEventHandler
        
        Public Event Table_AlmacenRowChanged As Table_AlmacenRowChangeEventHandler
        
        Public Event Table_AlmacenRowDeleting As Table_AlmacenRowChangeEventHandler
        
        Public Event Table_AlmacenRowDeleted As Table_AlmacenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_AlmacenRow(ByVal row As Table_AlmacenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_AlmacenRow(ByVal Nombre As String, ByVal Direccion As String) As Table_AlmacenRow
            Dim rowTable_AlmacenRow As Table_AlmacenRow = CType(Me.NewRow,Table_AlmacenRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nombre, Direccion}
            rowTable_AlmacenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_AlmacenRow)
            Return rowTable_AlmacenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As Table_AlmacenRow
            Return CType(Me.Rows.Find(New Object() {Id}),Table_AlmacenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_AlmacenDataTable = CType(MyBase.Clone,Table_AlmacenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_AlmacenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDireccion = MyBase.Columns("Direccion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 20
            Me.columnDireccion.AllowDBNull = false
            Me.columnDireccion.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_AlmacenRow() As Table_AlmacenRow
            Return CType(Me.NewRow,Table_AlmacenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_AlmacenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_AlmacenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_AlmacenRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_AlmacenRowChanged(Me, New Table_AlmacenRowChangeEvent(CType(e.Row,Table_AlmacenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_AlmacenRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_AlmacenRowChanging(Me, New Table_AlmacenRowChangeEvent(CType(e.Row,Table_AlmacenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_AlmacenRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_AlmacenRowDeleted(Me, New Table_AlmacenRowChangeEvent(CType(e.Row,Table_AlmacenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_AlmacenRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_AlmacenRowDeleting(Me, New Table_AlmacenRowChangeEvent(CType(e.Row,Table_AlmacenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_AlmacenRow(ByVal row As Table_AlmacenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_AlmacenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_CuartoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoAlmacen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Cuarto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoAlmacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoAlmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_CuartoRow
            Get
                Return CType(Me.Rows(index),Tbl_CuartoRow)
            End Get
        End Property
        
        Public Event Tbl_CuartoRowChanging As Tbl_CuartoRowChangeEventHandler
        
        Public Event Tbl_CuartoRowChanged As Tbl_CuartoRowChangeEventHandler
        
        Public Event Tbl_CuartoRowDeleting As Tbl_CuartoRowChangeEventHandler
        
        Public Event Tbl_CuartoRowDeleted As Tbl_CuartoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_CuartoRow(ByVal row As Tbl_CuartoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_CuartoRow(ByVal Nombre As String, ByVal CodigoAlmacen As Integer) As Tbl_CuartoRow
            Dim rowTbl_CuartoRow As Tbl_CuartoRow = CType(Me.NewRow,Tbl_CuartoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nombre, CodigoAlmacen}
            rowTbl_CuartoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_CuartoRow)
            Return rowTbl_CuartoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As Tbl_CuartoRow
            Return CType(Me.Rows.Find(New Object() {Id}),Tbl_CuartoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_CuartoDataTable = CType(MyBase.Clone,Tbl_CuartoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_CuartoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoAlmacen = MyBase.Columns("CodigoAlmacen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoAlmacen = New Global.System.Data.DataColumn("CodigoAlmacen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoAlmacen)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 20
            Me.columnCodigoAlmacen.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_CuartoRow() As Tbl_CuartoRow
            Return CType(Me.NewRow,Tbl_CuartoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_CuartoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_CuartoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_CuartoRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_CuartoRowChanged(Me, New Tbl_CuartoRowChangeEvent(CType(e.Row,Tbl_CuartoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_CuartoRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_CuartoRowChanging(Me, New Tbl_CuartoRowChangeEvent(CType(e.Row,Tbl_CuartoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_CuartoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_CuartoRowDeleted(Me, New Tbl_CuartoRowChangeEvent(CType(e.Row,Tbl_CuartoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_CuartoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_CuartoRowDeleting(Me, New Tbl_CuartoRowChangeEvent(CType(e.Row,Tbl_CuartoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_CuartoRow(ByVal row As Tbl_CuartoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_CuartoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_EstanteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoCuarto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Estante"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCuartoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCuarto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_EstanteRow
            Get
                Return CType(Me.Rows(index),Tbl_EstanteRow)
            End Get
        End Property
        
        Public Event Tbl_EstanteRowChanging As Tbl_EstanteRowChangeEventHandler
        
        Public Event Tbl_EstanteRowChanged As Tbl_EstanteRowChangeEventHandler
        
        Public Event Tbl_EstanteRowDeleting As Tbl_EstanteRowChangeEventHandler
        
        Public Event Tbl_EstanteRowDeleted As Tbl_EstanteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_EstanteRow(ByVal row As Tbl_EstanteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_EstanteRow(ByVal Nombre As String, ByVal CodigoCuarto As Integer) As Tbl_EstanteRow
            Dim rowTbl_EstanteRow As Tbl_EstanteRow = CType(Me.NewRow,Tbl_EstanteRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nombre, CodigoCuarto}
            rowTbl_EstanteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_EstanteRow)
            Return rowTbl_EstanteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As Tbl_EstanteRow
            Return CType(Me.Rows.Find(New Object() {Id}),Tbl_EstanteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_EstanteDataTable = CType(MyBase.Clone,Tbl_EstanteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_EstanteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoCuarto = MyBase.Columns("CodigoCuarto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoCuarto = New Global.System.Data.DataColumn("CodigoCuarto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCuarto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 20
            Me.columnCodigoCuarto.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_EstanteRow() As Tbl_EstanteRow
            Return CType(Me.NewRow,Tbl_EstanteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_EstanteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_EstanteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_EstanteRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_EstanteRowChanged(Me, New Tbl_EstanteRowChangeEvent(CType(e.Row,Tbl_EstanteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_EstanteRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_EstanteRowChanging(Me, New Tbl_EstanteRowChangeEvent(CType(e.Row,Tbl_EstanteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_EstanteRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_EstanteRowDeleted(Me, New Tbl_EstanteRowChangeEvent(CType(e.Row,Tbl_EstanteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_EstanteRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_EstanteRowDeleting(Me, New Tbl_EstanteRowChangeEvent(CType(e.Row,Tbl_EstanteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_EstanteRow(ByVal row As Tbl_EstanteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_EstanteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_TramoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoEstante As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Tramo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEstanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEstante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_TramoRow
            Get
                Return CType(Me.Rows(index),Tbl_TramoRow)
            End Get
        End Property
        
        Public Event Tbl_TramoRowChanging As Tbl_TramoRowChangeEventHandler
        
        Public Event Tbl_TramoRowChanged As Tbl_TramoRowChangeEventHandler
        
        Public Event Tbl_TramoRowDeleting As Tbl_TramoRowChangeEventHandler
        
        Public Event Tbl_TramoRowDeleted As Tbl_TramoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_TramoRow(ByVal row As Tbl_TramoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_TramoRow(ByVal Nombre As String, ByVal CodigoEstante As Integer) As Tbl_TramoRow
            Dim rowTbl_TramoRow As Tbl_TramoRow = CType(Me.NewRow,Tbl_TramoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nombre, CodigoEstante}
            rowTbl_TramoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_TramoRow)
            Return rowTbl_TramoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As Tbl_TramoRow
            Return CType(Me.Rows.Find(New Object() {Id}),Tbl_TramoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_TramoDataTable = CType(MyBase.Clone,Tbl_TramoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_TramoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoEstante = MyBase.Columns("CodigoEstante")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoEstante = New Global.System.Data.DataColumn("CodigoEstante", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEstante)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 20
            Me.columnCodigoEstante.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_TramoRow() As Tbl_TramoRow
            Return CType(Me.NewRow,Tbl_TramoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_TramoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_TramoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_TramoRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_TramoRowChanged(Me, New Tbl_TramoRowChangeEvent(CType(e.Row,Tbl_TramoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_TramoRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_TramoRowChanging(Me, New Tbl_TramoRowChangeEvent(CType(e.Row,Tbl_TramoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_TramoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_TramoRowDeleted(Me, New Tbl_TramoRowChangeEvent(CType(e.Row,Tbl_TramoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_TramoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_TramoRowDeleting(Me, New Tbl_TramoRowChangeEvent(CType(e.Row,Tbl_TramoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_TramoRow(ByVal row As Tbl_TramoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_TramoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_ModeloDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Modelo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_ModeloRow
            Get
                Return CType(Me.Rows(index),Tbl_ModeloRow)
            End Get
        End Property
        
        Public Event Tbl_ModeloRowChanging As Tbl_ModeloRowChangeEventHandler
        
        Public Event Tbl_ModeloRowChanged As Tbl_ModeloRowChangeEventHandler
        
        Public Event Tbl_ModeloRowDeleting As Tbl_ModeloRowChangeEventHandler
        
        Public Event Tbl_ModeloRowDeleted As Tbl_ModeloRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_ModeloRow(ByVal row As Tbl_ModeloRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_ModeloRow(ByVal Modelo As String, ByVal Marca As String) As Tbl_ModeloRow
            Dim rowTbl_ModeloRow As Tbl_ModeloRow = CType(Me.NewRow,Tbl_ModeloRow)
            Dim columnValuesArray() As Object = New Object() {Modelo, Marca}
            rowTbl_ModeloRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_ModeloRow)
            Return rowTbl_ModeloRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_ModeloDataTable = CType(MyBase.Clone,Tbl_ModeloDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_ModeloDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnMarca = MyBase.Columns("Marca")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo.AllowDBNull = false
            Me.columnModelo.MaxLength = 50
            Me.columnMarca.AllowDBNull = false
            Me.columnMarca.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_ModeloRow() As Tbl_ModeloRow
            Return CType(Me.NewRow,Tbl_ModeloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_ModeloRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_ModeloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_ModeloRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_ModeloRowChanged(Me, New Tbl_ModeloRowChangeEvent(CType(e.Row,Tbl_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_ModeloRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_ModeloRowChanging(Me, New Tbl_ModeloRowChangeEvent(CType(e.Row,Tbl_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_ModeloRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_ModeloRowDeleted(Me, New Tbl_ModeloRowChangeEvent(CType(e.Row,Tbl_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_ModeloRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_ModeloRowDeleting(Me, New Tbl_ModeloRowChangeEvent(CType(e.Row,Tbl_ModeloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_ModeloRow(ByVal row As Tbl_ModeloRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_ModeloDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_VendedorDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCedula As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnCelular As Global.System.Data.DataColumn
        
        Private columnCuenta As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnZona As Global.System.Data.DataColumn
        
        Private columnDirEnvio As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnOcultaCom As Global.System.Data.DataColumn
        
        Private columnUser As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Vendedor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CelularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DirEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDirEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcultaComColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcultaCom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_VendedorRow
            Get
                Return CType(Me.Rows(index),Tbl_VendedorRow)
            End Get
        End Property
        
        Public Event Tbl_VendedorRowChanging As Tbl_VendedorRowChangeEventHandler
        
        Public Event Tbl_VendedorRowChanged As Tbl_VendedorRowChangeEventHandler
        
        Public Event Tbl_VendedorRowDeleting As Tbl_VendedorRowChangeEventHandler
        
        Public Event Tbl_VendedorRowDeleted As Tbl_VendedorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_VendedorRow(ByVal row As Tbl_VendedorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_VendedorRow(ByVal CodigoVendedor As Integer, ByVal Nombre As String, ByVal Cedula As String, ByVal Telefono As String, ByVal Celular As String, ByVal Cuenta As String, ByVal Email As String, ByVal Zona As Integer, ByVal DirEnvio As String, ByVal Banco As String, ByVal eliminado As Boolean, ByVal Observaciones As String, ByVal OcultaCom As Boolean, ByVal User As String) As Tbl_VendedorRow
            Dim rowTbl_VendedorRow As Tbl_VendedorRow = CType(Me.NewRow,Tbl_VendedorRow)
            Dim columnValuesArray() As Object = New Object() {CodigoVendedor, Nombre, Cedula, Telefono, Celular, Cuenta, Email, Zona, DirEnvio, Banco, eliminado, Observaciones, OcultaCom, User}
            rowTbl_VendedorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_VendedorRow)
            Return rowTbl_VendedorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoVendedor(ByVal CodigoVendedor As Integer) As Tbl_VendedorRow
            Return CType(Me.Rows.Find(New Object() {CodigoVendedor}),Tbl_VendedorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_VendedorDataTable = CType(MyBase.Clone,Tbl_VendedorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_VendedorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCedula = MyBase.Columns("Cedula")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnCelular = MyBase.Columns("Celular")
            Me.columnCuenta = MyBase.Columns("Cuenta")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnZona = MyBase.Columns("Zona")
            Me.columnDirEnvio = MyBase.Columns("DirEnvio")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columneliminado = MyBase.Columns("eliminado")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnOcultaCom = MyBase.Columns("OcultaCom")
            Me.columnUser = MyBase.Columns("User")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCedula = New Global.System.Data.DataColumn("Cedula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedula)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnCelular = New Global.System.Data.DataColumn("Celular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCelular)
            Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuenta)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnZona = New Global.System.Data.DataColumn("Zona", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZona)
            Me.columnDirEnvio = New Global.System.Data.DataColumn("DirEnvio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDirEnvio)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnOcultaCom = New Global.System.Data.DataColumn("OcultaCom", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcultaCom)
            Me.columnUser = New Global.System.Data.DataColumn("User", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoVendedor}, true))
            Me.columnCodigoVendedor.AllowDBNull = false
            Me.columnCodigoVendedor.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 40
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.MaxLength = 15
            Me.columnTelefono.AllowDBNull = false
            Me.columnTelefono.MaxLength = 25
            Me.columnCelular.MaxLength = 25
            Me.columnCuenta.MaxLength = 30
            Me.columnEmail.MaxLength = 50
            Me.columnZona.AllowDBNull = false
            Me.columnDirEnvio.MaxLength = 200
            Me.columnBanco.MaxLength = 4
            Me.columneliminado.AllowDBNull = false
            Me.columnObservaciones.MaxLength = 200
            Me.columnUser.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_VendedorRow() As Tbl_VendedorRow
            Return CType(Me.NewRow,Tbl_VendedorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_VendedorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_VendedorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_VendedorRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_VendedorRowChanged(Me, New Tbl_VendedorRowChangeEvent(CType(e.Row,Tbl_VendedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_VendedorRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_VendedorRowChanging(Me, New Tbl_VendedorRowChangeEvent(CType(e.Row,Tbl_VendedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_VendedorRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_VendedorRowDeleted(Me, New Tbl_VendedorRowChangeEvent(CType(e.Row,Tbl_VendedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_VendedorRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_VendedorRowDeleting(Me, New Tbl_VendedorRowChangeEvent(CType(e.Row,Tbl_VendedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_VendedorRow(ByVal row As Tbl_VendedorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_VendedorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_FabricaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoFabrica As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnRepresentanteLegal As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnClasificacionABC As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnPaginaweb As Global.System.Data.DataColumn
        
        Private columnPersonaContacto As Global.System.Data.DataColumn
        
        Private columnTelefonoContacto As Global.System.Data.DataColumn
        
        Private columnPersonaContacto2 As Global.System.Data.DataColumn
        
        Private columnTelefonoContacto2 As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Fabrica"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoFabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepresentanteLegalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepresentanteLegal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClasificacionABCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasificacionABC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaginawebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaginaweb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PersonaContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPersonaContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PersonaContacto2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPersonaContacto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoContacto2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoContacto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_FabricaRow
            Get
                Return CType(Me.Rows(index),Tbl_FabricaRow)
            End Get
        End Property
        
        Public Event Tbl_FabricaRowChanging As Tbl_FabricaRowChangeEventHandler
        
        Public Event Tbl_FabricaRowChanged As Tbl_FabricaRowChangeEventHandler
        
        Public Event Tbl_FabricaRowDeleting As Tbl_FabricaRowChangeEventHandler
        
        Public Event Tbl_FabricaRowDeleted As Tbl_FabricaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_FabricaRow(ByVal row As Tbl_FabricaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_FabricaRow( _
                    ByVal CodigoFabrica As Integer,  _
                    ByVal Nombre As String,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax As String,  _
                    ByVal Email As String,  _
                    ByVal RepresentanteLegal As String,  _
                    ByVal Direccion As String,  _
                    ByVal ClasificacionABC As String,  _
                    ByVal eliminado As Boolean,  _
                    ByVal Observacion As String,  _
                    ByVal Paginaweb As String,  _
                    ByVal PersonaContacto As String,  _
                    ByVal TelefonoContacto As String,  _
                    ByVal PersonaContacto2 As String,  _
                    ByVal TelefonoContacto2 As String,  _
                    ByVal Moneda As String) As Tbl_FabricaRow
            Dim rowTbl_FabricaRow As Tbl_FabricaRow = CType(Me.NewRow,Tbl_FabricaRow)
            Dim columnValuesArray() As Object = New Object() {CodigoFabrica, Nombre, Telefono1, Telefono2, Fax, Email, RepresentanteLegal, Direccion, ClasificacionABC, eliminado, Observacion, Paginaweb, PersonaContacto, TelefonoContacto, PersonaContacto2, TelefonoContacto2, Moneda}
            rowTbl_FabricaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_FabricaRow)
            Return rowTbl_FabricaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoFabrica(ByVal CodigoFabrica As Integer) As Tbl_FabricaRow
            Return CType(Me.Rows.Find(New Object() {CodigoFabrica}),Tbl_FabricaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_FabricaDataTable = CType(MyBase.Clone,Tbl_FabricaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_FabricaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoFabrica = MyBase.Columns("CodigoFabrica")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnRepresentanteLegal = MyBase.Columns("RepresentanteLegal")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnClasificacionABC = MyBase.Columns("ClasificacionABC")
            Me.columneliminado = MyBase.Columns("eliminado")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnPaginaweb = MyBase.Columns("Paginaweb")
            Me.columnPersonaContacto = MyBase.Columns("PersonaContacto")
            Me.columnTelefonoContacto = MyBase.Columns("TelefonoContacto")
            Me.columnPersonaContacto2 = MyBase.Columns("PersonaContacto2")
            Me.columnTelefonoContacto2 = MyBase.Columns("TelefonoContacto2")
            Me.columnMoneda = MyBase.Columns("Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoFabrica = New Global.System.Data.DataColumn("CodigoFabrica", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoFabrica)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnRepresentanteLegal = New Global.System.Data.DataColumn("RepresentanteLegal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepresentanteLegal)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnClasificacionABC = New Global.System.Data.DataColumn("ClasificacionABC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasificacionABC)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnPaginaweb = New Global.System.Data.DataColumn("Paginaweb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaginaweb)
            Me.columnPersonaContacto = New Global.System.Data.DataColumn("PersonaContacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPersonaContacto)
            Me.columnTelefonoContacto = New Global.System.Data.DataColumn("TelefonoContacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoContacto)
            Me.columnPersonaContacto2 = New Global.System.Data.DataColumn("PersonaContacto2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPersonaContacto2)
            Me.columnTelefonoContacto2 = New Global.System.Data.DataColumn("TelefonoContacto2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoContacto2)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoFabrica}, true))
            Me.columnCodigoFabrica.AllowDBNull = false
            Me.columnCodigoFabrica.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 100
            Me.columnTelefono1.MaxLength = 18
            Me.columnTelefono2.MaxLength = 18
            Me.columnFax.MaxLength = 18
            Me.columnEmail.MaxLength = 50
            Me.columnRepresentanteLegal.MaxLength = 50
            Me.columnDireccion.MaxLength = 100
            Me.columnClasificacionABC.MaxLength = 1
            Me.columnObservacion.MaxLength = 300
            Me.columnPaginaweb.MaxLength = 100
            Me.columnPersonaContacto.MaxLength = 100
            Me.columnTelefonoContacto.MaxLength = 18
            Me.columnPersonaContacto2.MaxLength = 100
            Me.columnTelefonoContacto2.MaxLength = 18
            Me.columnMoneda.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_FabricaRow() As Tbl_FabricaRow
            Return CType(Me.NewRow,Tbl_FabricaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_FabricaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_FabricaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_FabricaRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_FabricaRowChanged(Me, New Tbl_FabricaRowChangeEvent(CType(e.Row,Tbl_FabricaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_FabricaRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_FabricaRowChanging(Me, New Tbl_FabricaRowChangeEvent(CType(e.Row,Tbl_FabricaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_FabricaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_FabricaRowDeleted(Me, New Tbl_FabricaRowChangeEvent(CType(e.Row,Tbl_FabricaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_FabricaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_FabricaRowDeleting(Me, New Tbl_FabricaRowChangeEvent(CType(e.Row,Tbl_FabricaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_FabricaRow(ByVal row As Tbl_FabricaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_FabricaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_GrupoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoGrupo As Global.System.Data.DataColumn
        
        Private columnNombreGrupo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Grupo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoGrupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoGrupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreGrupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreGrupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_GrupoRow
            Get
                Return CType(Me.Rows(index),Tbl_GrupoRow)
            End Get
        End Property
        
        Public Event Tbl_GrupoRowChanging As Tbl_GrupoRowChangeEventHandler
        
        Public Event Tbl_GrupoRowChanged As Tbl_GrupoRowChangeEventHandler
        
        Public Event Tbl_GrupoRowDeleting As Tbl_GrupoRowChangeEventHandler
        
        Public Event Tbl_GrupoRowDeleted As Tbl_GrupoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_GrupoRow(ByVal row As Tbl_GrupoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_GrupoRow(ByVal NombreGrupo As String) As Tbl_GrupoRow
            Dim rowTbl_GrupoRow As Tbl_GrupoRow = CType(Me.NewRow,Tbl_GrupoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, NombreGrupo}
            rowTbl_GrupoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_GrupoRow)
            Return rowTbl_GrupoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoGrupo(ByVal CodigoGrupo As Integer) As Tbl_GrupoRow
            Return CType(Me.Rows.Find(New Object() {CodigoGrupo}),Tbl_GrupoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_GrupoDataTable = CType(MyBase.Clone,Tbl_GrupoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_GrupoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoGrupo = MyBase.Columns("CodigoGrupo")
            Me.columnNombreGrupo = MyBase.Columns("NombreGrupo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoGrupo = New Global.System.Data.DataColumn("CodigoGrupo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoGrupo)
            Me.columnNombreGrupo = New Global.System.Data.DataColumn("NombreGrupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreGrupo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoGrupo}, true))
            Me.columnCodigoGrupo.AutoIncrement = true
            Me.columnCodigoGrupo.AutoIncrementSeed = -1
            Me.columnCodigoGrupo.AutoIncrementStep = -1
            Me.columnCodigoGrupo.AllowDBNull = false
            Me.columnCodigoGrupo.ReadOnly = true
            Me.columnCodigoGrupo.Unique = true
            Me.columnNombreGrupo.AllowDBNull = false
            Me.columnNombreGrupo.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_GrupoRow() As Tbl_GrupoRow
            Return CType(Me.NewRow,Tbl_GrupoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_GrupoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_GrupoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_GrupoRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_GrupoRowChanged(Me, New Tbl_GrupoRowChangeEvent(CType(e.Row,Tbl_GrupoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_GrupoRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_GrupoRowChanging(Me, New Tbl_GrupoRowChangeEvent(CType(e.Row,Tbl_GrupoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_GrupoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_GrupoRowDeleted(Me, New Tbl_GrupoRowChangeEvent(CType(e.Row,Tbl_GrupoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_GrupoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_GrupoRowDeleting(Me, New Tbl_GrupoRowChangeEvent(CType(e.Row,Tbl_GrupoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_GrupoRow(ByVal row As Tbl_GrupoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_GrupoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_ClienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnRepresentante As Global.System.Data.DataColumn
        
        Private columnGerente As Global.System.Data.DataColumn
        
        Private columncodZona As Global.System.Data.DataColumn
        
        Private columnzona As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnClasificacionABC As Global.System.Data.DataColumn
        
        Private columnAutorizado As Global.System.Data.DataColumn
        
        Private columneliminado As Global.System.Data.DataColumn
        
        Private columnContEspecial As Global.System.Data.DataColumn
        
        Private columnCelular As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnCodigoVendedor As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnuser As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnFletePago As Global.System.Data.DataColumn
        
        Private columnDireccionEntrega As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_Cliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepresentanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepresentante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GerenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGerente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codZonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodZona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClasificacionABCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClasificacionABC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eliminadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneliminado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContEspecialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContEspecial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CelularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCelular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FletePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFletePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionEntregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionEntrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_ClienteRow
            Get
                Return CType(Me.Rows(index),Tbl_ClienteRow)
            End Get
        End Property
        
        Public Event Tbl_ClienteRowChanging As Tbl_ClienteRowChangeEventHandler
        
        Public Event Tbl_ClienteRowChanged As Tbl_ClienteRowChangeEventHandler
        
        Public Event Tbl_ClienteRowDeleting As Tbl_ClienteRowChangeEventHandler
        
        Public Event Tbl_ClienteRowDeleted As Tbl_ClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_ClienteRow(ByVal row As Tbl_ClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_ClienteRow( _
                    ByVal CodigoCliente As Integer,  _
                    ByVal RazonSocial As String,  _
                    ByVal Rif As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal Representante As String,  _
                    ByVal Gerente As String,  _
                    ByVal codZona As Integer,  _
                    ByVal zona As String,  _
                    ByVal Estado As String,  _
                    ByVal ClasificacionABC As String,  _
                    ByVal Autorizado As Boolean,  _
                    ByVal eliminado As Boolean,  _
                    ByVal ContEspecial As Boolean,  _
                    ByVal Celular As String,  _
                    ByVal Observacion As String,  _
                    ByVal CodigoVendedor As Integer,  _
                    ByVal Nombre As String,  _
                    ByVal user As String,  _
                    ByVal Password As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal FletePago As Boolean,  _
                    ByVal DireccionEntrega As String) As Tbl_ClienteRow
            Dim rowTbl_ClienteRow As Tbl_ClienteRow = CType(Me.NewRow,Tbl_ClienteRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCliente, RazonSocial, Rif, FechaRegistro, Telefono1, Telefono2, Fax, Email, Direccion, Representante, Gerente, codZona, zona, Estado, ClasificacionABC, Autorizado, eliminado, ContEspecial, Celular, Observacion, CodigoVendedor, Nombre, user, Password, LimiteCredito, FletePago, DireccionEntrega}
            rowTbl_ClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_ClienteRow)
            Return rowTbl_ClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_ClienteDataTable = CType(MyBase.Clone,Tbl_ClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_ClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnRepresentante = MyBase.Columns("Representante")
            Me.columnGerente = MyBase.Columns("Gerente")
            Me.columncodZona = MyBase.Columns("codZona")
            Me.columnzona = MyBase.Columns("zona")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnClasificacionABC = MyBase.Columns("ClasificacionABC")
            Me.columnAutorizado = MyBase.Columns("Autorizado")
            Me.columneliminado = MyBase.Columns("eliminado")
            Me.columnContEspecial = MyBase.Columns("ContEspecial")
            Me.columnCelular = MyBase.Columns("Celular")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnCodigoVendedor = MyBase.Columns("CodigoVendedor")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnuser = MyBase.Columns("user")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnFletePago = MyBase.Columns("FletePago")
            Me.columnDireccionEntrega = MyBase.Columns("DireccionEntrega")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnRepresentante = New Global.System.Data.DataColumn("Representante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepresentante)
            Me.columnGerente = New Global.System.Data.DataColumn("Gerente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGerente)
            Me.columncodZona = New Global.System.Data.DataColumn("codZona", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodZona)
            Me.columnzona = New Global.System.Data.DataColumn("zona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzona)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnClasificacionABC = New Global.System.Data.DataColumn("ClasificacionABC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClasificacionABC)
            Me.columnAutorizado = New Global.System.Data.DataColumn("Autorizado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizado)
            Me.columneliminado = New Global.System.Data.DataColumn("eliminado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneliminado)
            Me.columnContEspecial = New Global.System.Data.DataColumn("ContEspecial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContEspecial)
            Me.columnCelular = New Global.System.Data.DataColumn("Celular", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCelular)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnCodigoVendedor = New Global.System.Data.DataColumn("CodigoVendedor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVendedor)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnuser = New Global.System.Data.DataColumn("user", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuser)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnFletePago = New Global.System.Data.DataColumn("FletePago", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFletePago)
            Me.columnDireccionEntrega = New Global.System.Data.DataColumn("DireccionEntrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionEntrega)
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnRazonSocial.AllowDBNull = false
            Me.columnRazonSocial.MaxLength = 100
            Me.columnRif.AllowDBNull = false
            Me.columnRif.MaxLength = 15
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnTelefono1.MaxLength = 30
            Me.columnTelefono2.MaxLength = 30
            Me.columnFax.MaxLength = 30
            Me.columnEmail.MaxLength = 50
            Me.columnDireccion.MaxLength = 200
            Me.columnRepresentante.MaxLength = 50
            Me.columnGerente.MaxLength = 50
            Me.columnzona.MaxLength = 100
            Me.columnEstado.MaxLength = 50
            Me.columnClasificacionABC.MaxLength = 1
            Me.columnAutorizado.AllowDBNull = false
            Me.columneliminado.AllowDBNull = false
            Me.columnCelular.MaxLength = 30
            Me.columnObservacion.MaxLength = 250
            Me.columnNombre.MaxLength = 40
            Me.columnuser.MaxLength = 50
            Me.columnPassword.MaxLength = 15
            Me.columnDireccionEntrega.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_ClienteRow() As Tbl_ClienteRow
            Return CType(Me.NewRow,Tbl_ClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_ClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_ClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_ClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_ClienteRowChanged(Me, New Tbl_ClienteRowChangeEvent(CType(e.Row,Tbl_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_ClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_ClienteRowChanging(Me, New Tbl_ClienteRowChangeEvent(CType(e.Row,Tbl_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_ClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_ClienteRowDeleted(Me, New Tbl_ClienteRowChangeEvent(CType(e.Row,Tbl_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_ClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_ClienteRowDeleting(Me, New Tbl_ClienteRowChangeEvent(CType(e.Row,Tbl_ClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_ClienteRow(ByVal row As Tbl_ClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_ClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_GuiaTransporteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodFactura As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnFlete As Global.System.Data.DataColumn
        
        Private columnBultos As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCodigoPedido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_GuiaTransporte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_GuiaTransporteRow
            Get
                Return CType(Me.Rows(index),Table_GuiaTransporteRow)
            End Get
        End Property
        
        Public Event Table_GuiaTransporteRowChanging As Table_GuiaTransporteRowChangeEventHandler
        
        Public Event Table_GuiaTransporteRowChanged As Table_GuiaTransporteRowChangeEventHandler
        
        Public Event Table_GuiaTransporteRowDeleting As Table_GuiaTransporteRowChangeEventHandler
        
        Public Event Table_GuiaTransporteRowDeleted As Table_GuiaTransporteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_GuiaTransporteRow(ByVal row As Table_GuiaTransporteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_GuiaTransporteRow(ByVal CodFactura As String, ByVal RazonSocial As String, ByVal Flete As String, ByVal Bultos As Integer, ByVal Monto As Double, ByVal Direccion As String, ByVal CodigoPedido As String) As Table_GuiaTransporteRow
            Dim rowTable_GuiaTransporteRow As Table_GuiaTransporteRow = CType(Me.NewRow,Table_GuiaTransporteRow)
            Dim columnValuesArray() As Object = New Object() {CodFactura, RazonSocial, Flete, Bultos, Monto, Direccion, CodigoPedido}
            rowTable_GuiaTransporteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_GuiaTransporteRow)
            Return rowTable_GuiaTransporteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_GuiaTransporteDataTable = CType(MyBase.Clone,Table_GuiaTransporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_GuiaTransporteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodFactura = MyBase.Columns("CodFactura")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnFlete = MyBase.Columns("Flete")
            Me.columnBultos = MyBase.Columns("Bultos")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCodigoPedido = MyBase.Columns("CodigoPedido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodFactura = New Global.System.Data.DataColumn("CodFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodFactura)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnFlete = New Global.System.Data.DataColumn("Flete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlete)
            Me.columnBultos = New Global.System.Data.DataColumn("Bultos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultos)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCodigoPedido = New Global.System.Data.DataColumn("CodigoPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPedido)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_GuiaTransporteRow() As Table_GuiaTransporteRow
            Return CType(Me.NewRow,Table_GuiaTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_GuiaTransporteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_GuiaTransporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_GuiaTransporteRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowChanged(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_GuiaTransporteRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowChanging(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_GuiaTransporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowDeleted(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_GuiaTransporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaTransporteRowDeleting(Me, New Table_GuiaTransporteRowChangeEvent(CType(e.Row,Table_GuiaTransporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_GuiaTransporteRow(ByVal row As Table_GuiaTransporteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_GuiaTransporteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_GuiaDesglosadaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnDestino As Global.System.Data.DataColumn
        
        Private columnTlf As Global.System.Data.DataColumn
        
        Private columnFlete As Global.System.Data.DataColumn
        
        Private columnRif As Global.System.Data.DataColumn
        
        Private columnFactura As Global.System.Data.DataColumn
        
        Private columnBultos As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnCodigoPedido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_GuiaDesglosada"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TlfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTlf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_GuiaDesglosadaRow
            Get
                Return CType(Me.Rows(index),Table_GuiaDesglosadaRow)
            End Get
        End Property
        
        Public Event Table_GuiaDesglosadaRowChanging As Table_GuiaDesglosadaRowChangeEventHandler
        
        Public Event Table_GuiaDesglosadaRowChanged As Table_GuiaDesglosadaRowChangeEventHandler
        
        Public Event Table_GuiaDesglosadaRowDeleting As Table_GuiaDesglosadaRowChangeEventHandler
        
        Public Event Table_GuiaDesglosadaRowDeleted As Table_GuiaDesglosadaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_GuiaDesglosadaRow(ByVal row As Table_GuiaDesglosadaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_GuiaDesglosadaRow(ByVal Cliente As String, ByVal Destino As String, ByVal Tlf As String, ByVal Flete As String, ByVal Rif As String, ByVal Factura As String, ByVal Bultos As String, ByVal Monto As Double, ByVal CodigoPedido As String) As Table_GuiaDesglosadaRow
            Dim rowTable_GuiaDesglosadaRow As Table_GuiaDesglosadaRow = CType(Me.NewRow,Table_GuiaDesglosadaRow)
            Dim columnValuesArray() As Object = New Object() {Cliente, Destino, Tlf, Flete, Rif, Factura, Bultos, Monto, CodigoPedido}
            rowTable_GuiaDesglosadaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_GuiaDesglosadaRow)
            Return rowTable_GuiaDesglosadaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_GuiaDesglosadaDataTable = CType(MyBase.Clone,Table_GuiaDesglosadaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_GuiaDesglosadaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnDestino = MyBase.Columns("Destino")
            Me.columnTlf = MyBase.Columns("Tlf")
            Me.columnFlete = MyBase.Columns("Flete")
            Me.columnRif = MyBase.Columns("Rif")
            Me.columnFactura = MyBase.Columns("Factura")
            Me.columnBultos = MyBase.Columns("Bultos")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnCodigoPedido = MyBase.Columns("CodigoPedido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnDestino = New Global.System.Data.DataColumn("Destino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestino)
            Me.columnTlf = New Global.System.Data.DataColumn("Tlf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTlf)
            Me.columnFlete = New Global.System.Data.DataColumn("Flete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlete)
            Me.columnRif = New Global.System.Data.DataColumn("Rif", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRif)
            Me.columnFactura = New Global.System.Data.DataColumn("Factura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura)
            Me.columnBultos = New Global.System.Data.DataColumn("Bultos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultos)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnCodigoPedido = New Global.System.Data.DataColumn("CodigoPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPedido)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_GuiaDesglosadaRow() As Table_GuiaDesglosadaRow
            Return CType(Me.NewRow,Table_GuiaDesglosadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_GuiaDesglosadaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_GuiaDesglosadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_GuiaDesglosadaRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowChanged(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_GuiaDesglosadaRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowChanging(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_GuiaDesglosadaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowDeleted(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_GuiaDesglosadaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaDesglosadaRowDeleting(Me, New Table_GuiaDesglosadaRowChangeEvent(CType(e.Row,Table_GuiaDesglosadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_GuiaDesglosadaRow(ByVal row As Table_GuiaDesglosadaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_GuiaDesglosadaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_GuiaBultosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnFactura As Global.System.Data.DataColumn
        
        Private columnDestino As Global.System.Data.DataColumn
        
        Private columnBultoN As Global.System.Data.DataColumn
        
        Private columnBultoM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_GuiaBultos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultoNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultoN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BultoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBultoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_GuiaBultosRow
            Get
                Return CType(Me.Rows(index),Table_GuiaBultosRow)
            End Get
        End Property
        
        Public Event Table_GuiaBultosRowChanging As Table_GuiaBultosRowChangeEventHandler
        
        Public Event Table_GuiaBultosRowChanged As Table_GuiaBultosRowChangeEventHandler
        
        Public Event Table_GuiaBultosRowDeleting As Table_GuiaBultosRowChangeEventHandler
        
        Public Event Table_GuiaBultosRowDeleted As Table_GuiaBultosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_GuiaBultosRow(ByVal row As Table_GuiaBultosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_GuiaBultosRow(ByVal Cliente As String, ByVal Factura As String, ByVal Destino As String, ByVal BultoN As String, ByVal BultoM As String) As Table_GuiaBultosRow
            Dim rowTable_GuiaBultosRow As Table_GuiaBultosRow = CType(Me.NewRow,Table_GuiaBultosRow)
            Dim columnValuesArray() As Object = New Object() {Cliente, Factura, Destino, BultoN, BultoM}
            rowTable_GuiaBultosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_GuiaBultosRow)
            Return rowTable_GuiaBultosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_GuiaBultosDataTable = CType(MyBase.Clone,Table_GuiaBultosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_GuiaBultosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnFactura = MyBase.Columns("Factura")
            Me.columnDestino = MyBase.Columns("Destino")
            Me.columnBultoN = MyBase.Columns("BultoN")
            Me.columnBultoM = MyBase.Columns("BultoM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnFactura = New Global.System.Data.DataColumn("Factura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura)
            Me.columnDestino = New Global.System.Data.DataColumn("Destino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestino)
            Me.columnBultoN = New Global.System.Data.DataColumn("BultoN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultoN)
            Me.columnBultoM = New Global.System.Data.DataColumn("BultoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBultoM)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_GuiaBultosRow() As Table_GuiaBultosRow
            Return CType(Me.NewRow,Table_GuiaBultosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_GuiaBultosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_GuiaBultosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_GuiaBultosRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaBultosRowChanged(Me, New Table_GuiaBultosRowChangeEvent(CType(e.Row,Table_GuiaBultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_GuiaBultosRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaBultosRowChanging(Me, New Table_GuiaBultosRowChangeEvent(CType(e.Row,Table_GuiaBultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_GuiaBultosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_GuiaBultosRowDeleted(Me, New Table_GuiaBultosRowChangeEvent(CType(e.Row,Table_GuiaBultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_GuiaBultosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_GuiaBultosRowDeleting(Me, New Table_GuiaBultosRowChangeEvent(CType(e.Row,Table_GuiaBultosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_GuiaBultosRow(ByVal row As Table_GuiaBultosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_GuiaBultosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_RelacionFacturasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCodFactura As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_RelacionFacturas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_RelacionFacturasRow
            Get
                Return CType(Me.Rows(index),Table_RelacionFacturasRow)
            End Get
        End Property
        
        Public Event Table_RelacionFacturasRowChanging As Table_RelacionFacturasRowChangeEventHandler
        
        Public Event Table_RelacionFacturasRowChanged As Table_RelacionFacturasRowChangeEventHandler
        
        Public Event Table_RelacionFacturasRowDeleting As Table_RelacionFacturasRowChangeEventHandler
        
        Public Event Table_RelacionFacturasRowDeleted As Table_RelacionFacturasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_RelacionFacturasRow(ByVal row As Table_RelacionFacturasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_RelacionFacturasRow(ByVal Tipo As String, ByVal CodFactura As String, ByVal RazonSocial As String, ByVal Fecha As String, ByVal Monto As Double) As Table_RelacionFacturasRow
            Dim rowTable_RelacionFacturasRow As Table_RelacionFacturasRow = CType(Me.NewRow,Table_RelacionFacturasRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, CodFactura, RazonSocial, Fecha, Monto}
            rowTable_RelacionFacturasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_RelacionFacturasRow)
            Return rowTable_RelacionFacturasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_RelacionFacturasDataTable = CType(MyBase.Clone,Table_RelacionFacturasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_RelacionFacturasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCodFactura = MyBase.Columns("CodFactura")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnMonto = MyBase.Columns("Monto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCodFactura = New Global.System.Data.DataColumn("CodFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodFactura)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnRazonSocial.Caption = "razon"
            Me.columnFecha.Caption = "fecha"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_RelacionFacturasRow() As Table_RelacionFacturasRow
            Return CType(Me.NewRow,Table_RelacionFacturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_RelacionFacturasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_RelacionFacturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_RelacionFacturasRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_RelacionFacturasRowChanged(Me, New Table_RelacionFacturasRowChangeEvent(CType(e.Row,Table_RelacionFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_RelacionFacturasRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_RelacionFacturasRowChanging(Me, New Table_RelacionFacturasRowChangeEvent(CType(e.Row,Table_RelacionFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_RelacionFacturasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_RelacionFacturasRowDeleted(Me, New Table_RelacionFacturasRowChangeEvent(CType(e.Row,Table_RelacionFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_RelacionFacturasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_RelacionFacturasRowDeleting(Me, New Table_RelacionFacturasRowChangeEvent(CType(e.Row,Table_RelacionFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_RelacionFacturasRow(ByVal row As Table_RelacionFacturasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_RelacionFacturasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Analisis_CobranzaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnFactura As Global.System.Data.DataColumn
        
        Private columnCod_Cliente As Global.System.Data.DataColumn
        
        Private columnRazon As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnVencimiento As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnDias_Credito As Global.System.Data.DataColumn
        
        Private columnPendiente As Global.System.Data.DataColumn
        
        Private columnTotalFinal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Analisis_Cobranza"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cod_ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCod_Cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VencimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVencimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dias_CreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias_Credito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PendienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPendiente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalFinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Analisis_CobranzaRow
            Get
                Return CType(Me.Rows(index),Table_Analisis_CobranzaRow)
            End Get
        End Property
        
        Public Event Table_Analisis_CobranzaRowChanging As Table_Analisis_CobranzaRowChangeEventHandler
        
        Public Event Table_Analisis_CobranzaRowChanged As Table_Analisis_CobranzaRowChangeEventHandler
        
        Public Event Table_Analisis_CobranzaRowDeleting As Table_Analisis_CobranzaRowChangeEventHandler
        
        Public Event Table_Analisis_CobranzaRowDeleted As Table_Analisis_CobranzaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Analisis_CobranzaRow(ByVal row As Table_Analisis_CobranzaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Analisis_CobranzaRow(ByVal Fecha As String, ByVal Factura As String, ByVal Cod_Cliente As String, ByVal Razon As String, ByVal Total As String, ByVal Vencimiento As String, ByVal Dias As String, ByVal Dias_Credito As String, ByVal Pendiente As String, ByVal TotalFinal As String) As Table_Analisis_CobranzaRow
            Dim rowTable_Analisis_CobranzaRow As Table_Analisis_CobranzaRow = CType(Me.NewRow,Table_Analisis_CobranzaRow)
            Dim columnValuesArray() As Object = New Object() {Fecha, Factura, Cod_Cliente, Razon, Total, Vencimiento, Dias, Dias_Credito, Pendiente, TotalFinal}
            rowTable_Analisis_CobranzaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Analisis_CobranzaRow)
            Return rowTable_Analisis_CobranzaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Analisis_CobranzaDataTable = CType(MyBase.Clone,Table_Analisis_CobranzaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Analisis_CobranzaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnFactura = MyBase.Columns("Factura")
            Me.columnCod_Cliente = MyBase.Columns("Cod_Cliente")
            Me.columnRazon = MyBase.Columns("Razon")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnVencimiento = MyBase.Columns("Vencimiento")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnDias_Credito = MyBase.Columns("Dias_Credito")
            Me.columnPendiente = MyBase.Columns("Pendiente")
            Me.columnTotalFinal = MyBase.Columns("TotalFinal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnFactura = New Global.System.Data.DataColumn("Factura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura)
            Me.columnCod_Cliente = New Global.System.Data.DataColumn("Cod_Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCod_Cliente)
            Me.columnRazon = New Global.System.Data.DataColumn("Razon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazon)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnVencimiento = New Global.System.Data.DataColumn("Vencimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVencimiento)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnDias_Credito = New Global.System.Data.DataColumn("Dias_Credito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias_Credito)
            Me.columnPendiente = New Global.System.Data.DataColumn("Pendiente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPendiente)
            Me.columnTotalFinal = New Global.System.Data.DataColumn("TotalFinal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalFinal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Analisis_CobranzaRow() As Table_Analisis_CobranzaRow
            Return CType(Me.NewRow,Table_Analisis_CobranzaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Analisis_CobranzaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Analisis_CobranzaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Analisis_CobranzaRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Analisis_CobranzaRowChanged(Me, New Table_Analisis_CobranzaRowChangeEvent(CType(e.Row,Table_Analisis_CobranzaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Analisis_CobranzaRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Analisis_CobranzaRowChanging(Me, New Table_Analisis_CobranzaRowChangeEvent(CType(e.Row,Table_Analisis_CobranzaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Analisis_CobranzaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Analisis_CobranzaRowDeleted(Me, New Table_Analisis_CobranzaRowChangeEvent(CType(e.Row,Table_Analisis_CobranzaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Analisis_CobranzaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Analisis_CobranzaRowDeleting(Me, New Table_Analisis_CobranzaRowChangeEvent(CType(e.Row,Table_Analisis_CobranzaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Analisis_CobranzaRow(ByVal row As Table_Analisis_CobranzaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Analisis_CobranzaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Cargar_CompraDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnCostoPromecioActual As Global.System.Data.DataColumn
        
        Private columnPrecioVentaActual As Global.System.Data.DataColumn
        
        Private columnCostoPromedioNuevo As Global.System.Data.DataColumn
        
        Private columnPrecioVentaNuevo As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnCodigoPedido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Cargar_Compra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoPromecioActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoPromecioActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVentaActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoPromedioNuevoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoPromedioNuevo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioVentaNuevoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioVentaNuevo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Cargar_CompraRow
            Get
                Return CType(Me.Rows(index),Table_Cargar_CompraRow)
            End Get
        End Property
        
        Public Event Table_Cargar_CompraRowChanging As Table_Cargar_CompraRowChangeEventHandler
        
        Public Event Table_Cargar_CompraRowChanged As Table_Cargar_CompraRowChangeEventHandler
        
        Public Event Table_Cargar_CompraRowDeleting As Table_Cargar_CompraRowChangeEventHandler
        
        Public Event Table_Cargar_CompraRowDeleted As Table_Cargar_CompraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Cargar_CompraRow(ByVal row As Table_Cargar_CompraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Cargar_CompraRow(ByVal CodigoProducto As String, ByVal Nombre As String, ByVal CantidadExistencia As String, ByVal CostoPromecioActual As String, ByVal PrecioVentaActual As String, ByVal CostoPromedioNuevo As String, ByVal PrecioVentaNuevo As String, ByVal Cantidad As String, ByVal Proveedor As String, ByVal CodigoPedido As String) As Table_Cargar_CompraRow
            Dim rowTable_Cargar_CompraRow As Table_Cargar_CompraRow = CType(Me.NewRow,Table_Cargar_CompraRow)
            Dim columnValuesArray() As Object = New Object() {CodigoProducto, Nombre, CantidadExistencia, CostoPromecioActual, PrecioVentaActual, CostoPromedioNuevo, PrecioVentaNuevo, Cantidad, Proveedor, CodigoPedido}
            rowTable_Cargar_CompraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Cargar_CompraRow)
            Return rowTable_Cargar_CompraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Cargar_CompraDataTable = CType(MyBase.Clone,Table_Cargar_CompraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Cargar_CompraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnCostoPromecioActual = MyBase.Columns("CostoPromecioActual")
            Me.columnPrecioVentaActual = MyBase.Columns("PrecioVentaActual")
            Me.columnCostoPromedioNuevo = MyBase.Columns("CostoPromedioNuevo")
            Me.columnPrecioVentaNuevo = MyBase.Columns("PrecioVentaNuevo")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnCodigoPedido = MyBase.Columns("CodigoPedido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnCostoPromecioActual = New Global.System.Data.DataColumn("CostoPromecioActual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoPromecioActual)
            Me.columnPrecioVentaActual = New Global.System.Data.DataColumn("PrecioVentaActual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVentaActual)
            Me.columnCostoPromedioNuevo = New Global.System.Data.DataColumn("CostoPromedioNuevo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoPromedioNuevo)
            Me.columnPrecioVentaNuevo = New Global.System.Data.DataColumn("PrecioVentaNuevo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioVentaNuevo)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnCodigoPedido = New Global.System.Data.DataColumn("CodigoPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPedido)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Cargar_CompraRow() As Table_Cargar_CompraRow
            Return CType(Me.NewRow,Table_Cargar_CompraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Cargar_CompraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Cargar_CompraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Cargar_CompraRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Cargar_CompraRowChanged(Me, New Table_Cargar_CompraRowChangeEvent(CType(e.Row,Table_Cargar_CompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Cargar_CompraRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Cargar_CompraRowChanging(Me, New Table_Cargar_CompraRowChangeEvent(CType(e.Row,Table_Cargar_CompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Cargar_CompraRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Cargar_CompraRowDeleted(Me, New Table_Cargar_CompraRowChangeEvent(CType(e.Row,Table_Cargar_CompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Cargar_CompraRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Cargar_CompraRowDeleting(Me, New Table_Cargar_CompraRowChangeEvent(CType(e.Row,Table_Cargar_CompraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Cargar_CompraRow(ByVal row As Table_Cargar_CompraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Cargar_CompraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Productos_NacionalizadosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnCantidadPedida As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnCantidadUbicacion As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Productos_Nacionalizados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadPedidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadPedida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadUbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Productos_NacionalizadosRow
            Get
                Return CType(Me.Rows(index),Table_Productos_NacionalizadosRow)
            End Get
        End Property
        
        Public Event Table_Productos_NacionalizadosRowChanging As Table_Productos_NacionalizadosRowChangeEventHandler
        
        Public Event Table_Productos_NacionalizadosRowChanged As Table_Productos_NacionalizadosRowChangeEventHandler
        
        Public Event Table_Productos_NacionalizadosRowDeleting As Table_Productos_NacionalizadosRowChangeEventHandler
        
        Public Event Table_Productos_NacionalizadosRowDeleted As Table_Productos_NacionalizadosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Productos_NacionalizadosRow(ByVal row As Table_Productos_NacionalizadosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Productos_NacionalizadosRow(ByVal Codigo As String, ByVal CodigoProductoF As String, ByVal Nombre As String, ByVal CantidadExistencia As String, ByVal CantidadPedida As String, ByVal Ubicacion As String, ByVal CantidadUbicacion As String, ByVal Modelo As String) As Table_Productos_NacionalizadosRow
            Dim rowTable_Productos_NacionalizadosRow As Table_Productos_NacionalizadosRow = CType(Me.NewRow,Table_Productos_NacionalizadosRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, CodigoProductoF, Nombre, CantidadExistencia, CantidadPedida, Ubicacion, CantidadUbicacion, Modelo}
            rowTable_Productos_NacionalizadosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Productos_NacionalizadosRow)
            Return rowTable_Productos_NacionalizadosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Productos_NacionalizadosDataTable = CType(MyBase.Clone,Table_Productos_NacionalizadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Productos_NacionalizadosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnCantidadPedida = MyBase.Columns("CantidadPedida")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnCantidadUbicacion = MyBase.Columns("CantidadUbicacion")
            Me.columnModelo = MyBase.Columns("Modelo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnCantidadPedida = New Global.System.Data.DataColumn("CantidadPedida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadPedida)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnCantidadUbicacion = New Global.System.Data.DataColumn("CantidadUbicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadUbicacion)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Productos_NacionalizadosRow() As Table_Productos_NacionalizadosRow
            Return CType(Me.NewRow,Table_Productos_NacionalizadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Productos_NacionalizadosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Productos_NacionalizadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Productos_NacionalizadosRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Productos_NacionalizadosRowChanged(Me, New Table_Productos_NacionalizadosRowChangeEvent(CType(e.Row,Table_Productos_NacionalizadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Productos_NacionalizadosRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Productos_NacionalizadosRowChanging(Me, New Table_Productos_NacionalizadosRowChangeEvent(CType(e.Row,Table_Productos_NacionalizadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Productos_NacionalizadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Productos_NacionalizadosRowDeleted(Me, New Table_Productos_NacionalizadosRowChangeEvent(CType(e.Row,Table_Productos_NacionalizadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Productos_NacionalizadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Productos_NacionalizadosRowDeleting(Me, New Table_Productos_NacionalizadosRowChangeEvent(CType(e.Row,Table_Productos_NacionalizadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Productos_NacionalizadosRow(ByVal row As Table_Productos_NacionalizadosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Productos_NacionalizadosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Productos_VariacionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnExistencia As Global.System.Data.DataColumn
        
        Private columnPrecioAct As Global.System.Data.DataColumn
        
        Private columnPrecioNue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Productos_Variacion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioActColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioAct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioNueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioNue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Productos_VariacionRow
            Get
                Return CType(Me.Rows(index),Table_Productos_VariacionRow)
            End Get
        End Property
        
        Public Event Table_Productos_VariacionRowChanging As Table_Productos_VariacionRowChangeEventHandler
        
        Public Event Table_Productos_VariacionRowChanged As Table_Productos_VariacionRowChangeEventHandler
        
        Public Event Table_Productos_VariacionRowDeleting As Table_Productos_VariacionRowChangeEventHandler
        
        Public Event Table_Productos_VariacionRowDeleted As Table_Productos_VariacionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Productos_VariacionRow(ByVal row As Table_Productos_VariacionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Productos_VariacionRow(ByVal CodigoInterno As String, ByVal Descripcion As String, ByVal Modelo As String, ByVal Existencia As String, ByVal PrecioAct As String, ByVal PrecioNue As String) As Table_Productos_VariacionRow
            Dim rowTable_Productos_VariacionRow As Table_Productos_VariacionRow = CType(Me.NewRow,Table_Productos_VariacionRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Descripcion, Modelo, Existencia, PrecioAct, PrecioNue}
            rowTable_Productos_VariacionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Productos_VariacionRow)
            Return rowTable_Productos_VariacionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Productos_VariacionDataTable = CType(MyBase.Clone,Table_Productos_VariacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Productos_VariacionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnExistencia = MyBase.Columns("Existencia")
            Me.columnPrecioAct = MyBase.Columns("PrecioAct")
            Me.columnPrecioNue = MyBase.Columns("PrecioNue")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnExistencia = New Global.System.Data.DataColumn("Existencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistencia)
            Me.columnPrecioAct = New Global.System.Data.DataColumn("PrecioAct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioAct)
            Me.columnPrecioNue = New Global.System.Data.DataColumn("PrecioNue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioNue)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Productos_VariacionRow() As Table_Productos_VariacionRow
            Return CType(Me.NewRow,Table_Productos_VariacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Productos_VariacionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Productos_VariacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Productos_VariacionRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Productos_VariacionRowChanged(Me, New Table_Productos_VariacionRowChangeEvent(CType(e.Row,Table_Productos_VariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Productos_VariacionRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Productos_VariacionRowChanging(Me, New Table_Productos_VariacionRowChangeEvent(CType(e.Row,Table_Productos_VariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Productos_VariacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Productos_VariacionRowDeleted(Me, New Table_Productos_VariacionRowChangeEvent(CType(e.Row,Table_Productos_VariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Productos_VariacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Productos_VariacionRowDeleting(Me, New Table_Productos_VariacionRowChangeEvent(CType(e.Row,Table_Productos_VariacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Productos_VariacionRow(ByVal row As Table_Productos_VariacionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Productos_VariacionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Guia_Almacenes_CuartosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigoProducto As Global.System.Data.DataColumn
        
        Private columnCodigoProductoF As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidadExistencia As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnUbicacion As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Guia_Almacenes_Cuartos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoProductoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoProductoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Guia_Almacenes_CuartosRow
            Get
                Return CType(Me.Rows(index),Table_Guia_Almacenes_CuartosRow)
            End Get
        End Property
        
        Public Event Table_Guia_Almacenes_CuartosRowChanging As Table_Guia_Almacenes_CuartosRowChangeEventHandler
        
        Public Event Table_Guia_Almacenes_CuartosRowChanged As Table_Guia_Almacenes_CuartosRowChangeEventHandler
        
        Public Event Table_Guia_Almacenes_CuartosRowDeleting As Table_Guia_Almacenes_CuartosRowChangeEventHandler
        
        Public Event Table_Guia_Almacenes_CuartosRowDeleted As Table_Guia_Almacenes_CuartosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Guia_Almacenes_CuartosRow(ByVal row As Table_Guia_Almacenes_CuartosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Guia_Almacenes_CuartosRow(ByVal Cantidad As String, ByVal CodigoProducto As String, ByVal CodigoProductoF As String, ByVal Nombre As String, ByVal CantidadExistencia As String, ByVal Modelo As String, ByVal Ubicacion As String, ByVal RazonSocial As String) As Table_Guia_Almacenes_CuartosRow
            Dim rowTable_Guia_Almacenes_CuartosRow As Table_Guia_Almacenes_CuartosRow = CType(Me.NewRow,Table_Guia_Almacenes_CuartosRow)
            Dim columnValuesArray() As Object = New Object() {Cantidad, CodigoProducto, CodigoProductoF, Nombre, CantidadExistencia, Modelo, Ubicacion, RazonSocial}
            rowTable_Guia_Almacenes_CuartosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Guia_Almacenes_CuartosRow)
            Return rowTable_Guia_Almacenes_CuartosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Guia_Almacenes_CuartosDataTable = CType(MyBase.Clone,Table_Guia_Almacenes_CuartosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Guia_Almacenes_CuartosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigoProducto = MyBase.Columns("CodigoProducto")
            Me.columnCodigoProductoF = MyBase.Columns("CodigoProductoF")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidadExistencia = MyBase.Columns("CantidadExistencia")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnUbicacion = MyBase.Columns("Ubicacion")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigoProducto = New Global.System.Data.DataColumn("CodigoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProducto)
            Me.columnCodigoProductoF = New Global.System.Data.DataColumn("CodigoProductoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoProductoF)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidadExistencia = New Global.System.Data.DataColumn("CantidadExistencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadExistencia)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnUbicacion = New Global.System.Data.DataColumn("Ubicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicacion)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Guia_Almacenes_CuartosRow() As Table_Guia_Almacenes_CuartosRow
            Return CType(Me.NewRow,Table_Guia_Almacenes_CuartosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Guia_Almacenes_CuartosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Guia_Almacenes_CuartosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Guia_Almacenes_CuartosRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Guia_Almacenes_CuartosRowChanged(Me, New Table_Guia_Almacenes_CuartosRowChangeEvent(CType(e.Row,Table_Guia_Almacenes_CuartosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Guia_Almacenes_CuartosRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Guia_Almacenes_CuartosRowChanging(Me, New Table_Guia_Almacenes_CuartosRowChangeEvent(CType(e.Row,Table_Guia_Almacenes_CuartosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Guia_Almacenes_CuartosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Guia_Almacenes_CuartosRowDeleted(Me, New Table_Guia_Almacenes_CuartosRowChangeEvent(CType(e.Row,Table_Guia_Almacenes_CuartosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Guia_Almacenes_CuartosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Guia_Almacenes_CuartosRowDeleting(Me, New Table_Guia_Almacenes_CuartosRowChangeEvent(CType(e.Row,Table_Guia_Almacenes_CuartosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Guia_Almacenes_CuartosRow(ByVal row As Table_Guia_Almacenes_CuartosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Guia_Almacenes_CuartosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_ChequesDevDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCheque As Global.System.Data.DataColumn
        
        Private columnFechaDep As Global.System.Data.DataColumn
        
        Private columnFechaDev As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnFact As Global.System.Data.DataColumn
        
        Private columnRecibo As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_ChequesDev"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_ChequesDevRow
            Get
                Return CType(Me.Rows(index),Table_ChequesDevRow)
            End Get
        End Property
        
        Public Event Table_ChequesDevRowChanging As Table_ChequesDevRowChangeEventHandler
        
        Public Event Table_ChequesDevRowChanged As Table_ChequesDevRowChangeEventHandler
        
        Public Event Table_ChequesDevRowDeleting As Table_ChequesDevRowChangeEventHandler
        
        Public Event Table_ChequesDevRowDeleted As Table_ChequesDevRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_ChequesDevRow(ByVal row As Table_ChequesDevRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_ChequesDevRow(ByVal Cheque As String, ByVal FechaDep As String, ByVal FechaDev As String, ByVal Monto As String, ByVal Fact As String, ByVal Recibo As String, ByVal Cliente As String) As Table_ChequesDevRow
            Dim rowTable_ChequesDevRow As Table_ChequesDevRow = CType(Me.NewRow,Table_ChequesDevRow)
            Dim columnValuesArray() As Object = New Object() {Cheque, FechaDep, FechaDev, Monto, Fact, Recibo, Cliente}
            rowTable_ChequesDevRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_ChequesDevRow)
            Return rowTable_ChequesDevRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_ChequesDevDataTable = CType(MyBase.Clone,Table_ChequesDevDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_ChequesDevDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCheque = MyBase.Columns("Cheque")
            Me.columnFechaDep = MyBase.Columns("FechaDep")
            Me.columnFechaDev = MyBase.Columns("FechaDev")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnFact = MyBase.Columns("Fact")
            Me.columnRecibo = MyBase.Columns("Recibo")
            Me.columnCliente = MyBase.Columns("Cliente")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCheque = New Global.System.Data.DataColumn("Cheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheque)
            Me.columnFechaDep = New Global.System.Data.DataColumn("FechaDep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDep)
            Me.columnFechaDev = New Global.System.Data.DataColumn("FechaDev", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDev)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnFact = New Global.System.Data.DataColumn("Fact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact)
            Me.columnRecibo = New Global.System.Data.DataColumn("Recibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecibo)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_ChequesDevRow() As Table_ChequesDevRow
            Return CType(Me.NewRow,Table_ChequesDevRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_ChequesDevRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_ChequesDevRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_ChequesDevRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_ChequesDevRowChanged(Me, New Table_ChequesDevRowChangeEvent(CType(e.Row,Table_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_ChequesDevRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_ChequesDevRowChanging(Me, New Table_ChequesDevRowChangeEvent(CType(e.Row,Table_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_ChequesDevRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_ChequesDevRowDeleted(Me, New Table_ChequesDevRowChangeEvent(CType(e.Row,Table_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_ChequesDevRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_ChequesDevRowDeleting(Me, New Table_ChequesDevRowChangeEvent(CType(e.Row,Table_ChequesDevRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_ChequesDevRow(ByVal row As Table_ChequesDevRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_ChequesDevDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_DetallesComisionPagadaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRecibo As Global.System.Data.DataColumn
        
        Private columnFactura As Global.System.Data.DataColumn
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columnFechaFact As Global.System.Data.DataColumn
        
        Private columnFechaDep As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnBase As Global.System.Data.DataColumn
        
        Private columnMontoD As Global.System.Data.DataColumn
        
        Private columnPorc As Global.System.Data.DataColumn
        
        Private columnComision As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_DetallesComisionPagada"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_DetallesComisionPagadaRow
            Get
                Return CType(Me.Rows(index),Table_DetallesComisionPagadaRow)
            End Get
        End Property
        
        Public Event Table_DetallesComisionPagadaRowChanging As Table_DetallesComisionPagadaRowChangeEventHandler
        
        Public Event Table_DetallesComisionPagadaRowChanged As Table_DetallesComisionPagadaRowChangeEventHandler
        
        Public Event Table_DetallesComisionPagadaRowDeleting As Table_DetallesComisionPagadaRowChangeEventHandler
        
        Public Event Table_DetallesComisionPagadaRowDeleted As Table_DetallesComisionPagadaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_DetallesComisionPagadaRow(ByVal row As Table_DetallesComisionPagadaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_DetallesComisionPagadaRow(ByVal Recibo As String, ByVal Factura As String, ByVal CodigoCliente As String, ByVal RazonSocial As String, ByVal Banco As String, ByVal FechaFact As Date, ByVal FechaDep As Date, ByVal Dias As String, ByVal Base As String, ByVal MontoD As String, ByVal Porc As String, ByVal Comision As String) As Table_DetallesComisionPagadaRow
            Dim rowTable_DetallesComisionPagadaRow As Table_DetallesComisionPagadaRow = CType(Me.NewRow,Table_DetallesComisionPagadaRow)
            Dim columnValuesArray() As Object = New Object() {Recibo, Factura, CodigoCliente, RazonSocial, Banco, FechaFact, FechaDep, Dias, Base, MontoD, Porc, Comision}
            rowTable_DetallesComisionPagadaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_DetallesComisionPagadaRow)
            Return rowTable_DetallesComisionPagadaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_DetallesComisionPagadaDataTable = CType(MyBase.Clone,Table_DetallesComisionPagadaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_DetallesComisionPagadaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecibo = MyBase.Columns("Recibo")
            Me.columnFactura = MyBase.Columns("Factura")
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columnFechaFact = MyBase.Columns("FechaFact")
            Me.columnFechaDep = MyBase.Columns("FechaDep")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnBase = MyBase.Columns("Base")
            Me.columnMontoD = MyBase.Columns("MontoD")
            Me.columnPorc = MyBase.Columns("Porc")
            Me.columnComision = MyBase.Columns("Comision")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecibo = New Global.System.Data.DataColumn("Recibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecibo)
            Me.columnFactura = New Global.System.Data.DataColumn("Factura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFactura)
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columnFechaFact = New Global.System.Data.DataColumn("FechaFact", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFact)
            Me.columnFechaDep = New Global.System.Data.DataColumn("FechaDep", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDep)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnBase = New Global.System.Data.DataColumn("Base", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase)
            Me.columnMontoD = New Global.System.Data.DataColumn("MontoD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoD)
            Me.columnPorc = New Global.System.Data.DataColumn("Porc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorc)
            Me.columnComision = New Global.System.Data.DataColumn("Comision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComision)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_DetallesComisionPagadaRow() As Table_DetallesComisionPagadaRow
            Return CType(Me.NewRow,Table_DetallesComisionPagadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_DetallesComisionPagadaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_DetallesComisionPagadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_DetallesComisionPagadaRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_DetallesComisionPagadaRowChanged(Me, New Table_DetallesComisionPagadaRowChangeEvent(CType(e.Row,Table_DetallesComisionPagadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_DetallesComisionPagadaRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_DetallesComisionPagadaRowChanging(Me, New Table_DetallesComisionPagadaRowChangeEvent(CType(e.Row,Table_DetallesComisionPagadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_DetallesComisionPagadaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_DetallesComisionPagadaRowDeleted(Me, New Table_DetallesComisionPagadaRowChangeEvent(CType(e.Row,Table_DetallesComisionPagadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_DetallesComisionPagadaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_DetallesComisionPagadaRowDeleting(Me, New Table_DetallesComisionPagadaRowChangeEvent(CType(e.Row,Table_DetallesComisionPagadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_DetallesComisionPagadaRow(ByVal row As Table_DetallesComisionPagadaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_DetallesComisionPagadaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Libro_VentasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnFact As Global.System.Data.DataColumn
        
        Private columnImp As Global.System.Data.DataColumn
        
        Private columnDev As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnRIF As Global.System.Data.DataColumn
        
        Private columnMontoBase As Global.System.Data.DataColumn
        
        Private columnImpuesto As Global.System.Data.DataColumn
        
        Private columnMontoFacturado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Libro_Ventas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoBaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoBase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFacturadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoFacturado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Libro_VentasRow
            Get
                Return CType(Me.Rows(index),Table_Libro_VentasRow)
            End Get
        End Property
        
        Public Event Table_Libro_VentasRowChanging As Table_Libro_VentasRowChangeEventHandler
        
        Public Event Table_Libro_VentasRowChanged As Table_Libro_VentasRowChangeEventHandler
        
        Public Event Table_Libro_VentasRowDeleting As Table_Libro_VentasRowChangeEventHandler
        
        Public Event Table_Libro_VentasRowDeleted As Table_Libro_VentasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Libro_VentasRow(ByVal row As Table_Libro_VentasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Libro_VentasRow(ByVal Fecha As String, ByVal Fact As String, ByVal Imp As String, ByVal Dev As String, ByVal Cliente As String, ByVal RIF As String, ByVal MontoBase As String, ByVal Impuesto As String, ByVal MontoFacturado As String) As Table_Libro_VentasRow
            Dim rowTable_Libro_VentasRow As Table_Libro_VentasRow = CType(Me.NewRow,Table_Libro_VentasRow)
            Dim columnValuesArray() As Object = New Object() {Fecha, Fact, Imp, Dev, Cliente, RIF, MontoBase, Impuesto, MontoFacturado}
            rowTable_Libro_VentasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Libro_VentasRow)
            Return rowTable_Libro_VentasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Libro_VentasDataTable = CType(MyBase.Clone,Table_Libro_VentasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Libro_VentasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnFact = MyBase.Columns("Fact")
            Me.columnImp = MyBase.Columns("Imp")
            Me.columnDev = MyBase.Columns("Dev")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnRIF = MyBase.Columns("RIF")
            Me.columnMontoBase = MyBase.Columns("MontoBase")
            Me.columnImpuesto = MyBase.Columns("Impuesto")
            Me.columnMontoFacturado = MyBase.Columns("MontoFacturado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnFact = New Global.System.Data.DataColumn("Fact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact)
            Me.columnImp = New Global.System.Data.DataColumn("Imp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImp)
            Me.columnDev = New Global.System.Data.DataColumn("Dev", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDev)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnRIF = New Global.System.Data.DataColumn("RIF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRIF)
            Me.columnMontoBase = New Global.System.Data.DataColumn("MontoBase", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoBase)
            Me.columnImpuesto = New Global.System.Data.DataColumn("Impuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuesto)
            Me.columnMontoFacturado = New Global.System.Data.DataColumn("MontoFacturado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFacturado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Libro_VentasRow() As Table_Libro_VentasRow
            Return CType(Me.NewRow,Table_Libro_VentasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Libro_VentasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Libro_VentasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Libro_VentasRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Libro_VentasRowChanged(Me, New Table_Libro_VentasRowChangeEvent(CType(e.Row,Table_Libro_VentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Libro_VentasRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Libro_VentasRowChanging(Me, New Table_Libro_VentasRowChangeEvent(CType(e.Row,Table_Libro_VentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Libro_VentasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Libro_VentasRowDeleted(Me, New Table_Libro_VentasRowChangeEvent(CType(e.Row,Table_Libro_VentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Libro_VentasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Libro_VentasRowDeleting(Me, New Table_Libro_VentasRowChangeEvent(CType(e.Row,Table_Libro_VentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Libro_VentasRow(ByVal row As Table_Libro_VentasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Libro_VentasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Tbl_DGV_EficaciaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCliente As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnF1 As Global.System.Data.DataColumn
        
        Private columnM1 As Global.System.Data.DataColumn
        
        Private columnF2 As Global.System.Data.DataColumn
        
        Private columnM2 As Global.System.Data.DataColumn
        
        Private columnV2 As Global.System.Data.DataColumn
        
        Private columnF3 As Global.System.Data.DataColumn
        
        Private columnM3 As Global.System.Data.DataColumn
        
        Private columnV3 As Global.System.Data.DataColumn
        
        Private columnF4 As Global.System.Data.DataColumn
        
        Private columnM4 As Global.System.Data.DataColumn
        
        Private columnV4 As Global.System.Data.DataColumn
        
        Private columnF5 As Global.System.Data.DataColumn
        
        Private columnM5 As Global.System.Data.DataColumn
        
        Private columnV5 As Global.System.Data.DataColumn
        
        Private columnF6 As Global.System.Data.DataColumn
        
        Private columnM6 As Global.System.Data.DataColumn
        
        Private columnV6 As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tbl_DGV_Eficacia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property V2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnV2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property V3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnV3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property V4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnV4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property V5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnV5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property F6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnF6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property V6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnV6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tbl_DGV_EficaciaRow
            Get
                Return CType(Me.Rows(index),Tbl_DGV_EficaciaRow)
            End Get
        End Property
        
        Public Event Tbl_DGV_EficaciaRowChanging As Tbl_DGV_EficaciaRowChangeEventHandler
        
        Public Event Tbl_DGV_EficaciaRowChanged As Tbl_DGV_EficaciaRowChangeEventHandler
        
        Public Event Tbl_DGV_EficaciaRowDeleting As Tbl_DGV_EficaciaRowChangeEventHandler
        
        Public Event Tbl_DGV_EficaciaRowDeleted As Tbl_DGV_EficaciaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTbl_DGV_EficaciaRow(ByVal row As Tbl_DGV_EficaciaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTbl_DGV_EficaciaRow( _
                    ByVal CodigoCliente As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal F1 As Long,  _
                    ByVal M1 As Decimal,  _
                    ByVal F2 As Long,  _
                    ByVal M2 As Decimal,  _
                    ByVal V2 As Boolean,  _
                    ByVal F3 As Long,  _
                    ByVal M3 As Decimal,  _
                    ByVal V3 As Boolean,  _
                    ByVal F4 As Long,  _
                    ByVal M4 As Decimal,  _
                    ByVal V4 As Boolean,  _
                    ByVal F5 As Long,  _
                    ByVal M5 As Decimal,  _
                    ByVal V5 As Boolean,  _
                    ByVal F6 As Long,  _
                    ByVal M6 As Decimal,  _
                    ByVal V6 As Boolean,  _
                    ByVal Total As Decimal) As Tbl_DGV_EficaciaRow
            Dim rowTbl_DGV_EficaciaRow As Tbl_DGV_EficaciaRow = CType(Me.NewRow,Tbl_DGV_EficaciaRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCliente, RazonSocial, F1, M1, F2, M2, V2, F3, M3, V3, F4, M4, V4, F5, M5, V5, F6, M6, V6, Total}
            rowTbl_DGV_EficaciaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTbl_DGV_EficaciaRow)
            Return rowTbl_DGV_EficaciaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Tbl_DGV_EficaciaDataTable = CType(MyBase.Clone,Tbl_DGV_EficaciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Tbl_DGV_EficaciaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnF1 = MyBase.Columns("F1")
            Me.columnM1 = MyBase.Columns("M1")
            Me.columnF2 = MyBase.Columns("F2")
            Me.columnM2 = MyBase.Columns("M2")
            Me.columnV2 = MyBase.Columns("V2")
            Me.columnF3 = MyBase.Columns("F3")
            Me.columnM3 = MyBase.Columns("M3")
            Me.columnV3 = MyBase.Columns("V3")
            Me.columnF4 = MyBase.Columns("F4")
            Me.columnM4 = MyBase.Columns("M4")
            Me.columnV4 = MyBase.Columns("V4")
            Me.columnF5 = MyBase.Columns("F5")
            Me.columnM5 = MyBase.Columns("M5")
            Me.columnV5 = MyBase.Columns("V5")
            Me.columnF6 = MyBase.Columns("F6")
            Me.columnM6 = MyBase.Columns("M6")
            Me.columnV6 = MyBase.Columns("V6")
            Me.columnTotal = MyBase.Columns("Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New Global.System.Data.DataColumn("CodigoCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnF1 = New Global.System.Data.DataColumn("F1", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF1)
            Me.columnM1 = New Global.System.Data.DataColumn("M1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM1)
            Me.columnF2 = New Global.System.Data.DataColumn("F2", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF2)
            Me.columnM2 = New Global.System.Data.DataColumn("M2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM2)
            Me.columnV2 = New Global.System.Data.DataColumn("V2", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnV2)
            Me.columnF3 = New Global.System.Data.DataColumn("F3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF3)
            Me.columnM3 = New Global.System.Data.DataColumn("M3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM3)
            Me.columnV3 = New Global.System.Data.DataColumn("V3", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnV3)
            Me.columnF4 = New Global.System.Data.DataColumn("F4", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF4)
            Me.columnM4 = New Global.System.Data.DataColumn("M4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM4)
            Me.columnV4 = New Global.System.Data.DataColumn("V4", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnV4)
            Me.columnF5 = New Global.System.Data.DataColumn("F5", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF5)
            Me.columnM5 = New Global.System.Data.DataColumn("M5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM5)
            Me.columnV5 = New Global.System.Data.DataColumn("V5", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnV5)
            Me.columnF6 = New Global.System.Data.DataColumn("F6", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnF6)
            Me.columnM6 = New Global.System.Data.DataColumn("M6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM6)
            Me.columnV6 = New Global.System.Data.DataColumn("V6", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnV6)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnV2.DefaultValue = CType(true,Boolean)
            Me.columnV3.DefaultValue = CType(true,Boolean)
            Me.columnV4.DefaultValue = CType(true,Boolean)
            Me.columnV5.DefaultValue = CType(true,Boolean)
            Me.columnV6.DefaultValue = CType(true,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTbl_DGV_EficaciaRow() As Tbl_DGV_EficaciaRow
            Return CType(Me.NewRow,Tbl_DGV_EficaciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Tbl_DGV_EficaciaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Tbl_DGV_EficaciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tbl_DGV_EficaciaRowChangedEvent) Is Nothing) Then
                RaiseEvent Tbl_DGV_EficaciaRowChanged(Me, New Tbl_DGV_EficaciaRowChangeEvent(CType(e.Row,Tbl_DGV_EficaciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tbl_DGV_EficaciaRowChangingEvent) Is Nothing) Then
                RaiseEvent Tbl_DGV_EficaciaRowChanging(Me, New Tbl_DGV_EficaciaRowChangeEvent(CType(e.Row,Tbl_DGV_EficaciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tbl_DGV_EficaciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tbl_DGV_EficaciaRowDeleted(Me, New Tbl_DGV_EficaciaRowChangeEvent(CType(e.Row,Tbl_DGV_EficaciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tbl_DGV_EficaciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tbl_DGV_EficaciaRowDeleting(Me, New Tbl_DGV_EficaciaRowChangeEvent(CType(e.Row,Tbl_DGV_EficaciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTbl_DGV_EficaciaRow(ByVal row As Tbl_DGV_EficaciaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Tbl_DGV_EficaciaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Catalogo_Productos_FotosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnDetallesModelo As Global.System.Data.DataColumn
        
        Private columnEmpaque As Global.System.Data.DataColumn
        
        Private columnMarcaProducto As Global.System.Data.DataColumn
        
        Private columnFoto As Global.System.Data.DataColumn
        
        Private columnCodigoInterno2 As Global.System.Data.DataColumn
        
        Private columnNombre2 As Global.System.Data.DataColumn
        
        Private columnMarca2 As Global.System.Data.DataColumn
        
        Private columnModelo2 As Global.System.Data.DataColumn
        
        Private columnDetallesModelo2 As Global.System.Data.DataColumn
        
        Private columnEmpaque2 As Global.System.Data.DataColumn
        
        Private columnMarcaProducto2 As Global.System.Data.DataColumn
        
        Private columnFoto2 As Global.System.Data.DataColumn
        
        Private columnCodigoInterno3 As Global.System.Data.DataColumn
        
        Private columnNombre3 As Global.System.Data.DataColumn
        
        Private columnMarca3 As Global.System.Data.DataColumn
        
        Private columnModelo3 As Global.System.Data.DataColumn
        
        Private columnDetallesModelo3 As Global.System.Data.DataColumn
        
        Private columnEmpaque3 As Global.System.Data.DataColumn
        
        Private columnMarcaProducto3 As Global.System.Data.DataColumn
        
        Private columnFoto3 As Global.System.Data.DataColumn
        
        Private columnMarcaC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Catalogo_Productos_Fotos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetallesModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetallesModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpaqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpaque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInterno2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Marca2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Modelo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetallesModelo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetallesModelo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Empaque2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpaque2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProducto2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Foto2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInterno3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Marca3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Modelo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetallesModelo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetallesModelo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Empaque3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpaque3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaProducto3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaProducto3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Foto3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFoto3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarcaC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Catalogo_Productos_FotosRow
            Get
                Return CType(Me.Rows(index),Table_Catalogo_Productos_FotosRow)
            End Get
        End Property
        
        Public Event Table_Catalogo_Productos_FotosRowChanging As Table_Catalogo_Productos_FotosRowChangeEventHandler
        
        Public Event Table_Catalogo_Productos_FotosRowChanged As Table_Catalogo_Productos_FotosRowChangeEventHandler
        
        Public Event Table_Catalogo_Productos_FotosRowDeleting As Table_Catalogo_Productos_FotosRowChangeEventHandler
        
        Public Event Table_Catalogo_Productos_FotosRowDeleted As Table_Catalogo_Productos_FotosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Catalogo_Productos_FotosRow(ByVal row As Table_Catalogo_Productos_FotosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Catalogo_Productos_FotosRow( _
                    ByVal CodigoInterno As String,  _
                    ByVal Nombre As String,  _
                    ByVal Marca As String,  _
                    ByVal Modelo As String,  _
                    ByVal DetallesModelo As String,  _
                    ByVal Empaque As String,  _
                    ByVal MarcaProducto As String,  _
                    ByVal Foto As String,  _
                    ByVal CodigoInterno2 As String,  _
                    ByVal Nombre2 As String,  _
                    ByVal Marca2 As String,  _
                    ByVal Modelo2 As String,  _
                    ByVal DetallesModelo2 As String,  _
                    ByVal Empaque2 As String,  _
                    ByVal MarcaProducto2 As String,  _
                    ByVal Foto2 As String,  _
                    ByVal CodigoInterno3 As String,  _
                    ByVal Nombre3 As String,  _
                    ByVal Marca3 As String,  _
                    ByVal Modelo3 As String,  _
                    ByVal DetallesModelo3 As String,  _
                    ByVal Empaque3 As String,  _
                    ByVal MarcaProducto3 As String,  _
                    ByVal Foto3 As String,  _
                    ByVal MarcaC As String) As Table_Catalogo_Productos_FotosRow
            Dim rowTable_Catalogo_Productos_FotosRow As Table_Catalogo_Productos_FotosRow = CType(Me.NewRow,Table_Catalogo_Productos_FotosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, Marca, Modelo, DetallesModelo, Empaque, MarcaProducto, Foto, CodigoInterno2, Nombre2, Marca2, Modelo2, DetallesModelo2, Empaque2, MarcaProducto2, Foto2, CodigoInterno3, Nombre3, Marca3, Modelo3, DetallesModelo3, Empaque3, MarcaProducto3, Foto3, MarcaC}
            rowTable_Catalogo_Productos_FotosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Catalogo_Productos_FotosRow)
            Return rowTable_Catalogo_Productos_FotosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Catalogo_Productos_FotosDataTable = CType(MyBase.Clone,Table_Catalogo_Productos_FotosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Catalogo_Productos_FotosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnDetallesModelo = MyBase.Columns("DetallesModelo")
            Me.columnEmpaque = MyBase.Columns("Empaque")
            Me.columnMarcaProducto = MyBase.Columns("MarcaProducto")
            Me.columnFoto = MyBase.Columns("Foto")
            Me.columnCodigoInterno2 = MyBase.Columns("CodigoInterno2")
            Me.columnNombre2 = MyBase.Columns("Nombre2")
            Me.columnMarca2 = MyBase.Columns("Marca2")
            Me.columnModelo2 = MyBase.Columns("Modelo2")
            Me.columnDetallesModelo2 = MyBase.Columns("DetallesModelo2")
            Me.columnEmpaque2 = MyBase.Columns("Empaque2")
            Me.columnMarcaProducto2 = MyBase.Columns("MarcaProducto2")
            Me.columnFoto2 = MyBase.Columns("Foto2")
            Me.columnCodigoInterno3 = MyBase.Columns("CodigoInterno3")
            Me.columnNombre3 = MyBase.Columns("Nombre3")
            Me.columnMarca3 = MyBase.Columns("Marca3")
            Me.columnModelo3 = MyBase.Columns("Modelo3")
            Me.columnDetallesModelo3 = MyBase.Columns("DetallesModelo3")
            Me.columnEmpaque3 = MyBase.Columns("Empaque3")
            Me.columnMarcaProducto3 = MyBase.Columns("MarcaProducto3")
            Me.columnFoto3 = MyBase.Columns("Foto3")
            Me.columnMarcaC = MyBase.Columns("MarcaC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnDetallesModelo = New Global.System.Data.DataColumn("DetallesModelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetallesModelo)
            Me.columnEmpaque = New Global.System.Data.DataColumn("Empaque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpaque)
            Me.columnMarcaProducto = New Global.System.Data.DataColumn("MarcaProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto)
            Me.columnFoto = New Global.System.Data.DataColumn("Foto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto)
            Me.columnCodigoInterno2 = New Global.System.Data.DataColumn("CodigoInterno2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno2)
            Me.columnNombre2 = New Global.System.Data.DataColumn("Nombre2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre2)
            Me.columnMarca2 = New Global.System.Data.DataColumn("Marca2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca2)
            Me.columnModelo2 = New Global.System.Data.DataColumn("Modelo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo2)
            Me.columnDetallesModelo2 = New Global.System.Data.DataColumn("DetallesModelo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetallesModelo2)
            Me.columnEmpaque2 = New Global.System.Data.DataColumn("Empaque2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpaque2)
            Me.columnMarcaProducto2 = New Global.System.Data.DataColumn("MarcaProducto2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto2)
            Me.columnFoto2 = New Global.System.Data.DataColumn("Foto2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto2)
            Me.columnCodigoInterno3 = New Global.System.Data.DataColumn("CodigoInterno3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno3)
            Me.columnNombre3 = New Global.System.Data.DataColumn("Nombre3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre3)
            Me.columnMarca3 = New Global.System.Data.DataColumn("Marca3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca3)
            Me.columnModelo3 = New Global.System.Data.DataColumn("Modelo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo3)
            Me.columnDetallesModelo3 = New Global.System.Data.DataColumn("DetallesModelo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetallesModelo3)
            Me.columnEmpaque3 = New Global.System.Data.DataColumn("Empaque3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpaque3)
            Me.columnMarcaProducto3 = New Global.System.Data.DataColumn("MarcaProducto3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaProducto3)
            Me.columnFoto3 = New Global.System.Data.DataColumn("Foto3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFoto3)
            Me.columnMarcaC = New Global.System.Data.DataColumn("MarcaC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarcaC)
            Me.columnCodigoInterno2.Caption = "CodigoInterno"
            Me.columnNombre2.Caption = "Nombre"
            Me.columnMarca2.Caption = "Marca"
            Me.columnModelo2.Caption = "Modelo"
            Me.columnDetallesModelo2.Caption = "DetallesModelo"
            Me.columnEmpaque2.Caption = "Empaque"
            Me.columnMarcaProducto2.Caption = "MarcaProducto"
            Me.columnFoto2.Caption = "Foto"
            Me.columnCodigoInterno3.Caption = "CodigoInterno"
            Me.columnNombre3.Caption = "Nombre"
            Me.columnMarca3.Caption = "Marca"
            Me.columnModelo3.Caption = "Modelo"
            Me.columnDetallesModelo3.Caption = "DetallesModelo"
            Me.columnEmpaque3.Caption = "Empaque"
            Me.columnMarcaProducto3.Caption = "MarcaProducto"
            Me.columnFoto3.Caption = "Foto"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Catalogo_Productos_FotosRow() As Table_Catalogo_Productos_FotosRow
            Return CType(Me.NewRow,Table_Catalogo_Productos_FotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Catalogo_Productos_FotosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Catalogo_Productos_FotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Catalogo_Productos_FotosRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Catalogo_Productos_FotosRowChanged(Me, New Table_Catalogo_Productos_FotosRowChangeEvent(CType(e.Row,Table_Catalogo_Productos_FotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Catalogo_Productos_FotosRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Catalogo_Productos_FotosRowChanging(Me, New Table_Catalogo_Productos_FotosRowChangeEvent(CType(e.Row,Table_Catalogo_Productos_FotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Catalogo_Productos_FotosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Catalogo_Productos_FotosRowDeleted(Me, New Table_Catalogo_Productos_FotosRowChangeEvent(CType(e.Row,Table_Catalogo_Productos_FotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Catalogo_Productos_FotosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Catalogo_Productos_FotosRowDeleting(Me, New Table_Catalogo_Productos_FotosRowChangeEvent(CType(e.Row,Table_Catalogo_Productos_FotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Catalogo_Productos_FotosRow(ByVal row As Table_Catalogo_Productos_FotosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Catalogo_Productos_FotosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_indice_ModelosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnPagina As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_indice_Modelos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaginaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPagina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_indice_ModelosRow
            Get
                Return CType(Me.Rows(index),Table_indice_ModelosRow)
            End Get
        End Property
        
        Public Event Table_indice_ModelosRowChanging As Table_indice_ModelosRowChangeEventHandler
        
        Public Event Table_indice_ModelosRowChanged As Table_indice_ModelosRowChangeEventHandler
        
        Public Event Table_indice_ModelosRowDeleting As Table_indice_ModelosRowChangeEventHandler
        
        Public Event Table_indice_ModelosRowDeleted As Table_indice_ModelosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_indice_ModelosRow(ByVal row As Table_indice_ModelosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_indice_ModelosRow(ByVal Modelo As String, ByVal Tipo As Short, ByVal Pagina As String, ByVal Marca As String) As Table_indice_ModelosRow
            Dim rowTable_indice_ModelosRow As Table_indice_ModelosRow = CType(Me.NewRow,Table_indice_ModelosRow)
            Dim columnValuesArray() As Object = New Object() {Modelo, Tipo, Pagina, Marca}
            rowTable_indice_ModelosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_indice_ModelosRow)
            Return rowTable_indice_ModelosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_indice_ModelosDataTable = CType(MyBase.Clone,Table_indice_ModelosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_indice_ModelosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnPagina = MyBase.Columns("Pagina")
            Me.columnMarca = MyBase.Columns("Marca")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnPagina = New Global.System.Data.DataColumn("Pagina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPagina)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_indice_ModelosRow() As Table_indice_ModelosRow
            Return CType(Me.NewRow,Table_indice_ModelosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_indice_ModelosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_indice_ModelosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_indice_ModelosRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_indice_ModelosRowChanged(Me, New Table_indice_ModelosRowChangeEvent(CType(e.Row,Table_indice_ModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_indice_ModelosRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_indice_ModelosRowChanging(Me, New Table_indice_ModelosRowChangeEvent(CType(e.Row,Table_indice_ModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_indice_ModelosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_indice_ModelosRowDeleted(Me, New Table_indice_ModelosRowChangeEvent(CType(e.Row,Table_indice_ModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_indice_ModelosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_indice_ModelosRowDeleting(Me, New Table_indice_ModelosRowChangeEvent(CType(e.Row,Table_indice_ModelosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_indice_ModelosRow(ByVal row As Table_indice_ModelosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_indice_ModelosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_indice_ProductosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnPagina As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_indice_Productos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaginaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPagina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_indice_ProductosRow
            Get
                Return CType(Me.Rows(index),Table_indice_ProductosRow)
            End Get
        End Property
        
        Public Event Table_indice_ProductosRowChanging As Table_indice_ProductosRowChangeEventHandler
        
        Public Event Table_indice_ProductosRowChanged As Table_indice_ProductosRowChangeEventHandler
        
        Public Event Table_indice_ProductosRowDeleting As Table_indice_ProductosRowChangeEventHandler
        
        Public Event Table_indice_ProductosRowDeleted As Table_indice_ProductosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_indice_ProductosRow(ByVal row As Table_indice_ProductosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_indice_ProductosRow(ByVal Codigo As String, ByVal Pagina As String) As Table_indice_ProductosRow
            Dim rowTable_indice_ProductosRow As Table_indice_ProductosRow = CType(Me.NewRow,Table_indice_ProductosRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Pagina}
            rowTable_indice_ProductosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_indice_ProductosRow)
            Return rowTable_indice_ProductosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_indice_ProductosDataTable = CType(MyBase.Clone,Table_indice_ProductosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_indice_ProductosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnPagina = MyBase.Columns("Pagina")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnPagina = New Global.System.Data.DataColumn("Pagina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPagina)
            Me.columnCodigo.Caption = "Modelo"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_indice_ProductosRow() As Table_indice_ProductosRow
            Return CType(Me.NewRow,Table_indice_ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_indice_ProductosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_indice_ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_indice_ProductosRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_indice_ProductosRowChanged(Me, New Table_indice_ProductosRowChangeEvent(CType(e.Row,Table_indice_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_indice_ProductosRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_indice_ProductosRowChanging(Me, New Table_indice_ProductosRowChangeEvent(CType(e.Row,Table_indice_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_indice_ProductosRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_indice_ProductosRowDeleted(Me, New Table_indice_ProductosRowChangeEvent(CType(e.Row,Table_indice_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_indice_ProductosRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_indice_ProductosRowDeleting(Me, New Table_indice_ProductosRowChangeEvent(CType(e.Row,Table_indice_ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_indice_ProductosRow(ByVal row As Table_indice_ProductosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_indice_ProductosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_Producto_EtiquetaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoInterno As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCodigoF As Global.System.Data.DataColumn
        
        Private columnProveedor As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Producto_Etiqueta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_Producto_EtiquetaRow
            Get
                Return CType(Me.Rows(index),Table_Producto_EtiquetaRow)
            End Get
        End Property
        
        Public Event Table_Producto_EtiquetaRowChanging As Table_Producto_EtiquetaRowChangeEventHandler
        
        Public Event Table_Producto_EtiquetaRowChanged As Table_Producto_EtiquetaRowChangeEventHandler
        
        Public Event Table_Producto_EtiquetaRowDeleting As Table_Producto_EtiquetaRowChangeEventHandler
        
        Public Event Table_Producto_EtiquetaRowDeleted As Table_Producto_EtiquetaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_Producto_EtiquetaRow(ByVal row As Table_Producto_EtiquetaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_Producto_EtiquetaRow(ByVal CodigoInterno As String, ByVal Nombre As String, ByVal CodigoF As String, ByVal Proveedor As String, ByVal Precio As Double, ByVal Modelo As String, ByVal Marca As String, ByVal Cantidad As String) As Table_Producto_EtiquetaRow
            Dim rowTable_Producto_EtiquetaRow As Table_Producto_EtiquetaRow = CType(Me.NewRow,Table_Producto_EtiquetaRow)
            Dim columnValuesArray() As Object = New Object() {CodigoInterno, Nombre, CodigoF, Proveedor, Precio, Modelo, Marca, Cantidad}
            rowTable_Producto_EtiquetaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_Producto_EtiquetaRow)
            Return rowTable_Producto_EtiquetaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_Producto_EtiquetaDataTable = CType(MyBase.Clone,Table_Producto_EtiquetaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_Producto_EtiquetaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoInterno = MyBase.Columns("CodigoInterno")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCodigoF = MyBase.Columns("CodigoF")
            Me.columnProveedor = MyBase.Columns("Proveedor")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnCantidad = MyBase.Columns("Cantidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoInterno = New Global.System.Data.DataColumn("CodigoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoInterno)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCodigoF = New Global.System.Data.DataColumn("CodigoF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoF)
            Me.columnProveedor = New Global.System.Data.DataColumn("Proveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProveedor)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_Producto_EtiquetaRow() As Table_Producto_EtiquetaRow
            Return CType(Me.NewRow,Table_Producto_EtiquetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_Producto_EtiquetaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_Producto_EtiquetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_Producto_EtiquetaRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_Producto_EtiquetaRowChanged(Me, New Table_Producto_EtiquetaRowChangeEvent(CType(e.Row,Table_Producto_EtiquetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_Producto_EtiquetaRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_Producto_EtiquetaRowChanging(Me, New Table_Producto_EtiquetaRowChangeEvent(CType(e.Row,Table_Producto_EtiquetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_Producto_EtiquetaRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_Producto_EtiquetaRowDeleted(Me, New Table_Producto_EtiquetaRowChangeEvent(CType(e.Row,Table_Producto_EtiquetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_Producto_EtiquetaRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_Producto_EtiquetaRowDeleting(Me, New Table_Producto_EtiquetaRowChangeEvent(CType(e.Row,Table_Producto_EtiquetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_Producto_EtiquetaRow(ByVal row As Table_Producto_EtiquetaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As MELDataSet = New MELDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_Producto_EtiquetaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProducto_GranSelectRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProducto_GranSelect As sp_consultaProducto_GranSelectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProducto_GranSelect = CType(Me.Table,sp_consultaProducto_GranSelectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProducto_GranSelect.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProducto_GranSelect' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaProducto_GranSelect' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_consultaProducto_GranSelect' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.Modelo2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo2' in table 'sp_consultaProducto_GranSelect' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.Modelo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto_GranSelect.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consultaProducto_GranSelect' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto_GranSelect.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProducto_GranSelect.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaProducto_GranSelect.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_consultaProducto_GranSelect.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModelo2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.Modelo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModelo2Null()
            Me(Me.tablesp_consultaProducto_GranSelect.Modelo2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto_GranSelect.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consultaProducto_GranSelect.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaIVARow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaIVA As sp_consultaIVADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaIVA = CType(Me.Table,sp_consultaIVADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property iva() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaIVA.ivaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'iva' in table 'sp_consultaIVA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaIVA.ivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsivaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaIVA.ivaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetivaNull()
            Me(Me.tablesp_consultaIVA.ivaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProducto As sp_consultaProductoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProducto = CType(Me.Table,sp_consultaProductoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProducto.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProducto.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoArancelario() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.CodigoArancelarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoArancelario' in table 'sp_consultaProducto' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.CodigoArancelarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProducto.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProducto.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'sp_consultaProducto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.FotoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto' in table 'sp_consultaProducto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.FotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProducto.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProducto.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProducto.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProducto.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoPromedio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.CostoPromedioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostoPromedio' in table 'sp_consultaProducto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.CostoPromedioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClasificacionABC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.ClasificacionABCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClasificacionABC' in table 'sp_consultaProducto' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.ClasificacionABCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadVendida() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.CantidadVendidaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadVendida' in table 'sp_consultaProducto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.CantidadVendidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UtilidadProducto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.UtilidadProductoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UtilidadProducto' in table 'sp_consultaProducto' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.UtilidadProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProducto.eliminadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'eliminado' in table 'sp_consultaProducto' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProducto.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoArancelarioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.CodigoArancelarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoArancelarioNull()
            Me(Me.tablesp_consultaProducto.CodigoArancelarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tablesp_consultaProducto.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.FotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoNull()
            Me(Me.tablesp_consultaProducto.FotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoPromedioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.CostoPromedioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoPromedioNull()
            Me(Me.tablesp_consultaProducto.CostoPromedioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasificacionABCNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.ClasificacionABCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasificacionABCNull()
            Me(Me.tablesp_consultaProducto.ClasificacionABCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadVendidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.CantidadVendidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadVendidaNull()
            Me(Me.tablesp_consultaProducto.CantidadVendidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUtilidadProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.UtilidadProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUtilidadProductoNull()
            Me(Me.tablesp_consultaProducto.UtilidadProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseliminadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProducto.eliminadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteliminadoNull()
            Me(Me.tablesp_consultaProducto.eliminadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaFacturasPagadasRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaFacturasPagadas As sp_consultaFacturasPagadasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaFacturasPagadas = CType(Me.Table,sp_consultaFacturasPagadasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFacturasPagadas.ControlInicioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaFacturasPagadas' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NControl() As String
            Get
                Return CType(Me(Me.tablesp_consultaFacturasPagadas.NControlColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.NControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFacturasPagadas.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_consultaFacturasPagadas' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFacturasPagadas.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_consultaFacturasPagadas' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaD() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFacturasPagadas.FechaDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaD' in table 'sp_consultaFacturasPagadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.FechaDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFacturasPagadas.MontoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'sp_consultaFacturasPagadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dev() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFacturasPagadas.DevColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dev' in table 'sp_consultaFacturasPagadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFacturasPagadas.DevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFacturasPagadas.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaFacturasPagadas.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFacturasPagadas.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_consultaFacturasPagadas.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFacturasPagadas.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_consultaFacturasPagadas.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFacturasPagadas.FechaDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDNull()
            Me(Me.tablesp_consultaFacturasPagadas.FechaDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFacturasPagadas.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tablesp_consultaFacturasPagadas.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDevNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFacturasPagadas.DevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDevNull()
            Me(Me.tablesp_consultaFacturasPagadas.DevColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaMarcaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaMarca As sp_consultaMarcaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaMarca = CType(Me.Table,sp_consultaMarcaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Return CType(Me(Me.tablesp_consultaMarca.MarcaColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaMarca.MarcaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_producto_pedido_guiaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_producto_pedido_guia As sp_consulta_producto_pedido_guiaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_producto_pedido_guia = CType(Me.Table,sp_consulta_producto_pedido_guiaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_producto_pedido_guia.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_consulta_producto_pedido_guia' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_producto_pedido_guia.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_consulta_producto_pedido_guia.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_producto_pedido_guia.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_producto_pedido_guia.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consulta_producto_pedido_guia"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_producto_pedido_guia.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consulta_producto_pedido_guia.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_producto_pedido_guia.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_producto_pedido_guia.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'sp_consulta_producto_pedido_guia' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_producto_pedido_guia.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tablesp_consulta_producto_pedido_guia.ModeloColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_producto_pedido_guia.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_producto_pedido_guia.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_consulta_producto_pedido_guia.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_producto_pedido_guia.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consulta_producto_pedido_guia.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_producto_pedido_guia.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablesp_consulta_producto_pedido_guia.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaPreferenciasRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaPreferencias As sp_consultaPreferenciasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaPreferencias = CType(Me.Table,sp_consultaPreferenciasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaPreferencias.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPreferencias.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPreferencia() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaPreferencias.CodigoPreferenciaColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaPreferencias.CodigoPreferenciaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_VerTransporteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_VerTransporte As sp_VerTransporteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_VerTransporte = CType(Me.Table,sp_VerTransporteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTransporte() As Integer
            Get
                Return CType(Me(Me.tablesp_VerTransporte.CodigoTransporteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_VerTransporte.CodigoTransporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_VerTransporte.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_VerTransporte.NombreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaNC_rdlcRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaNC_rdlc As sp_consultaNC_rdlcDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaNC_rdlc = CType(Me.Table,sp_consultaNC_rdlcDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroControl() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNC_rdlc.NroControlColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.NroControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.ControlInicioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaNC_rdlc.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaF() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.FechaFColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaF' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.FechaFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.RifColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rif' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono1' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono2' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tablesp_consultaNC_rdlc.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Return CType(Me(Me.tablesp_consultaNC_rdlc.ObservacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.IvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Iva' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaNC_rdlc.TipoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoNotaCredito() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNC_rdlc.CodigoNotaCreditoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.CodigoNotaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNC_rdlc.MontoTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotal' in table 'sp_consultaNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNC_rdlc.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaNC_rdlc.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.FechaFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFNull()
            Me(Me.tablesp_consultaNC_rdlc.FechaFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_consultaNC_rdlc.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_consultaNC_rdlc.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablesp_consultaNC_rdlc.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRifNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.RifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRifNull()
            Me(Me.tablesp_consultaNC_rdlc.RifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tablesp_consultaNC_rdlc.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tablesp_consultaNC_rdlc.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.IvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIvaNull()
            Me(Me.tablesp_consultaNC_rdlc.IvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNC_rdlc.MontoTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalNull()
            Me(Me.tablesp_consultaNC_rdlc.MontoTotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_Listado_ModeloRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_Listado_Modelo As sp_consulta_Listado_ModeloDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_Listado_Modelo = CType(Me.Table,sp_consulta_Listado_ModeloDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Modelo.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empaque() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Modelo.EmpaqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Empaque' in table 'sp_consulta_Listado_Modelo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.EmpaqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Modelo.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consulta_Listado_Modelo' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Modelo.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Modelo.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'sp_consulta_Listado_Modelo' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Modelo.MarcaColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Modelo.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Modelo.cantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.cantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Modelo.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consulta_Listado_Modelo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Modelo.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpaqueNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Modelo.EmpaqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpaqueNull()
            Me(Me.tablesp_consulta_Listado_Modelo.EmpaqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Modelo.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consulta_Listado_Modelo.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Modelo.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tablesp_consulta_Listado_Modelo.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Modelo.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consulta_Listado_Modelo.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_Listado_AlfabeticoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_Listado_Alfabetico As sp_consulta_Listado_AlfabeticoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_Listado_Alfabetico = CType(Me.Table,sp_consulta_Listado_AlfabeticoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consulta_Listado_Alfabetico' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consulta_Listado_Alfabetico' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paraOrdenar() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.paraOrdenarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paraOrdenar' in table 'sp_consulta_Listado_Alfabetico' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.paraOrdenarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'sp_consulta_Listado_Alfabetico' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.mpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mp' in table 'sp_consulta_Listado_Alfabetico' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consulta_Listado_Alfabetico' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consulta_Listado_Alfabetico.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consulta_Listado_Alfabetico.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Alfabetico.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consulta_Listado_Alfabetico.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Alfabetico.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consulta_Listado_Alfabetico.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsparaOrdenarNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Alfabetico.paraOrdenarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetparaOrdenarNull()
            Me(Me.tablesp_consulta_Listado_Alfabetico.paraOrdenarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Alfabetico.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tablesp_consulta_Listado_Alfabetico.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmpNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Alfabetico.mpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmpNull()
            Me(Me.tablesp_consulta_Listado_Alfabetico.mpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Listado_Alfabetico.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consulta_Listado_Alfabetico.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaFacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaFactura As sp_consultaFacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaFactura = CType(Me.Table,sp_consultaFacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaFactura.NumeroFacturaColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaFactura.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaFactura.ControlInicioColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturador() As String
            Get
                Return CType(Me(Me.tablesp_consultaFactura.FacturadorColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.FacturadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroBultos() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.NumeroBultosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroBultos' in table 'sp_consultaFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.NumeroBultosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoCancelado() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaFactura.MontoCanceladoColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.MontoCanceladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaFactura.MontoTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCred() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.DiasCredColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiasCred' in table 'sp_consultaFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.DiasCredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPedido() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaFactura.CodigoPedidoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.CodigoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaFactura.IvaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaFactura.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enviado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.EnviadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Enviado' in table 'sp_consultaFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.EnviadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entregada() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.EntregadaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Entregada' in table 'sp_consultaFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.EntregadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservacionPedido() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.ObservacionPedidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservacionPedido' in table 'sp_consultaFactura' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.ObservacionPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactura.VendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendedor' in table 'sp_consultaFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactura.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroBultosNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.NumeroBultosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroBultosNull()
            Me(Me.tablesp_consultaFactura.NumeroBultosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaFactura.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasCredNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.DiasCredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasCredNull()
            Me(Me.tablesp_consultaFactura.DiasCredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnviadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.EnviadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnviadoNull()
            Me(Me.tablesp_consultaFactura.EnviadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntregadaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.EntregadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntregadaNull()
            Me(Me.tablesp_consultaFactura.EntregadaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionPedidoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.ObservacionPedidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionPedidoNull()
            Me(Me.tablesp_consultaFactura.ObservacionPedidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactura.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_consultaFactura.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaPedido_Producto_ClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaPedido_Producto_Cliente As sp_consultaPedido_Producto_ClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaPedido_Producto_Cliente = CType(Me.Table,sp_consultaPedido_Producto_ClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consultaPedido_Producto_Clien"& _ 
                            "te' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaPedido_Producto_Cliente' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.ModeloColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoTramoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaPedido_Producto_Cliente' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_consultaPedido_Producto_Cliente' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Chequeado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.ChequeadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Chequeado' in table 'sp_consultaPedido_Producto_Cliente' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.ChequeadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaPedido_Producto_Cliente' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'sp_consultaPedido_Producto_Cliente' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChequeadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.ChequeadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChequeadoNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.ChequeadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedido_Producto_Cliente.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tablesp_consultaPedido_Producto_Cliente.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_prefacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_prefactura As sp_prefacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_prefactura = CType(Me.Table,sp_prefacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_prefactura.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_prefactura.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_prefactura.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_prefactura.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tablesp_prefactura.ModeloColumn),String)
            End Get
            Set
                Me(Me.tablesp_prefactura.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_prefactura.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_prefactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_prefactura.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_prefactura.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'sp_prefactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_prefactura.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_prefactura.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subtotal' in table 'sp_prefactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_prefactura.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_prefactura.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_prefactura.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablesp_prefactura.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablesp_prefactura.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_prefactura.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_prefactura.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_R_traspasosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_R_traspasos As sp_R_traspasosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_R_traspasos = CType(Me.Table,sp_R_traspasosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codproducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_traspasos.codproductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codproducto' in table 'sp_R_traspasos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_traspasos.codproductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_R_traspasos.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_R_traspasos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacionant() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_traspasos.UbicacionantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacionant' in table 'sp_R_traspasos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_traspasos.UbicacionantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacionact() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_traspasos.UbicacionactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacionact' in table 'sp_R_traspasos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_traspasos.UbicacionactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cant() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_traspasos.cantColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cant' in table 'sp_R_traspasos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_traspasos.cantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_traspasos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_R_traspasos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_traspasos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_traspasos.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_R_traspasos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_traspasos.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodproductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_traspasos.codproductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodproductoNull()
            Me(Me.tablesp_R_traspasos.codproductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionantNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_traspasos.UbicacionantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionantNull()
            Me(Me.tablesp_R_traspasos.UbicacionantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionactNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_traspasos.UbicacionactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionactNull()
            Me(Me.tablesp_R_traspasos.UbicacionactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_traspasos.cantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantNull()
            Me(Me.tablesp_R_traspasos.cantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_traspasos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_R_traspasos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_traspasos.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_R_traspasos.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaproductosNC_rdlcRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaproductosNC_rdlc As sp_consultaproductosNC_rdlcDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaproductosNC_rdlc = CType(Me.Table,sp_consultaproductosNC_rdlcDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dev() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaproductosNC_rdlc.DevColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaproductosNC_rdlc.DevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaproductosNC_rdlc.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_consultaproductosNC_rdlc' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaproductosNC_rdlc.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaproductosNC_rdlc.CodigoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProducto' in table 'sp_consultaproductosNC_rdlc' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaproductosNC_rdlc.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaproductosNC_rdlc.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaproductosNC_rdlc.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaproductosNC_rdlc.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'sp_consultaproductosNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaproductosNC_rdlc.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaproductosNC_rdlc.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaproductosNC_rdlc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaproductosNC_rdlc.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaproductosNC_rdlc.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_consultaproductosNC_rdlc.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaproductosNC_rdlc.CodigoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoNull()
            Me(Me.tablesp_consultaproductosNC_rdlc.CodigoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaproductosNC_rdlc.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablesp_consultaproductosNC_rdlc.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaproductosNC_rdlc.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaproductosNC_rdlc.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosVariacionRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosVariacion As sp_consultaProductosVariacionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosVariacion = CType(Me.Table,sp_consultaProductosVariacionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosVariacion.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosVariacion.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosVariacion.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosVariacion' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProductosVariacion.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoPromedio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosVariacion.CostoPromedioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostoPromedio' in table 'sp_consultaProductosVariacion' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.CostoPromedioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProductosVariacion.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioNuevo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosVariacion.PrecioNuevoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioNuevo' in table 'sp_consultaProductosVariacion' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.PrecioNuevoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosVariacion.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaProductosVariacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grupo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosVariacion.GrupoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grupo' in table 'sp_consultaProductosVariacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.GrupoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosVariacion.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'sp_consultaProductosVariacion' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosVariacion.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosVariacion.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosVariacion.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoPromedioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosVariacion.CostoPromedioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoPromedioNull()
            Me(Me.tablesp_consultaProductosVariacion.CostoPromedioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNuevoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosVariacion.PrecioNuevoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNuevoNull()
            Me(Me.tablesp_consultaProductosVariacion.PrecioNuevoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosVariacion.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaProductosVariacion.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosVariacion.GrupoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoNull()
            Me(Me.tablesp_consultaProductosVariacion.GrupoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosVariacion.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tablesp_consultaProductosVariacion.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_ConsultaClienteFacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_ConsultaClienteFactura As sp_ConsultaClienteFacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_ConsultaClienteFactura = CType(Me.Table,sp_ConsultaClienteFacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As Integer
            Get
                Return CType(Me(Me.tablesp_ConsultaClienteFactura.NumeroFacturaColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_ConsultaClienteFactura.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Return CType(Me(Me.tablesp_ConsultaClienteFactura.ControlInicioColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_ConsultaClienteFactura.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_ConsultaClienteFactura.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_ConsultaClienteFactura.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_ConsultaClienteFactura.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_ConsultaClienteFactura.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaClienteFactura.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Estado' in table 'sp_ConsultaClienteFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaClienteFactura.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Control() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaClienteFactura.ControlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Control' in table 'sp_ConsultaClienteFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaClienteFactura.ControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaClienteFactura.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_ConsultaClienteFactura.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaClienteFactura.ControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlNull()
            Me(Me.tablesp_ConsultaClienteFactura.ControlColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductoGranSelect2Row
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductoGranSelect2 As sp_consultaProductoGranSelect2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductoGranSelect2 = CType(Me.Table,sp_consultaProductoGranSelect2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductoGranSelect2.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoGranSelect2.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaProductoGranSelect2' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProductoGranSelect2.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProductoGranSelect2.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoGranSelect2.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductoGranSelect2' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoGranSelect2.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaProductoGranSelect2' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoGranSelect2.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_consultaProductoGranSelect2' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoGranSelect2.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoGranSelect2.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaProductoGranSelect2.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoGranSelect2.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductoGranSelect2.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoGranSelect2.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaProductoGranSelect2.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoGranSelect2.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_consultaProductoGranSelect2.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_lvAjustesPorNCRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_lvAjustesPorNC As sp_lvAjustesPorNCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_lvAjustesPorNC = CType(Me.Table,sp_lvAjustesPorNCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAjuste() As String
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.CodigoAjusteColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.CodigoAjusteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.ObservacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoNota() As Integer
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.CodigoNotaColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.CodigoNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As String
            Get
                Return CType(Me(Me.tablesp_lvAjustesPorNC.ControlInicioColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlNota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvAjustesPorNC.ControlNotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlNota' in table 'sp_lvAjustesPorNC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvAjustesPorNC.ControlNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvAjustesPorNC.ControlNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlNotaNull()
            Me(Me.tablesp_lvAjustesPorNC.ControlNotaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaNotaCreditoNoAjustadaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaNotaCreditoNoAjustada As sp_consultaNotaCreditoNoAjustadaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaNotaCreditoNoAjustada = CType(Me.Table,sp_consultaNotaCreditoNoAjustadaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroControl() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.NroControlColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.NroControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.ControlInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaNotaCreditoNoAjustada' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.ObservacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.IvaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.TipoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoNotaCredito() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.CodigoNotaCreditoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.CodigoNotaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.MontoTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroControl2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotaCreditoNoAjustada.NroControl2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NroControl2' in table 'sp_consultaNotaCreditoNoAjustada' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotaCreditoNoAjustada.NroControl2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotaCreditoNoAjustada.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaNotaCreditoNoAjustada.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNroControl2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotaCreditoNoAjustada.NroControl2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNroControl2Null()
            Me(Me.tablesp_consultaNotaCreditoNoAjustada.NroControl2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosParaPedidoCompraRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosParaPedidoCompra As sp_consultaProductosParaPedidoCompraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosParaPedidoCompra = CType(Me.Table,sp_consultaProductosParaPedidoCompraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.Cant2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cant2' in table 'sp_consultaProductosParaPedidoCompra' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.Cant2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaProductosParaPedidoCompra' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.Variante1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Variante1' in table 'sp_consultaProductosParaPedidoCompra' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.Variante1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.Variante2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Variante2' in table 'sp_consultaProductosParaPedidoCompra' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.Variante2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosParaPedidoCompra' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaProductosParaPedidoCompra' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OEM() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.OEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OEM' in table 'sp_consultaProductosParaPedidoCompra' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.OEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consultaProductosParaPedidoCo"& _ 
                            "mpra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'sp_consultaProductosParaPedidoCompra' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoF' in table 'sp_consultaProductosParaPedidoCompra' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCant2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.Cant2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCant2Null()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.Cant2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante1Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.Variante1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante1Null()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.Variante1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.Variante2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante2Null()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.Variante2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOEMNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.OEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOEMNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.OEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaPedidoCompra.CodigoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFNull()
            Me(Me.tablesp_consultaProductosParaPedidoCompra.CodigoFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosGruposRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosGrupos As sp_consultaProductosGruposDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosGrupos = CType(Me.Table,sp_consultaProductosGruposDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosGrupos.CHKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHK' in table 'sp_consultaProductosGrupos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.CHKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosGrupos.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosGrupos.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosGrupos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosGrupos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProductosGrupos.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosGrupos.CantidadExistenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadExistencia' in table 'sp_consultaProductosGrupos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grupos() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosGrupos.GruposColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grupos' in table 'sp_consultaProductosGrupos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.GruposColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosGrupos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaProductosGrupos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosGrupos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosGrupos.CHKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKNull()
            Me(Me.tablesp_consultaProductosGrupos.CHKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosGrupos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosGrupos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadExistenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosGrupos.CantidadExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadExistenciaNull()
            Me(Me.tablesp_consultaProductosGrupos.CantidadExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGruposNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosGrupos.GruposColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGruposNull()
            Me(Me.tablesp_consultaProductosGrupos.GruposColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosGrupos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaProductosGrupos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosCodArancelariosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosCodArancelarios As sp_consultaProductosCodArancelariosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosCodArancelarios = CType(Me.Table,sp_consultaProductosCodArancelariosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosCodArancelarios.CHKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHK' in table 'sp_consultaProductosCodArancelarios' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosCodArancelarios.CHKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosCodArancelarios.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosCodArancelarios.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosCodArancelarios.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosCodArancelarios.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosCodArancelarios.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosCodArancelarios' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosCodArancelarios.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosCodArancelarios.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaProductosCodArancelarios' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosCodArancelarios.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoArancelario() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosCodArancelarios.CodigoArancelarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoArancelario' in table 'sp_consultaProductosCodArancel"& _ 
                            "arios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosCodArancelarios.CodigoArancelarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosCodArancelarios.CHKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKNull()
            Me(Me.tablesp_consultaProductosCodArancelarios.CHKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosCodArancelarios.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosCodArancelarios.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosCodArancelarios.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaProductosCodArancelarios.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoArancelarioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosCodArancelarios.CodigoArancelarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoArancelarioNull()
            Me(Me.tablesp_consultaProductosCodArancelarios.CodigoArancelarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaCatalogo2Row
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCatalogo2 As sp_consultaCatalogo2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCatalogo2 = CType(Me.Table,sp_consultaCatalogo2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogo2.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaCatalogo2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaCatalogo2.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaCatalogo2.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaCatalogo2.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaCatalogo2.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoPromedio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogo2.CostoPromedioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostoPromedio' in table 'sp_consultaCatalogo2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.CostoPromedioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogo2.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaCatalogo2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogo2.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogo2.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaCatalogo2.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoPromedioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogo2.CostoPromedioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoPromedioNull()
            Me(Me.tablesp_consultaCatalogo2.CostoPromedioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogo2.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaCatalogo2.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosEvaluacionDSSRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosEvaluacionDSS As sp_consultaProductosEvaluacionDSSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosEvaluacionDSS = CType(Me.Table,sp_consultaProductosEvaluacionDSSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosEvaluacionDSS.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosEvaluacionDSS.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosEvaluacionDSS.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosEvaluacionDSS.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosEvaluacionDSS.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosEvaluacionDSS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosEvaluacionDSS.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProductosEvaluacionDSS.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProductosEvaluacionDSS.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosEvaluacionDSS.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_consultaProductosEvaluacionDSS'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosEvaluacionDSS.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosEvaluacionDSS.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosEvaluacionDSS.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosEvaluacionDSS.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_consultaProductosEvaluacionDSS.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_analisisCobranzasRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_analisisCobranzas As sp_analisisCobranzasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_analisisCobranzas = CType(Me.Table,sp_analisisCobranzasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Return CType(Me(Me.tablesp_analisisCobranzas.fechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property control() As Decimal
            Get
                Return CType(Me(Me.tablesp_analisisCobranzas.controlColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.controlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.montoTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'montoTotal' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.montoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCred() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.DiasCredColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiasCred' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.DiasCredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vencimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.VencimientoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vencimiento' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.VencimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.DiasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoPendiente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.MontoPendienteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoPendiente' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.MontoPendienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As Integer
            Get
                Return CType(Me(Me.tablesp_analisisCobranzas.NumeroFacturaColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Return CType(Me(Me.tablesp_analisisCobranzas.IvaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_analisisCobranzas.VendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendedor' in table 'sp_analisisCobranzas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_analisisCobranzas.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_analisisCobranzas.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_analisisCobranzas.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.montoTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoTotalNull()
            Me(Me.tablesp_analisisCobranzas.montoTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasCredNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.DiasCredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasCredNull()
            Me(Me.tablesp_analisisCobranzas.DiasCredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVencimientoNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.VencimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVencimientoNull()
            Me(Me.tablesp_analisisCobranzas.VencimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tablesp_analisisCobranzas.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoPendienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.MontoPendienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoPendienteNull()
            Me(Me.tablesp_analisisCobranzas.MontoPendienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_analisisCobranzas.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_analisisCobranzas.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaAjustesSaldosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaAjustesSaldos As sp_consultaAjustesSaldosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaAjustesSaldos = CType(Me.Table,sp_consultaAjustesSaldosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroAjuste() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaAjustesSaldos.NumeroAjusteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroAjuste' in table 'sp_consultaAjustesSaldos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaAjustesSaldos.NumeroAjusteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaAjustesSaldos.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaAjustesSaldos.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaAjustesSaldos.NumeroFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroFactura' in table 'sp_consultaAjustesSaldos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaAjustesSaldos.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaAjustesSaldos.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'sp_consultaAjustesSaldos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaAjustesSaldos.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tablesp_consultaAjustesSaldos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaAjustesSaldos.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaAjustesSaldos.ControlInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaAjustesSaldos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaAjustesSaldos.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroAjusteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaAjustesSaldos.NumeroAjusteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroAjusteNull()
            Me(Me.tablesp_consultaAjustesSaldos.NumeroAjusteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroFacturaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaAjustesSaldos.NumeroFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroFacturaNull()
            Me(Me.tablesp_consultaAjustesSaldos.NumeroFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaAjustesSaldos.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tablesp_consultaAjustesSaldos.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaAjustesSaldos.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaAjustesSaldos.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaFactNoAjustadasRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaFactNoAjustadas As sp_consultaFactNoAjustadasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaFactNoAjustadas = CType(Me.Table,sp_consultaFactNoAjustadasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.FactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fact' in table 'sp_consultaFactNoAjustadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.FactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ctrl() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.CtrlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ctrl' in table 'sp_consultaFactNoAjustadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.CtrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaFactNoAjustadas.fechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'sp_consultaFactNoAjustadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoPendiente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.MontoPendienteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoPendiente' in table 'sp_consultaFactNoAjustadas' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.MontoPendienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaFactNoAjustadas.IvaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.CodClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodCliente' in table 'sp_consultaFactNoAjustadas' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.CodClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pte() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.pteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pte' in table 'sp_consultaFactNoAjustadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.pteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recibos() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactNoAjustadas.RecibosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recibos' in table 'sp_consultaFactNoAjustadas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactNoAjustadas.RecibosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFactNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.FactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFactNull()
            Me(Me.tablesp_consultaFactNoAjustadas.FactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCtrlNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.CtrlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCtrlNull()
            Me(Me.tablesp_consultaFactNoAjustadas.CtrlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tablesp_consultaFactNoAjustadas.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoPendienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.MontoPendienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoPendienteNull()
            Me(Me.tablesp_consultaFactNoAjustadas.MontoPendienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.CodClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodClienteNull()
            Me(Me.tablesp_consultaFactNoAjustadas.CodClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.pteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpteNull()
            Me(Me.tablesp_consultaFactNoAjustadas.pteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecibosNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactNoAjustadas.RecibosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecibosNull()
            Me(Me.tablesp_consultaFactNoAjustadas.RecibosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_lvAjustesRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_lvAjustes As sp_lvAjustesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_lvAjustes = CType(Me.Table,sp_lvAjustesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAjuste() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvAjustes.CodigoAjusteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoAjuste' in table 'sp_lvAjustes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvAjustes.CodigoAjusteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_lvAjustes.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_lvAjustes.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvAjustes.UsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Usuario' in table 'sp_lvAjustes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvAjustes.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tablesp_lvAjustes.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvAjustes.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoAjusteNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvAjustes.CodigoAjusteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoAjusteNull()
            Me(Me.tablesp_lvAjustes.CodigoAjusteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvAjustes.UsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioNull()
            Me(Me.tablesp_lvAjustes.UsuarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_ConsultaProductosAjusteInvRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_ConsultaProductosAjusteInv As sp_ConsultaProductosAjusteInvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_ConsultaProductosAjusteInv = CType(Me.Table,sp_ConsultaProductosAjusteInvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_ConsultaProductosAjusteInv' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_ConsultaProductosAjusteInv' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Exist() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.ExistColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Exist' in table 'sp_ConsultaProductosAjusteInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.ExistColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_ConsultaProductosAjusteInv' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_ConsultaProductosAjusteInv' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_ConsultaProductosAjusteInv' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_ConsultaProductosAjusteInv' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuartoId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.cuartoIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cuartoId' in table 'sp_ConsultaProductosAjusteInv' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.cuartoIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property almacenId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosAjusteInv.almacenIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'almacenId' in table 'sp_ConsultaProductosAjusteInv' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosAjusteInv.almacenIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.ExistColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.ExistColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscuartoIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.cuartoIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcuartoIdNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.cuartoIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalmacenIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosAjusteInv.almacenIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalmacenIdNull()
            Me(Me.tablesp_ConsultaProductosAjusteInv.almacenIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaCodigosInternosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCodigosInternos As sp_consultaCodigosInternosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCodigosInternos = CType(Me.Table,sp_consultaCodigosInternosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaCodigosInternos.nombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCodigosInternos.nombreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_Productos_PedidoClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_Productos_PedidoCliente As sp_consulta_Productos_PedidoClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_Productos_PedidoCliente = CType(Me.Table,sp_consulta_Productos_PedidoClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno' in table 'sp_consulta_Productos_PedidoClient"& _ 
                            "e' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consulta_Productos_PedidoCliente' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.CantidadExistenciaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadExistencia' in table 'sp_consulta_Productos_PedidoC"& _ 
                            "liente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.PrecioVentaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioVenta' in table 'sp_consulta_Productos_PedidoCliente'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consulta_Productos_PedidoCliente' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consulta_Productos_PedidoCliente' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_consulta_Productos_PedidoCliente'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.Modelo2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo2' in table 'sp_consulta_Productos_PedidoCliente' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.Modelo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consulta_Productos_PedidoClie"& _ 
                            "nte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInternoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.CodigoInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInternoNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadExistenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.CantidadExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadExistenciaNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.CantidadExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioVentaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.PrecioVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioVentaNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.PrecioVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModelo2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.Modelo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModelo2Null()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.Modelo2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_PedidoCliente.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consulta_Productos_PedidoCliente.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_R_ChequesDevRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_R_ChequesDev As sp_R_ChequesDevDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_R_ChequesDev = CType(Me.Table,sp_R_ChequesDevDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCheque() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.NChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCheque' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.NChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaD() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.FechaDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaD' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.FechaDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDev() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.FechaDevColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaDev' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.FechaDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Return CType(Me(Me.tablesp_R_ChequesDev.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.ControlInicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NControl() As String
            Get
                Return CType(Me(Me.tablesp_R_ChequesDev.NControlColumn),String)
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.NControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.CodigoVendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoVendedor' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_R_ChequesDev.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_R_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_R_ChequesDev.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNChequeNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.NChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNChequeNull()
            Me(Me.tablesp_R_ChequesDev.NChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.FechaDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDNull()
            Me(Me.tablesp_R_ChequesDev.FechaDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDevNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.FechaDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDevNull()
            Me(Me.tablesp_R_ChequesDev.FechaDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_R_ChequesDev.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_R_ChequesDev.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.CodigoVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVendedorNull()
            Me(Me.tablesp_R_ChequesDev.CodigoVendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_R_ChequesDev.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_R_ChequesDev.NombreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductoFRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductoF As sp_consultaProductoFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductoF = CType(Me.Table,sp_consultaProductoFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductoF.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductoF.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductoF.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductoF.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoF.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consultaProductoF' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoF.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oculto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoF.OcultoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Oculto' in table 'sp_consultaProductoF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoF.OcultoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorComplementar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductoF.PorComplementarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorComplementar' in table 'sp_consultaProductoF' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductoF.PorComplementarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoF.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consultaProductoF.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcultoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoF.OcultoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcultoNull()
            Me(Me.tablesp_consultaProductoF.OcultoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorComplementarNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductoF.PorComplementarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorComplementarNull()
            Me(Me.tablesp_consultaProductoF.PorComplementarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaNCPendientesRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaNCPendientes As sp_consultaNCPendientesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaNCPendientes = CType(Me.Table,sp_consultaNCPendientesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroControl() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.NroControlColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.NroControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.ControlInicioColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As String
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.MontoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.ObservacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.IvaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNCPendientes.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'sp_consultaNCPendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoNotaCredito() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.CodigoNotaCreditoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.CodigoNotaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaNCPendientes.MontoTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNCPendientes.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaNCPendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNCPendientes.CodigoVendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoVendedor' in table 'sp_consultaNCPendientes' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNCPendientes.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNCPendientes.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_consultaNCPendientes.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNCPendientes.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaNCPendientes.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNCPendientes.CodigoVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVendedorNull()
            Me(Me.tablesp_consultaNCPendientes.CodigoVendedorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosDanadosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosDanados As sp_consultaProductosDanadosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosDanados = CType(Me.Table,sp_consultaProductosDanadosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.CodigoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProducto' in table 'sp_consultaProductosDanados' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaProductosDanados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosDanados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Devueltos() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaProductosDanados.DevueltosColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.DevueltosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturados() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.FacturadosColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Facturados' in table 'sp_consultaProductosDanados' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.FacturadosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.ControlInicioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaProductosDanados' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_consultaProductosDanados' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_consultaProductosDanados' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.ReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recibo' in table 'sp_consultaProductosDanados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.CodigoVendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoVendedor' in table 'sp_consultaProductosDanados' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendedor' in table 'sp_consultaProductosDanados' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaProductosDanados' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNC() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosDanados.FechaNCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaNC' in table 'sp_consultaProductosDanados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosDanados.FechaNCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.CodigoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoNull()
            Me(Me.tablesp_consultaProductosDanados.CodigoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaProductosDanados.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosDanados.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturadosNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.FacturadosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturadosNull()
            Me(Me.tablesp_consultaProductosDanados.FacturadosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaProductosDanados.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_consultaProductosDanados.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_consultaProductosDanados.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReciboNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.ReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReciboNull()
            Me(Me.tablesp_consultaProductosDanados.ReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.CodigoVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVendedorNull()
            Me(Me.tablesp_consultaProductosDanados.CodigoVendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_consultaProductosDanados.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaProductosDanados.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNCNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosDanados.FechaNCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNCNull()
            Me(Me.tablesp_consultaProductosDanados.FechaNCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_Productos_FacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_Productos_Factura As sp_consulta_Productos_FacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_Productos_Factura = CType(Me.Table,sp_consulta_Productos_FacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_Factura.CantidadColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_consulta_Productos_Factura' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.ModeloColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_consulta_Productos_Factura.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Productos_Factura.CodigoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoF' in table 'sp_consulta_Productos_Factura' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Productos_Factura.CodigoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_Factura.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_consulta_Productos_Factura.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Productos_Factura.CodigoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFNull()
            Me(Me.tablesp_consulta_Productos_Factura.CodigoFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaClienteCombo3Row
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaClienteCombo3 As sp_consultaClienteCombo3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaClienteCombo3 = CType(Me.Table,sp_consultaClienteCombo3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaClienteCombo3.CodigoClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_consultaClienteCombo3' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaClienteCombo3.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_consultaClienteCombo3.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaClienteCombo3.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaClienteCombo3.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_consultaClienteCombo3.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_relacionFactRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_relacionFact As sp_relacionFactDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_relacionFact = CType(Me.Table,sp_relacionFactDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Return CType(Me(Me.tablesp_relacionFact.ControlInicioColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_relacionFact.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_relacionFact.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_relacionFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_relacionFact.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_relacionFact.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_relacionFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_relacionFact.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_relacionFact.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_relacionFact.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Return CType(Me(Me.tablesp_relacionFact.MontoTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_relacionFact.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_relacionFact.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_relacionFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_relacionFact.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_relacionFact.NCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NC' in table 'sp_relacionFact' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_relacionFact.NCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_relacionFact.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_relacionFact.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_relacionFact.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_relacionFact.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_relacionFact.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_relacionFact.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCNull() As Boolean
            Return Me.IsNull(Me.tablesp_relacionFact.NCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCNull()
            Me(Me.tablesp_relacionFact.NCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaLogoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaLogo As sp_consultaLogoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaLogo = CType(Me.Table,sp_consultaLogoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Return CType(Me(Me.tablesp_consultaLogo.LogoColumn),Byte())
            End Get
            Set
                Me(Me.tablesp_consultaLogo.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaLogo.DireccionColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'sp_consultaLogo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaLogo.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionTexto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaLogo.DireccionTextoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DireccionTexto' in table 'sp_consultaLogo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaLogo.DireccionTextoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaLogo.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablesp_consultaLogo.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionTextoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaLogo.DireccionTextoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionTextoNull()
            Me(Me.tablesp_consultaLogo.DireccionTextoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaObsRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaObs As sp_consultaObsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaObs = CType(Me.Table,sp_consultaObsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObsFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaObs.ObsFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObsFactura' in table 'sp_consultaObs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaObs.ObsFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObsReportes() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaObs.ObsReportesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObsReportes' in table 'sp_consultaObs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaObs.ObsReportesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leyenda() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaObs.LeyendaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Leyenda' in table 'sp_consultaObs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaObs.LeyendaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObsFacturaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaObs.ObsFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObsFacturaNull()
            Me(Me.tablesp_consultaObs.ObsFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObsReportesNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaObs.ObsReportesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObsReportesNull()
            Me(Me.tablesp_consultaObs.ObsReportesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeyendaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaObs.LeyendaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeyendaNull()
            Me(Me.tablesp_consultaObs.LeyendaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_lvclienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_lvcliente As sp_lvclienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_lvcliente = CType(Me.Table,sp_lvclienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_lvcliente.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_lvcliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_lvcliente.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvcliente.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Return CType(Me(Me.tablesp_lvcliente.RifColumn),String)
            End Get
            Set
                Me(Me.tablesp_lvcliente.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablesp_lvcliente.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablesp_lvcliente.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono1' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono2' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Representante() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.RepresentanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Representante' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.RepresentanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gerente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.GerenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gerente' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.GerenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Return CType(Me(Me.tablesp_lvcliente.CodigoVendedorColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_lvcliente.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zona() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.ZonaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zona' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.ZonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Estado' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClasificacionABC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.ClasificacionABCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClasificacionABC' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.ClasificacionABCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizado() As Boolean
            Get
                Return CType(Me(Me.tablesp_lvcliente.AutorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_lvcliente.AutorizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Return CType(Me(Me.tablesp_lvcliente.eliminadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_lvcliente.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContEspecial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.ContEspecialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContEspecial' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.ContEspecialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.CelularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Celular' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.CelularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.UserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'User' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.UserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LimiteCredito' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FletePago() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_lvcliente.FletePagoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FletePago' in table 'sp_lvcliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_lvcliente.FletePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tablesp_lvcliente.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tablesp_lvcliente.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tablesp_lvcliente.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablesp_lvcliente.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablesp_lvcliente.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepresentanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.RepresentanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepresentanteNull()
            Me(Me.tablesp_lvcliente.RepresentanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGerenteNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.GerenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGerenteNull()
            Me(Me.tablesp_lvcliente.GerenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZonaNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.ZonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZonaNull()
            Me(Me.tablesp_lvcliente.ZonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_lvcliente.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasificacionABCNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.ClasificacionABCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasificacionABCNull()
            Me(Me.tablesp_lvcliente.ClasificacionABCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContEspecialNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.ContEspecialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContEspecialNull()
            Me(Me.tablesp_lvcliente.ContEspecialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.CelularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCelularNull()
            Me(Me.tablesp_lvcliente.CelularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_lvcliente.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.UserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserNull()
            Me(Me.tablesp_lvcliente.UserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tablesp_lvcliente.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_lvcliente.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFletePagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_lvcliente.FletePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFletePagoNull()
            Me(Me.tablesp_lvcliente.FletePagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaTipoGastoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaTipoGasto As sp_consultaTipoGastoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaTipoGasto = CType(Me.Table,sp_consultaTipoGastoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaTipoGasto.IDColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaTipoGasto.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaTipoGasto.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaTipoGasto.NombreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaCatalogoModelosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCatalogoModelos As sp_consultaCatalogoModelosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCatalogoModelos = CType(Me.Table,sp_consultaCatalogoModelosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaCatalogoModelos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaCatalogoModelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaCatalogoModelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empaque() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.EmpaqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Empaque' in table 'sp_consultaCatalogoModelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.EmpaqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consultaCatalogoModelos' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'sp_consultaCatalogoModelos' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resaltarc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.resaltarcColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'resaltarc' in table 'sp_consultaCatalogoModelos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.resaltarcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resaltar() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos.resaltarColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'resaltar' in table 'sp_consultaCatalogoModelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos.resaltarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaCatalogoModelos.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaCatalogoModelos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaCatalogoModelos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpaqueNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.EmpaqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpaqueNull()
            Me(Me.tablesp_consultaCatalogoModelos.EmpaqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consultaCatalogoModelos.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tablesp_consultaCatalogoModelos.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresaltarcNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.resaltarcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresaltarcNull()
            Me(Me.tablesp_consultaCatalogoModelos.resaltarcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresaltarNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos.resaltarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresaltarNull()
            Me(Me.tablesp_consultaCatalogoModelos.resaltarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaCodigoArancelarioRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCodigoArancelario As sp_consultaCodigoArancelarioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCodigoArancelario = CType(Me.Table,sp_consultaCodigoArancelarioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoArancelario() As String
            Get
                Return CType(Me(Me.tablesp_consultaCodigoArancelario.CodigoArancelarioColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCodigoArancelario.CodigoArancelarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuesto() As String
            Get
                Return CType(Me(Me.tablesp_consultaCodigoArancelario.ImpuestoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCodigoArancelario.ImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCodigoArancelario.descripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'descripcion' in table 'sp_consultaCodigoArancelario' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCodigoArancelario.descripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCodigoArancelario.descripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionNull()
            Me(Me.tablesp_consultaCodigoArancelario.descripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCliente As sp_consultaClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCliente = CType(Me.Table,sp_consultaClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaCliente.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_consultaCliente.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Return CType(Me(Me.tablesp_consultaCliente.RifColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablesp_consultaCliente.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono1' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono2' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Representante() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.RepresentanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Representante' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.RepresentanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gerente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.GerenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gerente' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.GerenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codZona() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.codZonaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codZona' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.codZonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zona() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.zonaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'zona' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.zonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Estado' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClasificacionABC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.ClasificacionABCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClasificacionABC' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.ClasificacionABCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizado() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaCliente.AutorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.AutorizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaCliente.eliminadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaCliente.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContEspecial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.ContEspecialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContEspecial' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.ContEspecialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.CelularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Celular' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.CelularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.CodigoVendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoVendedor' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property user() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.userColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'user' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.userColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LimiteCredito' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FletePago() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.FletePagoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FletePago' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.FletePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionEntrega() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCliente.DireccionEntregaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DireccionEntrega' in table 'sp_consultaCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCliente.DireccionEntregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tablesp_consultaCliente.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tablesp_consultaCliente.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tablesp_consultaCliente.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablesp_consultaCliente.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablesp_consultaCliente.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepresentanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.RepresentanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepresentanteNull()
            Me(Me.tablesp_consultaCliente.RepresentanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGerenteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.GerenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGerenteNull()
            Me(Me.tablesp_consultaCliente.GerenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodZonaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.codZonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodZonaNull()
            Me(Me.tablesp_consultaCliente.codZonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IszonaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.zonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetzonaNull()
            Me(Me.tablesp_consultaCliente.zonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_consultaCliente.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasificacionABCNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.ClasificacionABCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasificacionABCNull()
            Me(Me.tablesp_consultaCliente.ClasificacionABCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContEspecialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.ContEspecialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContEspecialNull()
            Me(Me.tablesp_consultaCliente.ContEspecialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.CelularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCelularNull()
            Me(Me.tablesp_consultaCliente.CelularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaCliente.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.CodigoVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVendedorNull()
            Me(Me.tablesp_consultaCliente.CodigoVendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaCliente.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuserNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.userColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuserNull()
            Me(Me.tablesp_consultaCliente.userColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tablesp_consultaCliente.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_consultaCliente.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFletePagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.FletePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFletePagoNull()
            Me(Me.tablesp_consultaCliente.FletePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionEntregaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCliente.DireccionEntregaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionEntregaNull()
            Me(Me.tablesp_consultaCliente.DireccionEntregaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaEmpresaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaEmpresa As sp_consultaEmpresaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaEmpresa = CType(Me.Table,sp_consultaEmpresaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaEmpresa.IdColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Return CType(Me(Me.tablesp_consultaEmpresa.RifColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tablesp_consultaEmpresa.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Return CType(Me(Me.tablesp_consultaEmpresa.Telefono1Column),String)
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaEmpresa.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono2' in table 'sp_consultaEmpresa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono3() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaEmpresa.Telefono3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono3' in table 'sp_consultaEmpresa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.Telefono3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaEmpresa.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaEmpresa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Activa() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaEmpresa.ActivaColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaEmpresa.ActivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaEmpresa.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tablesp_consultaEmpresa.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono3Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaEmpresa.Telefono3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono3Null()
            Me(Me.tablesp_consultaEmpresa.Telefono3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaEmpresa.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaEmpresa.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_Movimientos_AsociadosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_Movimientos_Asociados As sp_consulta_Movimientos_AsociadosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_Movimientos_Asociados = CType(Me.Table,sp_consulta_Movimientos_AsociadosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Egreso() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.EgresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Egreso' in table 'sp_consulta_Movimientos_Asociados' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.EgresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oficina() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.OficinaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Oficina' in table 'sp_consulta_Movimientos_Asociados' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.OficinaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingreso() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.IngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ingreso' in table 'sp_consulta_Movimientos_Asociados' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.IngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDeposito() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.NumeroDepositoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroDeposito' in table 'sp_consulta_Movimientos_Asociados"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.NumeroDepositoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banco() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.BancoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'sp_consulta_Movimientos_Asociados' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdS() As Integer
            Get
                Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.IdSColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.IdSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreS() As String
            Get
                Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.NombreSColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.NombreSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdC() As Integer
            Get
                Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.IdCColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.IdCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_Movimientos_Asociados.NombreCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreC' in table 'sp_consulta_Movimientos_Asociados' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_Movimientos_Asociados.NombreCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEgresoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Movimientos_Asociados.EgresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEgresoNull()
            Me(Me.tablesp_consulta_Movimientos_Asociados.EgresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOficinaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Movimientos_Asociados.OficinaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOficinaNull()
            Me(Me.tablesp_consulta_Movimientos_Asociados.OficinaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngresoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Movimientos_Asociados.IngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngresoNull()
            Me(Me.tablesp_consulta_Movimientos_Asociados.IngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDepositoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Movimientos_Asociados.NumeroDepositoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDepositoNull()
            Me(Me.tablesp_consulta_Movimientos_Asociados.NumeroDepositoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Movimientos_Asociados.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_consulta_Movimientos_Asociados.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_Movimientos_Asociados.NombreCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCNull()
            Me(Me.tablesp_consulta_Movimientos_Asociados.NombreCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaUsuariosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaUsuarios As sp_consultaUsuariosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaUsuarios = CType(Me.Table,sp_consultaUsuariosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Login() As String
            Get
                Return CType(Me(Me.tablesp_consultaUsuarios.LoginColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaUsuarios.LoginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaUsuarios.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nombre' in table 'sp_consultaUsuarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaUsuarios.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaUsuarios.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tablesp_consultaUsuarios.nombreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_movimiento_ProductosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_movimiento_Productos As sp_movimiento_ProductosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_movimiento_Productos = CType(Me.Table,sp_movimiento_ProductosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_movimiento_Productos.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Existencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_movimiento_Productos.ExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.ExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendidos() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.VendidosColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendidos' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.VendidosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Promedio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.PromedioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Promedio' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.PromedioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Meses() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.MesesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Meses' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.MesesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.PrecioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bs() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.BsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bs' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.BsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compras() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.ComprasColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Compras' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.ComprasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compras2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimiento_Productos.Compras2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Compras2' in table 'sp_movimiento_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.Compras2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_movimiento_Productos.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_movimiento_Productos.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_movimiento_Productos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_movimiento_Productos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_movimiento_Productos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendidosNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.VendidosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendidosNull()
            Me(Me.tablesp_movimiento_Productos.VendidosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPromedioNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.PromedioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPromedioNull()
            Me(Me.tablesp_movimiento_Productos.PromedioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesesNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.MesesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesesNull()
            Me(Me.tablesp_movimiento_Productos.MesesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablesp_movimiento_Productos.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBsNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.BsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBsNull()
            Me(Me.tablesp_movimiento_Productos.BsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComprasNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.ComprasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComprasNull()
            Me(Me.tablesp_movimiento_Productos.ComprasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompras2Null() As Boolean
            Return Me.IsNull(Me.tablesp_movimiento_Productos.Compras2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompras2Null()
            Me(Me.tablesp_movimiento_Productos.Compras2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosInvetarioRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosInvetario As sp_consultaProductosInvetarioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosInvetario = CType(Me.Table,sp_consultaProductosInvetarioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CodigoInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno' in table 'sp_consultaProductosInvetario' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaProductosInvetario' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaProductosInvetario' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosInvetario' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadAnterior() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaProductosInvetario.CantidadAnteriorColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CantidadAnteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadActual() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CantidadActualColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadActual' in table 'sp_consultaProductosInvetario' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CantidadActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.DIFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIF' in table 'sp_consultaProductosInvetario' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.DIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaProductosInvetario' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_consultaProductosInvetario' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEstante() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CodigoEstanteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoEstante' in table 'sp_consultaProductosInvetario' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CodigoEstanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCuarto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CodigoCuartoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCuarto' in table 'sp_consultaProductosInvetario' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CodigoCuartoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAlmacen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CodigoAlmacenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoAlmacen' in table 'sp_consultaProductosInvetario' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CodigoAlmacenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.PrecioVentaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioVenta' in table 'sp_consultaProductosInvetario' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosInvetario.ObservacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosInvetario.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_consultaProductosInvetario' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosInvetario.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInternoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CodigoInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInternoNull()
            Me(Me.tablesp_consultaProductosInvetario.CodigoInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaProductosInvetario.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaProductosInvetario.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosInvetario.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadActualNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CantidadActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadActualNull()
            Me(Me.tablesp_consultaProductosInvetario.CantidadActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.DIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFNull()
            Me(Me.tablesp_consultaProductosInvetario.DIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaProductosInvetario.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_consultaProductosInvetario.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoEstanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CodigoEstanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoEstanteNull()
            Me(Me.tablesp_consultaProductosInvetario.CodigoEstanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCuartoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CodigoCuartoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCuartoNull()
            Me(Me.tablesp_consultaProductosInvetario.CodigoCuartoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoAlmacenNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CodigoAlmacenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoAlmacenNull()
            Me(Me.tablesp_consultaProductosInvetario.CodigoAlmacenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioVentaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.PrecioVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioVentaNull()
            Me(Me.tablesp_consultaProductosInvetario.PrecioVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosInvetario.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_consultaProductosInvetario.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosParaInventarioRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosParaInventario As sp_consultaProductosParaInventarioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosParaInventario = CType(Me.Table,sp_consultaProductosParaInventarioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosParaInventario.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaProductosParaInventario' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaProductosParaInventario' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosParaInventario' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.CantidadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_consultaProductosParaInventario' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.Cantidad2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad2' in table 'sp_consultaProductosParaInventario' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.Cantidad2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dif() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.DifColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dif' in table 'sp_consultaProductosParaInventario' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.DifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaProductosParaInventario.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaProductosParaInventario' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_consultaProductosParaInventario' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEstante() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.CodigoEstanteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoEstante' in table 'sp_consultaProductosParaInventario"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CodigoEstanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCuarto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.CodigoCuartoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCuarto' in table 'sp_consultaProductosParaInventario'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CodigoCuartoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAlmacen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.CodigoAlmacenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoAlmacen' in table 'sp_consultaProductosParaInventario"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CodigoAlmacenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProductosParaInventario.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosParaInventario.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_consultaProductosParaInventario"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosParaInventario.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaProductosParaInventario.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaProductosParaInventario.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosParaInventario.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_consultaProductosParaInventario.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidad2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.Cantidad2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidad2Null()
            Me(Me.tablesp_consultaProductosParaInventario.Cantidad2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDifNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.DifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDifNull()
            Me(Me.tablesp_consultaProductosParaInventario.DifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaProductosParaInventario.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_consultaProductosParaInventario.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoEstanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.CodigoEstanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoEstanteNull()
            Me(Me.tablesp_consultaProductosParaInventario.CodigoEstanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCuartoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.CodigoCuartoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCuartoNull()
            Me(Me.tablesp_consultaProductosParaInventario.CodigoCuartoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoAlmacenNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.CodigoAlmacenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoAlmacenNull()
            Me(Me.tablesp_consultaProductosParaInventario.CodigoAlmacenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosParaInventario.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_consultaProductosParaInventario.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaProductosOcultosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaProductosOcultos As sp_consultaProductosOcultosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaProductosOcultos = CType(Me.Table,sp_consultaProductosOcultosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaProductosOcultos.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaProductosOcultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_consultaProductosOcultos' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'sp_consultaProductosOcultos' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaProductosOcultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.CantidadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'sp_consultaProductosOcultos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaProductosOcultos.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaProductosOcultos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaProductosOcultos.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaProductosOcultos' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaProductosOcultos.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaProductosOcultos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_consultaProductosOcultos.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tablesp_consultaProductosOcultos.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaProductosOcultos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_consultaProductosOcultos.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaProductosOcultos.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaProductosOcultos.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaProductosOcultos.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_infoGeneralRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_infoGeneral As sp_infoGeneralDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_infoGeneral = CType(Me.Table,sp_infoGeneralDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_infoGeneral.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_infoGeneral.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant() As Decimal
            Get
                Return CType(Me(Me.tablesp_infoGeneral.CantColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_infoGeneral.CantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_infoGeneral.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_infoGeneral.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.FotoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.FotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OEM() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.OEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OEM' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.OEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Var1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.Var1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Var1' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.Var1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Var2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.Var2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Var2' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.Var2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendidos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.VendidosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendidos' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.VendidosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grupo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.GrupoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grupo' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.GrupoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oculto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.OcultoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Oculto' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.OcultoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorComplementar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneral.PorComplementarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorComplementar' in table 'sp_infoGeneral' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneral.PorComplementarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_infoGeneral.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_infoGeneral.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.FotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoNull()
            Me(Me.tablesp_infoGeneral.FotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOEMNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.OEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOEMNull()
            Me(Me.tablesp_infoGeneral.OEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVar1Null() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.Var1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVar1Null()
            Me(Me.tablesp_infoGeneral.Var1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVar2Null() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.Var2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVar2Null()
            Me(Me.tablesp_infoGeneral.Var2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_infoGeneral.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendidosNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.VendidosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendidosNull()
            Me(Me.tablesp_infoGeneral.VendidosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.GrupoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoNull()
            Me(Me.tablesp_infoGeneral.GrupoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tablesp_infoGeneral.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_infoGeneral.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcultoNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.OcultoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcultoNull()
            Me(Me.tablesp_infoGeneral.OcultoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorComplementarNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneral.PorComplementarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorComplementarNull()
            Me(Me.tablesp_infoGeneral.PorComplementarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaCatalogoModelos_UbicRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaCatalogoModelos_Ubic As sp_consultaCatalogoModelos_UbicDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaCatalogoModelos_Ubic = CType(Me.Table,sp_consultaCatalogoModelos_UbicDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.NombreColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaCatalogoModelos_Ubic' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consultaCatalogoModelos_Ubic' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaCatalogoModelos_Ubic' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVenta() As Double
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.PrecioVentaColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.PrecioVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empaque() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.EmpaqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Empaque' in table 'sp_consultaCatalogoModelos_Ubic' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.EmpaqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_consultaCatalogoModelos_Ubic'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'sp_consultaCatalogoModelos_Ubic' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.CantidadExistenciaColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resaltarc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarcColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'resaltarc' in table 'sp_consultaCatalogoModelos_Ubic' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resaltar() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'resaltar' in table 'sp_consultaCatalogoModelos_Ubic' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubic() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.UbicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubic' in table 'sp_consultaCatalogoModelos_Ubic' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.UbicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.cantTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cantTramo' in table 'sp_consultaCatalogoModelos_Ubic' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.cantTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property almacen() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.almacenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'almacen' in table 'sp_consultaCatalogoModelos_Ubic' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.almacenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuarto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.cuartoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cuarto' in table 'sp_consultaCatalogoModelos_Ubic' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.cuartoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estante() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.estanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'estante' in table 'sp_consultaCatalogoModelos_Ubic' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.estanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tramo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaCatalogoModelos_Ubic.tramoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tramo' in table 'sp_consultaCatalogoModelos_Ubic' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaCatalogoModelos_Ubic.tramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpaqueNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.EmpaqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpaqueNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.EmpaqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresaltarcNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresaltarcNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresaltarNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresaltarNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.resaltarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.UbicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.UbicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.cantTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantTramoNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.cantTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalmacenNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.almacenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalmacenNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.almacenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscuartoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.cuartoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcuartoNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.cuartoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.estanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestanteNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.estanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaCatalogoModelos_Ubic.tramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettramoNull()
            Me(Me.tablesp_consultaCatalogoModelos_Ubic.tramoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_infoGeneralComprasRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_infoGeneralCompras As sp_infoGeneralComprasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_infoGeneralCompras = CType(Me.Table,sp_infoGeneralComprasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_infoGeneralCompras.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cant() As Decimal
            Get
                Return CType(Me(Me.tablesp_infoGeneralCompras.CantColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.CantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_infoGeneralCompras.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.FotoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.FotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OEM() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.OEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OEM' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.OEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Var1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.Var1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Var1' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.Var1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Var2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.Var2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Var2' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.Var2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendidos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.VendidosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendidos' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.VendidosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grupo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.GrupoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grupo' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.GrupoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oculto() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.OcultoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Oculto' in table 'sp_infoGeneralCompras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.OcultoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorComplementar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_infoGeneralCompras.PorComplementarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorComplementar' in table 'sp_infoGeneralCompras' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_infoGeneralCompras.PorComplementarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_infoGeneralCompras.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_infoGeneralCompras.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.FotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoNull()
            Me(Me.tablesp_infoGeneralCompras.FotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOEMNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.OEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOEMNull()
            Me(Me.tablesp_infoGeneralCompras.OEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVar1Null() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.Var1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVar1Null()
            Me(Me.tablesp_infoGeneralCompras.Var1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVar2Null() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.Var2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVar2Null()
            Me(Me.tablesp_infoGeneralCompras.Var2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_infoGeneralCompras.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendidosNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.VendidosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendidosNull()
            Me(Me.tablesp_infoGeneralCompras.VendidosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrupoNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.GrupoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrupoNull()
            Me(Me.tablesp_infoGeneralCompras.GrupoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tablesp_infoGeneralCompras.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_infoGeneralCompras.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcultoNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.OcultoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcultoNull()
            Me(Me.tablesp_infoGeneralCompras.OcultoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorComplementarNull() As Boolean
            Return Me.IsNull(Me.tablesp_infoGeneralCompras.PorComplementarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorComplementarNull()
            Me(Me.tablesp_infoGeneralCompras.PorComplementarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaPedidoClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaPedidoCliente As sp_consultaPedidoClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaPedidoCliente = CType(Me.Table,sp_consultaPedidoClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPedido() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.CodigoPedidoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.CodigoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Double
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.MontoTotalColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturado() As Boolean
            Get
                Return CType(Me(Me.tablesp_consultaPedidoCliente.FacturadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.FacturadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.VendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendedor' in table 'sp_consultaPedidoCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCred() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.DiasCredColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiasCred' in table 'sp_consultaPedidoCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.DiasCredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaPedidoCliente' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chequeado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.chequeadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'chequeado' in table 'sp_consultaPedidoCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.chequeadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.AutorizadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Autorizado' in table 'sp_consultaPedidoCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.AutorizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bultos() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.BultosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bultos' in table 'sp_consultaPedidoCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.BultosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModalidadEnvio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.ModalidadEnvioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModalidadEnvio' in table 'sp_consultaPedidoCliente' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.ModalidadEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservacionInterna() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaPedidoCliente.ObservacionInternaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservacionInterna' in table 'sp_consultaPedidoCliente' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaPedidoCliente.ObservacionInternaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_consultaPedidoCliente.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasCredNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.DiasCredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasCredNull()
            Me(Me.tablesp_consultaPedidoCliente.DiasCredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaPedidoCliente.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IschequeadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.chequeadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetchequeadoNull()
            Me(Me.tablesp_consultaPedidoCliente.chequeadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutorizadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.AutorizadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutorizadoNull()
            Me(Me.tablesp_consultaPedidoCliente.AutorizadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultosNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.BultosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultosNull()
            Me(Me.tablesp_consultaPedidoCliente.BultosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModalidadEnvioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.ModalidadEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModalidadEnvioNull()
            Me(Me.tablesp_consultaPedidoCliente.ModalidadEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionInternaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaPedidoCliente.ObservacionInternaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionInternaNull()
            Me(Me.tablesp_consultaPedidoCliente.ObservacionInternaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaNotasCreditoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaNotasCredito As sp_consultaNotasCreditoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaNotasCredito = CType(Me.Table,sp_consultaNotasCreditoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroControl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.NroControlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NroControl' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.NroControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.ControlInicioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaNotasCredito' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.MontoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.IvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Iva' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.TipoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoNotaCredito() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.CodigoNotaCreditoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoNotaCredito' in table 'sp_consultaNotasCredito' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.CodigoNotaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.MontoTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotal' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Control() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.ControlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Control' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.ControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Control2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.Control2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Control2' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.Control2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.UsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Usuario' in table 'sp_consultaNotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaNotasCredito.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_consultaNotasCredito' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaNotasCredito.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNroControlNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.NroControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNroControlNull()
            Me(Me.tablesp_consultaNotasCredito.NroControlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaNotasCredito.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_consultaNotasCredito.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_consultaNotasCredito.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tablesp_consultaNotasCredito.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablesp_consultaNotasCredito.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.IvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIvaNull()
            Me(Me.tablesp_consultaNotasCredito.IvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_consultaNotasCredito.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNotaCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.CodigoNotaCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNotaCreditoNull()
            Me(Me.tablesp_consultaNotasCredito.CodigoNotaCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.MontoTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalNull()
            Me(Me.tablesp_consultaNotasCredito.MontoTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.ControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlNull()
            Me(Me.tablesp_consultaNotasCredito.ControlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControl2Null() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.Control2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControl2Null()
            Me(Me.tablesp_consultaNotasCredito.Control2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.UsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioNull()
            Me(Me.tablesp_consultaNotasCredito.UsuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaNotasCredito.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_consultaNotasCredito.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaFactVentasRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaFactVentas As sp_consultaFactVentasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaFactVentas = CType(Me.Table,sp_consultaFactVentasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlInicio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.ControlInicioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlInicio' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.ControlInicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.MontoTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotal' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.IvaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Iva' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.NumeroFacturaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroFactura' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Control() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.ControlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Control' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.ControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaFactVentas.CodigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'sp_consultaFactVentas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaFactVentas.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_consultaFactVentas.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlInicioNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.ControlInicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlInicioNull()
            Me(Me.tablesp_consultaFactVentas.ControlInicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_consultaFactVentas.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.MontoTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalNull()
            Me(Me.tablesp_consultaFactVentas.MontoTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.IvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIvaNull()
            Me(Me.tablesp_consultaFactVentas.IvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroFacturaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.NumeroFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroFacturaNull()
            Me(Me.tablesp_consultaFactVentas.NumeroFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.ControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlNull()
            Me(Me.tablesp_consultaFactVentas.ControlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaFactVentas.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tablesp_consultaFactVentas.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaDiferenciasInventarioRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaDiferenciasInventario As sp_consultaDiferenciasInventarioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaDiferenciasInventario = CType(Me.Table,sp_consultaDiferenciasInventarioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaDiferenciasInventario.CodigoInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno' in table 'sp_consultaDiferenciasInventario' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaDiferenciasInventario.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consultaDiferenciasInventario' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadAnterior() As Integer
            Get
                Return CType(Me(Me.tablesp_consultaDiferenciasInventario.CantidadAnteriorColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.CantidadAnteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadActual() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaDiferenciasInventario.CantidadActualColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadActual' in table 'sp_consultaDiferenciasInventario'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.CantidadActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Return CType(Me(Me.tablesp_consultaDiferenciasInventario.ObservacionColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaDiferenciasInventario.CodigoTramoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTramo' in table 'sp_consultaDiferenciasInventario' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaDiferenciasInventario.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consultaDiferenciasInventario' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Return CType(Me(Me.tablesp_consultaDiferenciasInventario.PrecioColumn),Double)
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaDiferenciasInventario.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consultaDiferenciasInventario' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaDiferenciasInventario.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInternoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaDiferenciasInventario.CodigoInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInternoNull()
            Me(Me.tablesp_consultaDiferenciasInventario.CodigoInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaDiferenciasInventario.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consultaDiferenciasInventario.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadActualNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaDiferenciasInventario.CantidadActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadActualNull()
            Me(Me.tablesp_consultaDiferenciasInventario.CantidadActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTramoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaDiferenciasInventario.CodigoTramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTramoNull()
            Me(Me.tablesp_consultaDiferenciasInventario.CodigoTramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaDiferenciasInventario.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consultaDiferenciasInventario.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaDiferenciasInventario.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consultaDiferenciasInventario.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_ubicacion_productosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_ubicacion_productos As sp_consulta_ubicacion_productosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_ubicacion_productos = CType(Me.Table,sp_consulta_ubicacion_productosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Return CType(Me(Me.tablesp_consulta_ubicacion_productos.CodigoProductoColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.codigoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codigoF' in table 'sp_consulta_ubicacion_productos' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.codigoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'sp_consulta_ubicacion_productos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_consulta_ubicacion_productos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_consulta_ubicacion_productos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.CantidadExistenciaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadExistencia' in table 'sp_consulta_ubicacion_product"& _ 
                            "os' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property aqui() As Integer
            Get
                Return CType(Me(Me.tablesp_consulta_ubicacion_productos.aquiColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.aquiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAlmacen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.CodigoAlmacenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoAlmacen' in table 'sp_consulta_ubicacion_productos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.CodigoAlmacenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCuarto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.CodigoCuartoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCuarto' in table 'sp_consulta_ubicacion_productos' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.CodigoCuartoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEstante() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.CodigoEstanteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoEstante' in table 'sp_consulta_ubicacion_productos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.CodigoEstanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTramo() As Integer
            Get
                Return CType(Me(Me.tablesp_consulta_ubicacion_productos.CodigoTramoColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.CodigoTramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consulta_ubicacion_productos.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'sp_consulta_ubicacion_productos' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property aqui2() As Integer
            Get
                Return CType(Me(Me.tablesp_consulta_ubicacion_productos.aqui2Column),Integer)
            End Get
            Set
                Me(Me.tablesp_consulta_ubicacion_productos.aqui2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.codigoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoFNull()
            Me(Me.tablesp_consulta_ubicacion_productos.codigoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_consulta_ubicacion_productos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_consulta_ubicacion_productos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_consulta_ubicacion_productos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadExistenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.CantidadExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadExistenciaNull()
            Me(Me.tablesp_consulta_ubicacion_productos.CantidadExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoAlmacenNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.CodigoAlmacenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoAlmacenNull()
            Me(Me.tablesp_consulta_ubicacion_productos.CodigoAlmacenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCuartoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.CodigoCuartoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCuartoNull()
            Me(Me.tablesp_consulta_ubicacion_productos.CodigoCuartoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoEstanteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.CodigoEstanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoEstanteNull()
            Me(Me.tablesp_consulta_ubicacion_productos.CodigoEstanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_consulta_ubicacion_productos.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tablesp_consulta_ubicacion_productos.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consulta_actividades_SINPRORow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consulta_actividades_SINPRO As sp_consulta_actividades_SINPRODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consulta_actividades_SINPRO = CType(Me.Table,sp_consulta_actividades_SINPRODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tablesp_consulta_actividades_SINPRO.IdColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_consulta_actividades_SINPRO.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Return CType(Me(Me.tablesp_consulta_actividades_SINPRO.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_actividades_SINPRO.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tablesp_consulta_actividades_SINPRO.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablesp_consulta_actividades_SINPRO.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actividad() As String
            Get
                Return CType(Me(Me.tablesp_consulta_actividades_SINPRO.ActividadColumn),String)
            End Get
            Set
                Me(Me.tablesp_consulta_actividades_SINPRO.ActividadColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_consultaRecibos2Row
        Inherits Global.System.Data.DataRow
        
        Private tablesp_consultaRecibos2 As sp_consultaRecibos2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_consultaRecibos2 = CType(Me.Table,sp_consultaRecibos2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.CodigoReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoRecibo' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.CodigoReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NControl() As String
            Get
                Return CType(Me(Me.tablesp_consultaRecibos2.NControlColumn),String)
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.NControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoCliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.codigoClienteColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codigoCliente' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.codigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property razonsocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.razonsocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'razonsocial' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.razonsocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contEspecial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.contEspecialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'contEspecial' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.contEspecialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NDeposito() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.NDepositoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NDeposito' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.NDepositoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property phrase() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.phraseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'phrase' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.phraseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.PDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PD' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.PDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.MontoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Confirmado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.ConfirmadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Confirmado' in table 'sp_consultaRecibos2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.ConfirmadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComprobanteRecibido() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_consultaRecibos2.ComprobanteRecibidoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComprobanteRecibido' in table 'sp_consultaRecibos2' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_consultaRecibos2.ComprobanteRecibidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoReciboNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.CodigoReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoReciboNull()
            Me(Me.tablesp_consultaRecibos2.CodigoReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.codigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoClienteNull()
            Me(Me.tablesp_consultaRecibos2.codigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrazonsocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.razonsocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrazonsocialNull()
            Me(Me.tablesp_consultaRecibos2.razonsocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontEspecialNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.contEspecialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontEspecialNull()
            Me(Me.tablesp_consultaRecibos2.contEspecialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNDepositoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.NDepositoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNDepositoNull()
            Me(Me.tablesp_consultaRecibos2.NDepositoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsphraseNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.phraseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetphraseNull()
            Me(Me.tablesp_consultaRecibos2.phraseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.PDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDNull()
            Me(Me.tablesp_consultaRecibos2.PDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tablesp_consultaRecibos2.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.ConfirmadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmadoNull()
            Me(Me.tablesp_consultaRecibos2.ConfirmadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComprobanteRecibidoNull() As Boolean
            Return Me.IsNull(Me.tablesp_consultaRecibos2.ComprobanteRecibidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComprobanteRecibidoNull()
            Me(Me.tablesp_consultaRecibos2.ComprobanteRecibidoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_ConsultaProductosProveedoresRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_ConsultaProductosProveedores As sp_ConsultaProductosProveedoresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_ConsultaProductosProveedores = CType(Me.Table,sp_ConsultaProductosProveedoresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Return CType(Me(Me.tablesp_ConsultaProductosProveedores.CodigoInternoColumn),String)
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'sp_ConsultaProductosProveedores' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'sp_ConsultaProductosProveedores' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.CodigoFabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoFabrica' in table 'sp_ConsultaProductosProveedores' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Var1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.Var1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Var1' in table 'sp_ConsultaProductosProveedores' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.Var1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Var2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.Var2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Var2' in table 'sp_ConsultaProductosProveedores' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.Var2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'sp_ConsultaProductosProveedores' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'sp_ConsultaProductosProveedores'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_ConsultaProductosProveedores.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'sp_ConsultaProductosProveedores' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_ConsultaProductosProveedores.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_ConsultaProductosProveedores.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tablesp_ConsultaProductosProveedores.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFabricaNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.CodigoFabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFabricaNull()
            Me(Me.tablesp_ConsultaProductosProveedores.CodigoFabricaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVar1Null() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.Var1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVar1Null()
            Me(Me.tablesp_ConsultaProductosProveedores.Var1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVar2Null() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.Var2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVar2Null()
            Me(Me.tablesp_ConsultaProductosProveedores.Var2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tablesp_ConsultaProductosProveedores.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tablesp_ConsultaProductosProveedores.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tablesp_ConsultaProductosProveedores.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tablesp_ConsultaProductosProveedores.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_AlmacenRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Almacen As Table_AlmacenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Almacen = CType(Me.Table,Table_AlmacenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableTable_Almacen.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTable_Almacen.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableTable_Almacen.NombreColumn),String)
            End Get
            Set
                Me(Me.tableTable_Almacen.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Return CType(Me(Me.tableTable_Almacen.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableTable_Almacen.DireccionColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_CuartoRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Cuarto As Tbl_CuartoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Cuarto = CType(Me.Table,Tbl_CuartoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableTbl_Cuarto.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Cuarto.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableTbl_Cuarto.NombreColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Cuarto.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoAlmacen() As Integer
            Get
                Return CType(Me(Me.tableTbl_Cuarto.CodigoAlmacenColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Cuarto.CodigoAlmacenColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_EstanteRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Estante As Tbl_EstanteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Estante = CType(Me.Table,Tbl_EstanteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableTbl_Estante.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Estante.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableTbl_Estante.NombreColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Estante.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCuarto() As Integer
            Get
                Return CType(Me(Me.tableTbl_Estante.CodigoCuartoColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Estante.CodigoCuartoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_TramoRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Tramo As Tbl_TramoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Tramo = CType(Me.Table,Tbl_TramoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableTbl_Tramo.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Tramo.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableTbl_Tramo.NombreColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Tramo.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEstante() As Integer
            Get
                Return CType(Me(Me.tableTbl_Tramo.CodigoEstanteColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Tramo.CodigoEstanteColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_ModeloRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Modelo As Tbl_ModeloDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Modelo = CType(Me.Table,Tbl_ModeloDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Return CType(Me(Me.tableTbl_Modelo.ModeloColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Modelo.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Return CType(Me(Me.tableTbl_Modelo.MarcaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Modelo.MarcaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_VendedorRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Vendedor As Tbl_VendedorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Vendedor = CType(Me.Table,Tbl_VendedorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Return CType(Me(Me.tableTbl_Vendedor.CodigoVendedorColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Vendedor.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableTbl_Vendedor.NombreColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Vendedor.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cedula() As String
            Get
                Return CType(Me(Me.tableTbl_Vendedor.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Vendedor.CedulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Return CType(Me(Me.tableTbl_Vendedor.TelefonoColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Vendedor.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.CelularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Celular' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.CelularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.CuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cuenta' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.CuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zona() As Integer
            Get
                Return CType(Me(Me.tableTbl_Vendedor.ZonaColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Vendedor.ZonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DirEnvio() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.DirEnvioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DirEnvio' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.DirEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.BancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Banco' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Return CType(Me(Me.tableTbl_Vendedor.eliminadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableTbl_Vendedor.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.ObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observaciones' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcultaCom() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.OcultaComColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OcultaCom' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.OcultaComColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Vendedor.UserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'User' in table 'Tbl_Vendedor' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Vendedor.UserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.CelularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCelularNull()
            Me(Me.tableTbl_Vendedor.CelularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.CuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaNull()
            Me(Me.tableTbl_Vendedor.CuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableTbl_Vendedor.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDirEnvioNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.DirEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDirEnvioNull()
            Me(Me.tableTbl_Vendedor.DirEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBancoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.BancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBancoNull()
            Me(Me.tableTbl_Vendedor.BancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.ObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesNull()
            Me(Me.tableTbl_Vendedor.ObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOcultaComNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.OcultaComColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOcultaComNull()
            Me(Me.tableTbl_Vendedor.OcultaComColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Vendedor.UserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserNull()
            Me(Me.tableTbl_Vendedor.UserColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_FabricaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Fabrica As Tbl_FabricaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Fabrica = CType(Me.Table,Tbl_FabricaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoFabrica() As Integer
            Get
                Return CType(Me(Me.tableTbl_Fabrica.CodigoFabricaColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Fabrica.CodigoFabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableTbl_Fabrica.NombreColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Fabrica.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono1' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono2' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RepresentanteLegal() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.RepresentanteLegalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RepresentanteLegal' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.RepresentanteLegalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClasificacionABC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.ClasificacionABCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClasificacionABC' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.ClasificacionABCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.eliminadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'eliminado' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paginaweb() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.PaginawebColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paginaweb' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.PaginawebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PersonaContacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.PersonaContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PersonaContacto' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.PersonaContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoContacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.TelefonoContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelefonoContacto' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.TelefonoContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PersonaContacto2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.PersonaContacto2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PersonaContacto2' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.PersonaContacto2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoContacto2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.TelefonoContacto2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelefonoContacto2' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.TelefonoContacto2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Fabrica.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda' in table 'Tbl_Fabrica' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Fabrica.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tableTbl_Fabrica.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tableTbl_Fabrica.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tableTbl_Fabrica.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableTbl_Fabrica.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepresentanteLegalNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.RepresentanteLegalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepresentanteLegalNull()
            Me(Me.tableTbl_Fabrica.RepresentanteLegalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableTbl_Fabrica.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasificacionABCNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.ClasificacionABCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasificacionABCNull()
            Me(Me.tableTbl_Fabrica.ClasificacionABCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseliminadoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.eliminadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteliminadoNull()
            Me(Me.tableTbl_Fabrica.eliminadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tableTbl_Fabrica.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaginawebNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.PaginawebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaginawebNull()
            Me(Me.tableTbl_Fabrica.PaginawebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPersonaContactoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.PersonaContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPersonaContactoNull()
            Me(Me.tableTbl_Fabrica.PersonaContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoContactoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.TelefonoContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoContactoNull()
            Me(Me.tableTbl_Fabrica.TelefonoContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPersonaContacto2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.PersonaContacto2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPersonaContacto2Null()
            Me(Me.tableTbl_Fabrica.PersonaContacto2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoContacto2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.TelefonoContacto2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoContacto2Null()
            Me(Me.tableTbl_Fabrica.TelefonoContacto2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Fabrica.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tableTbl_Fabrica.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_GrupoRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Grupo As Tbl_GrupoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Grupo = CType(Me.Table,Tbl_GrupoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoGrupo() As Integer
            Get
                Return CType(Me(Me.tableTbl_Grupo.CodigoGrupoColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Grupo.CodigoGrupoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreGrupo() As String
            Get
                Return CType(Me(Me.tableTbl_Grupo.NombreGrupoColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Grupo.NombreGrupoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_ClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_Cliente As Tbl_ClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_Cliente = CType(Me.Table,Tbl_ClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As Integer
            Get
                Return CType(Me(Me.tableTbl_Cliente.CodigoClienteColumn),Integer)
            End Get
            Set
                Me(Me.tableTbl_Cliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Return CType(Me(Me.tableTbl_Cliente.RazonSocialColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Cliente.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Return CType(Me(Me.tableTbl_Cliente.RifColumn),String)
            End Get
            Set
                Me(Me.tableTbl_Cliente.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tableTbl_Cliente.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tableTbl_Cliente.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono1' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono2' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Representante() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.RepresentanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Representante' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.RepresentanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gerente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.GerenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gerente' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.GerenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codZona() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.codZonaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'codZona' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.codZonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zona() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.zonaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'zona' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.zonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Estado' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClasificacionABC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.ClasificacionABCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClasificacionABC' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.ClasificacionABCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizado() As Boolean
            Get
                Return CType(Me(Me.tableTbl_Cliente.AutorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableTbl_Cliente.AutorizadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eliminado() As Boolean
            Get
                Return CType(Me(Me.tableTbl_Cliente.eliminadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableTbl_Cliente.eliminadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContEspecial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.ContEspecialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContEspecial' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.ContEspecialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.CelularColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Celular' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.CelularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observacion' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.CodigoVendedorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoVendedor' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.CodigoVendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property user() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.userColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'user' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.userColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LimiteCredito' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FletePago() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.FletePagoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FletePago' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.FletePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionEntrega() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_Cliente.DireccionEntregaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DireccionEntrega' in table 'Tbl_Cliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_Cliente.DireccionEntregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tableTbl_Cliente.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tableTbl_Cliente.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tableTbl_Cliente.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableTbl_Cliente.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableTbl_Cliente.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepresentanteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.RepresentanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepresentanteNull()
            Me(Me.tableTbl_Cliente.RepresentanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGerenteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.GerenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGerenteNull()
            Me(Me.tableTbl_Cliente.GerenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodZonaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.codZonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodZonaNull()
            Me(Me.tableTbl_Cliente.codZonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IszonaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.zonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetzonaNull()
            Me(Me.tableTbl_Cliente.zonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tableTbl_Cliente.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClasificacionABCNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.ClasificacionABCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClasificacionABCNull()
            Me(Me.tableTbl_Cliente.ClasificacionABCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContEspecialNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.ContEspecialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContEspecialNull()
            Me(Me.tableTbl_Cliente.ContEspecialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCelularNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.CelularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCelularNull()
            Me(Me.tableTbl_Cliente.CelularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tableTbl_Cliente.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVendedorNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.CodigoVendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVendedorNull()
            Me(Me.tableTbl_Cliente.CodigoVendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTbl_Cliente.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuserNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.userColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuserNull()
            Me(Me.tableTbl_Cliente.userColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tableTbl_Cliente.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tableTbl_Cliente.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFletePagoNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.FletePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFletePagoNull()
            Me(Me.tableTbl_Cliente.FletePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionEntregaNull() As Boolean
            Return Me.IsNull(Me.tableTbl_Cliente.DireccionEntregaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionEntregaNull()
            Me(Me.tableTbl_Cliente.DireccionEntregaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_GuiaTransporteRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_GuiaTransporte As Table_GuiaTransporteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_GuiaTransporte = CType(Me.Table,Table_GuiaTransporteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.CodFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodFactura' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.CodFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flete() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.FleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flete' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.FleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bultos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.BultosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bultos' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.BultosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.MontoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPedido() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaTransporte.CodigoPedidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPedido' in table 'Table_GuiaTransporte' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaTransporte.CodigoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.CodFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodFacturaNull()
            Me(Me.tableTable_GuiaTransporte.CodFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableTable_GuiaTransporte.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFleteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.FleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFleteNull()
            Me(Me.tableTable_GuiaTransporte.FleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultosNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.BultosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultosNull()
            Me(Me.tableTable_GuiaTransporte.BultosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableTable_GuiaTransporte.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableTable_GuiaTransporte.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPedidoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaTransporte.CodigoPedidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPedidoNull()
            Me(Me.tableTable_GuiaTransporte.CodigoPedidoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_GuiaDesglosadaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_GuiaDesglosada As Table_GuiaDesglosadaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_GuiaDesglosada = CType(Me.Table,Table_GuiaDesglosadaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destino() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.DestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Destino' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.DestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tlf() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.TlfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tlf' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.TlfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flete() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.FleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flete' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.FleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rif() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.RifColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rif' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.RifColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.FacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Factura' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bultos() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.BultosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bultos' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.BultosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.MontoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPedido() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaDesglosada.CodigoPedidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPedido' in table 'Table_GuiaDesglosada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaDesglosada.CodigoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tableTable_GuiaDesglosada.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestinoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.DestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestinoNull()
            Me(Me.tableTable_GuiaDesglosada.DestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTlfNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.TlfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTlfNull()
            Me(Me.tableTable_GuiaDesglosada.TlfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFleteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.FleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFleteNull()
            Me(Me.tableTable_GuiaDesglosada.FleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRifNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.RifColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRifNull()
            Me(Me.tableTable_GuiaDesglosada.RifColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaNull()
            Me(Me.tableTable_GuiaDesglosada.FacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultosNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.BultosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultosNull()
            Me(Me.tableTable_GuiaDesglosada.BultosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableTable_GuiaDesglosada.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPedidoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaDesglosada.CodigoPedidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPedidoNull()
            Me(Me.tableTable_GuiaDesglosada.CodigoPedidoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_GuiaBultosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_GuiaBultos As Table_GuiaBultosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_GuiaBultos = CType(Me.Table,Table_GuiaBultosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaBultos.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'Table_GuiaBultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaBultos.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaBultos.FacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Factura' in table 'Table_GuiaBultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaBultos.FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destino() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaBultos.DestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Destino' in table 'Table_GuiaBultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaBultos.DestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BultoN() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaBultos.BultoNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BultoN' in table 'Table_GuiaBultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaBultos.BultoNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BultoM() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_GuiaBultos.BultoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BultoM' in table 'Table_GuiaBultos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_GuiaBultos.BultoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaBultos.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tableTable_GuiaBultos.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaBultos.FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaNull()
            Me(Me.tableTable_GuiaBultos.FacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestinoNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaBultos.DestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestinoNull()
            Me(Me.tableTable_GuiaBultos.DestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultoNNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaBultos.BultoNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultoNNull()
            Me(Me.tableTable_GuiaBultos.BultoNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBultoMNull() As Boolean
            Return Me.IsNull(Me.tableTable_GuiaBultos.BultoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBultoMNull()
            Me(Me.tableTable_GuiaBultos.BultoMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_RelacionFacturasRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_RelacionFacturas As Table_RelacionFacturasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_RelacionFacturas = CType(Me.Table,Table_RelacionFacturasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_RelacionFacturas.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'Table_RelacionFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_RelacionFacturas.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_RelacionFacturas.CodFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodFactura' in table 'Table_RelacionFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_RelacionFacturas.CodFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_RelacionFacturas.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'Table_RelacionFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_RelacionFacturas.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_RelacionFacturas.FechaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'Table_RelacionFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_RelacionFacturas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTable_RelacionFacturas.MontoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'Table_RelacionFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_RelacionFacturas.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableTable_RelacionFacturas.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableTable_RelacionFacturas.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_RelacionFacturas.CodFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodFacturaNull()
            Me(Me.tableTable_RelacionFacturas.CodFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableTable_RelacionFacturas.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableTable_RelacionFacturas.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableTable_RelacionFacturas.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableTable_RelacionFacturas.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableTable_RelacionFacturas.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableTable_RelacionFacturas.MontoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Analisis_CobranzaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Analisis_Cobranza As Table_Analisis_CobranzaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Analisis_Cobranza = CType(Me.Table,Table_Analisis_CobranzaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.FechaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.FacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Factura' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cod_Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.Cod_ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cod_Cliente' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.Cod_ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Razon() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.RazonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Razon' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.RazonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.TotalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vencimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.VencimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vencimiento' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.VencimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.DiasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias_Credito() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.Dias_CreditoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias_Credito' in table 'Table_Analisis_Cobranza' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.Dias_CreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pendiente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.PendienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pendiente' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.PendienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalFinal() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Analisis_Cobranza.TotalFinalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalFinal' in table 'Table_Analisis_Cobranza' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Analisis_Cobranza.TotalFinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableTable_Analisis_Cobranza.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaNull()
            Me(Me.tableTable_Analisis_Cobranza.FacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCod_ClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.Cod_ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCod_ClienteNull()
            Me(Me.tableTable_Analisis_Cobranza.Cod_ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.RazonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonNull()
            Me(Me.tableTable_Analisis_Cobranza.RazonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableTable_Analisis_Cobranza.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVencimientoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.VencimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVencimientoNull()
            Me(Me.tableTable_Analisis_Cobranza.VencimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tableTable_Analisis_Cobranza.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDias_CreditoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.Dias_CreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDias_CreditoNull()
            Me(Me.tableTable_Analisis_Cobranza.Dias_CreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPendienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.PendienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPendienteNull()
            Me(Me.tableTable_Analisis_Cobranza.PendienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalFinalNull() As Boolean
            Return Me.IsNull(Me.tableTable_Analisis_Cobranza.TotalFinalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalFinalNull()
            Me(Me.tableTable_Analisis_Cobranza.TotalFinalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Cargar_CompraRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Cargar_Compra As Table_Cargar_CompraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Cargar_Compra = CType(Me.Table,Table_Cargar_CompraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.CodigoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProducto' in table 'Table_Cargar_Compra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'Table_Cargar_Compra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.CantidadExistenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadExistencia' in table 'Table_Cargar_Compra' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoPromecioActual() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.CostoPromecioActualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostoPromecioActual' in table 'Table_Cargar_Compra' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.CostoPromecioActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVentaActual() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.PrecioVentaActualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioVentaActual' in table 'Table_Cargar_Compra' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.PrecioVentaActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoPromedioNuevo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.CostoPromedioNuevoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CostoPromedioNuevo' in table 'Table_Cargar_Compra' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.CostoPromedioNuevoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioVentaNuevo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.PrecioVentaNuevoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioVentaNuevo' in table 'Table_Cargar_Compra' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.PrecioVentaNuevoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'Table_Cargar_Compra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'Table_Cargar_Compra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPedido() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Cargar_Compra.CodigoPedidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPedido' in table 'Table_Cargar_Compra' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Cargar_Compra.CodigoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.CodigoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoNull()
            Me(Me.tableTable_Cargar_Compra.CodigoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTable_Cargar_Compra.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadExistenciaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.CantidadExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadExistenciaNull()
            Me(Me.tableTable_Cargar_Compra.CantidadExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoPromecioActualNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.CostoPromecioActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoPromecioActualNull()
            Me(Me.tableTable_Cargar_Compra.CostoPromecioActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioVentaActualNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.PrecioVentaActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioVentaActualNull()
            Me(Me.tableTable_Cargar_Compra.PrecioVentaActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoPromedioNuevoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.CostoPromedioNuevoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoPromedioNuevoNull()
            Me(Me.tableTable_Cargar_Compra.CostoPromedioNuevoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioVentaNuevoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.PrecioVentaNuevoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioVentaNuevoNull()
            Me(Me.tableTable_Cargar_Compra.PrecioVentaNuevoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableTable_Cargar_Compra.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tableTable_Cargar_Compra.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPedidoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Cargar_Compra.CodigoPedidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPedidoNull()
            Me(Me.tableTable_Cargar_Compra.CodigoPedidoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Productos_NacionalizadosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Productos_Nacionalizados As Table_Productos_NacionalizadosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Productos_Nacionalizados = CType(Me.Table,Table_Productos_NacionalizadosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.CodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'Table_Productos_Nacionalizados' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'Table_Productos_Nacionalizados' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'Table_Productos_Nacionalizados' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.CantidadExistenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadExistencia' in table 'Table_Productos_Nacionalizado"& _ 
                            "s' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadPedida() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.CantidadPedidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadPedida' in table 'Table_Productos_Nacionalizados' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.CantidadPedidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'Table_Productos_Nacionalizados' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadUbicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.CantidadUbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadUbicacion' in table 'Table_Productos_Nacionalizados"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.CantidadUbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Nacionalizados.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'Table_Productos_Nacionalizados' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Nacionalizados.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableTable_Productos_Nacionalizados.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tableTable_Productos_Nacionalizados.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTable_Productos_Nacionalizados.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadExistenciaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.CantidadExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadExistenciaNull()
            Me(Me.tableTable_Productos_Nacionalizados.CantidadExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadPedidaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.CantidadPedidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadPedidaNull()
            Me(Me.tableTable_Productos_Nacionalizados.CantidadPedidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tableTable_Productos_Nacionalizados.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadUbicacionNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.CantidadUbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadUbicacionNull()
            Me(Me.tableTable_Productos_Nacionalizados.CantidadUbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Nacionalizados.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableTable_Productos_Nacionalizados.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Productos_VariacionRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Productos_Variacion As Table_Productos_VariacionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Productos_Variacion = CType(Me.Table,Table_Productos_VariacionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Variacion.CodigoInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno' in table 'Table_Productos_Variacion' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Variacion.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Variacion.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'Table_Productos_Variacion' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Variacion.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Variacion.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'Table_Productos_Variacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Variacion.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Existencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Variacion.ExistenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Existencia' in table 'Table_Productos_Variacion' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Variacion.ExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioAct() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Variacion.PrecioActColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioAct' in table 'Table_Productos_Variacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Variacion.PrecioActColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioNue() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Productos_Variacion.PrecioNueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioNue' in table 'Table_Productos_Variacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Productos_Variacion.PrecioNueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInternoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Variacion.CodigoInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInternoNull()
            Me(Me.tableTable_Productos_Variacion.CodigoInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Variacion.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableTable_Productos_Variacion.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Variacion.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableTable_Productos_Variacion.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistenciaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Variacion.ExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistenciaNull()
            Me(Me.tableTable_Productos_Variacion.ExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioActNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Variacion.PrecioActColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioActNull()
            Me(Me.tableTable_Productos_Variacion.PrecioActColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNueNull() As Boolean
            Return Me.IsNull(Me.tableTable_Productos_Variacion.PrecioNueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNueNull()
            Me(Me.tableTable_Productos_Variacion.PrecioNueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Guia_Almacenes_CuartosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Guia_Almacenes_Cuartos As Table_Guia_Almacenes_CuartosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Guia_Almacenes_Cuartos = CType(Me.Table,Table_Guia_Almacenes_CuartosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'Table_Guia_Almacenes_Cuartos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProducto' in table 'Table_Guia_Almacenes_Cuartos' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoProductoF() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoProductoF' in table 'Table_Guia_Almacenes_Cuartos' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'Table_Guia_Almacenes_Cuartos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadExistencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.CantidadExistenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadExistencia' in table 'Table_Guia_Almacenes_Cuartos'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.CantidadExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'Table_Guia_Almacenes_Cuartos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.UbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ubicacion' in table 'Table_Guia_Almacenes_Cuartos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.UbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Guia_Almacenes_Cuartos.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'Table_Guia_Almacenes_Cuartos' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Guia_Almacenes_Cuartos.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoProductoFNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoProductoFNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.CodigoProductoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadExistenciaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.CantidadExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadExistenciaNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.CantidadExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUbicacionNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.UbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUbicacionNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.UbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableTable_Guia_Almacenes_Cuartos.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableTable_Guia_Almacenes_Cuartos.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_ChequesDevRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_ChequesDev As Table_ChequesDevDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_ChequesDev = CType(Me.Table,Table_ChequesDevDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cheque() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.ChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cheque' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.ChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDep() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.FechaDepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaDep' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.FechaDepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDev() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.FechaDevColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaDev' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.FechaDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.MontoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.FactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fact' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.FactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recibo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.ReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recibo' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_ChequesDev.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'Table_ChequesDev' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_ChequesDev.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChequeNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.ChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChequeNull()
            Me(Me.tableTable_ChequesDev.ChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDepNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.FechaDepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDepNull()
            Me(Me.tableTable_ChequesDev.FechaDepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDevNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.FechaDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDevNull()
            Me(Me.tableTable_ChequesDev.FechaDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableTable_ChequesDev.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFactNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.FactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFactNull()
            Me(Me.tableTable_ChequesDev.FactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReciboNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.ReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReciboNull()
            Me(Me.tableTable_ChequesDev.ReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_ChequesDev.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tableTable_ChequesDev.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_DetallesComisionPagadaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_DetallesComisionPagada As Table_DetallesComisionPagadaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_DetallesComisionPagada = CType(Me.Table,Table_DetallesComisionPagadaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recibo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.ReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recibo' in table 'Table_DetallesComisionPagada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Factura() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.FacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Factura' in table 'Table_DetallesComisionPagada' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.FacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.CodigoClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'Table_DetallesComisionPagada' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'Table_DetallesComisionPagada' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.BancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Banco' in table 'Table_DetallesComisionPagada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFact() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.FechaFactColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaFact' in table 'Table_DetallesComisionPagada' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.FechaFactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDep() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.FechaDepColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaDep' in table 'Table_DetallesComisionPagada' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.FechaDepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.DiasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias' in table 'Table_DetallesComisionPagada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Base() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.BaseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Base' in table 'Table_DetallesComisionPagada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.BaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoD() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.MontoDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoD' in table 'Table_DetallesComisionPagada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.MontoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.PorcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Porc' in table 'Table_DetallesComisionPagada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.PorcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comision() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_DetallesComisionPagada.ComisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comision' in table 'Table_DetallesComisionPagada' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_DetallesComisionPagada.ComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReciboNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.ReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReciboNull()
            Me(Me.tableTable_DetallesComisionPagada.ReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.FacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaNull()
            Me(Me.tableTable_DetallesComisionPagada.FacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tableTable_DetallesComisionPagada.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableTable_DetallesComisionPagada.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBancoNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.BancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBancoNull()
            Me(Me.tableTable_DetallesComisionPagada.BancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFactNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.FechaFactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFactNull()
            Me(Me.tableTable_DetallesComisionPagada.FechaFactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDepNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.FechaDepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDepNull()
            Me(Me.tableTable_DetallesComisionPagada.FechaDepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tableTable_DetallesComisionPagada.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaseNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.BaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaseNull()
            Me(Me.tableTable_DetallesComisionPagada.BaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoDNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.MontoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoDNull()
            Me(Me.tableTable_DetallesComisionPagada.MontoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.PorcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcNull()
            Me(Me.tableTable_DetallesComisionPagada.PorcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionNull() As Boolean
            Return Me.IsNull(Me.tableTable_DetallesComisionPagada.ComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionNull()
            Me(Me.tableTable_DetallesComisionPagada.ComisionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Libro_VentasRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Libro_Ventas As Table_Libro_VentasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Libro_Ventas = CType(Me.Table,Table_Libro_VentasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.FechaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.FactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fact' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.FactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Imp() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.ImpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Imp' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.ImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dev() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.DevColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dev' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.DevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RIF() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.RIFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RIF' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.RIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoBase() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.MontoBaseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoBase' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.MontoBaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuesto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.ImpuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Impuesto' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.ImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFacturado() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Libro_Ventas.MontoFacturadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoFacturado' in table 'Table_Libro_Ventas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Libro_Ventas.MontoFacturadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableTable_Libro_Ventas.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFactNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.FactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFactNull()
            Me(Me.tableTable_Libro_Ventas.FactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.ImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpNull()
            Me(Me.tableTable_Libro_Ventas.ImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDevNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.DevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDevNull()
            Me(Me.tableTable_Libro_Ventas.DevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tableTable_Libro_Ventas.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRIFNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.RIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRIFNull()
            Me(Me.tableTable_Libro_Ventas.RIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoBaseNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.MontoBaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoBaseNull()
            Me(Me.tableTable_Libro_Ventas.MontoBaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.ImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoNull()
            Me(Me.tableTable_Libro_Ventas.ImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoFacturadoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Libro_Ventas.MontoFacturadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoFacturadoNull()
            Me(Me.tableTable_Libro_Ventas.MontoFacturadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Tbl_DGV_EficaciaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTbl_DGV_Eficacia As Tbl_DGV_EficaciaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTbl_DGV_Eficacia = CType(Me.Table,Tbl_DGV_EficaciaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.CodigoClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoCliente' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.CodigoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F1() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.F1Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F1' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.F1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.M1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M1' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.M1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F2() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.F2Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F2' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.F2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.M2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M2' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.M2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V2() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.V2Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'V2' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.V2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F3() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.F3Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F3' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.F3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.M3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M3' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.M3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V3() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.V3Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'V3' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.V3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F4() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.F4Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F4' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.F4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.M4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M4' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.M4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V4() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.V4Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'V4' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.V4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F5() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.F5Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F5' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.F5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.M5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M5' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.M5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V5() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.V5Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'V5' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.V5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property F6() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.F6Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'F6' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.F6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.M6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M6' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.M6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property V6() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.V6Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'V6' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.V6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTbl_DGV_Eficacia.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Tbl_DGV_Eficacia' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTbl_DGV_Eficacia.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoClienteNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.CodigoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoClienteNull()
            Me(Me.tableTbl_DGV_Eficacia.CodigoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableTbl_DGV_Eficacia.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF1Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.F1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF1Null()
            Me(Me.tableTbl_DGV_Eficacia.F1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM1Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.M1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM1Null()
            Me(Me.tableTbl_DGV_Eficacia.M1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.F2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF2Null()
            Me(Me.tableTbl_DGV_Eficacia.F2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.M2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM2Null()
            Me(Me.tableTbl_DGV_Eficacia.M2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsV2Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.V2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetV2Null()
            Me(Me.tableTbl_DGV_Eficacia.V2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF3Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.F3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF3Null()
            Me(Me.tableTbl_DGV_Eficacia.F3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM3Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.M3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM3Null()
            Me(Me.tableTbl_DGV_Eficacia.M3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsV3Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.V3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetV3Null()
            Me(Me.tableTbl_DGV_Eficacia.V3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF4Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.F4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF4Null()
            Me(Me.tableTbl_DGV_Eficacia.F4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM4Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.M4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM4Null()
            Me(Me.tableTbl_DGV_Eficacia.M4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsV4Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.V4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetV4Null()
            Me(Me.tableTbl_DGV_Eficacia.V4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF5Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.F5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF5Null()
            Me(Me.tableTbl_DGV_Eficacia.F5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM5Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.M5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM5Null()
            Me(Me.tableTbl_DGV_Eficacia.M5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsV5Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.V5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetV5Null()
            Me(Me.tableTbl_DGV_Eficacia.V5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsF6Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.F6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetF6Null()
            Me(Me.tableTbl_DGV_Eficacia.F6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM6Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.M6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM6Null()
            Me(Me.tableTbl_DGV_Eficacia.M6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsV6Null() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.V6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetV6Null()
            Me(Me.tableTbl_DGV_Eficacia.V6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableTbl_DGV_Eficacia.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableTbl_DGV_Eficacia.TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Catalogo_Productos_FotosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Catalogo_Productos_Fotos As Table_Catalogo_Productos_FotosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Catalogo_Productos_Fotos = CType(Me.Table,Table_Catalogo_Productos_FotosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno' in table 'Table_Catalogo_Productos_Fotos' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'Table_Catalogo_Productos_Fotos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'Table_Catalogo_Productos_Fotos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'Table_Catalogo_Productos_Fotos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DetallesModelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DetallesModelo' in table 'Table_Catalogo_Productos_Fotos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empaque() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.EmpaqueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Empaque' in table 'Table_Catalogo_Productos_Fotos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.EmpaqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto' in table 'Table_Catalogo_Productos_Fotos' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.FotoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto' in table 'Table_Catalogo_Productos_Fotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.FotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno2' in table 'Table_Catalogo_Productos_Fotos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Nombre2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre2' in table 'Table_Catalogo_Productos_Fotos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Nombre2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Marca2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca2' in table 'Table_Catalogo_Productos_Fotos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Marca2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Modelo2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo2' in table 'Table_Catalogo_Productos_Fotos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Modelo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DetallesModelo2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DetallesModelo2' in table 'Table_Catalogo_Productos_Fotos' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empaque2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Empaque2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Empaque2' in table 'Table_Catalogo_Productos_Fotos' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Empaque2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto2' in table 'Table_Catalogo_Productos_Fotos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Foto2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto2' in table 'Table_Catalogo_Productos_Fotos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Foto2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno3' in table 'Table_Catalogo_Productos_Fotos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Nombre3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre3' in table 'Table_Catalogo_Productos_Fotos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Nombre3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Marca3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca3' in table 'Table_Catalogo_Productos_Fotos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Marca3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Modelo3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo3' in table 'Table_Catalogo_Productos_Fotos' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Modelo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DetallesModelo3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DetallesModelo3' in table 'Table_Catalogo_Productos_Fotos' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Empaque3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Empaque3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Empaque3' in table 'Table_Catalogo_Productos_Fotos' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Empaque3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaProducto3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaProducto3' in table 'Table_Catalogo_Productos_Fotos' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Foto3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.Foto3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foto3' in table 'Table_Catalogo_Productos_Fotos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.Foto3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcaC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarcaC' in table 'Table_Catalogo_Productos_Fotos' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInternoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.CodigoInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInternoNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetallesModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.DetallesModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetallesModeloNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpaqueNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.EmpaqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpaqueNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.EmpaqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProductoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.MarcaProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProductoNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.FotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFotoNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.FotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInterno2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInterno2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombre2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Nombre2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombre2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Nombre2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarca2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Marca2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarca2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Marca2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModelo2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Modelo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModelo2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Modelo2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetallesModelo2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetallesModelo2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpaque2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Empaque2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpaque2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Empaque2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProducto2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProducto2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFoto2Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Foto2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFoto2Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Foto2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInterno3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInterno3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.CodigoInterno3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombre3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Nombre3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombre3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Nombre3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarca3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Marca3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarca3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Marca3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModelo3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Modelo3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModelo3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Modelo3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetallesModelo3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetallesModelo3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.DetallesModelo3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpaque3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Empaque3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpaque3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Empaque3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaProducto3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaProducto3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaProducto3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFoto3Null() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.Foto3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFoto3Null()
            Me(Me.tableTable_Catalogo_Productos_Fotos.Foto3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaCNull() As Boolean
            Return Me.IsNull(Me.tableTable_Catalogo_Productos_Fotos.MarcaCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaCNull()
            Me(Me.tableTable_Catalogo_Productos_Fotos.MarcaCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_indice_ModelosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_indice_Modelos As Table_indice_ModelosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_indice_Modelos = CType(Me.Table,Table_indice_ModelosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_indice_Modelos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'Table_indice_Modelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_indice_Modelos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTable_indice_Modelos.TipoColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'Table_indice_Modelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_indice_Modelos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pagina() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_indice_Modelos.PaginaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pagina' in table 'Table_indice_Modelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_indice_Modelos.PaginaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_indice_Modelos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'Table_indice_Modelos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_indice_Modelos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_indice_Modelos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableTable_indice_Modelos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableTable_indice_Modelos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableTable_indice_Modelos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaginaNull() As Boolean
            Return Me.IsNull(Me.tableTable_indice_Modelos.PaginaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaginaNull()
            Me(Me.tableTable_indice_Modelos.PaginaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tableTable_indice_Modelos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tableTable_indice_Modelos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_indice_ProductosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_indice_Productos As Table_indice_ProductosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_indice_Productos = CType(Me.Table,Table_indice_ProductosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_indice_Productos.CodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Codigo' in table 'Table_indice_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_indice_Productos.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pagina() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_indice_Productos.PaginaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pagina' in table 'Table_indice_Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_indice_Productos.PaginaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tableTable_indice_Productos.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tableTable_indice_Productos.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaginaNull() As Boolean
            Return Me.IsNull(Me.tableTable_indice_Productos.PaginaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaginaNull()
            Me(Me.tableTable_indice_Productos.PaginaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_Producto_EtiquetaRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Producto_Etiqueta As Table_Producto_EtiquetaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Producto_Etiqueta = CType(Me.Table,Table_Producto_EtiquetaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.CodigoInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoInterno' in table 'Table_Producto_Etiqueta' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.CodigoInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoF() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.CodigoFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoF' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.CodigoFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Proveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.ProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Proveedor' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.ProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Precio' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Producto_Etiqueta.CantidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'Table_Producto_Etiqueta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Producto_Etiqueta.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoInternoNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.CodigoInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoInternoNull()
            Me(Me.tableTable_Producto_Etiqueta.CodigoInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableTable_Producto_Etiqueta.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoFNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.CodigoFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoFNull()
            Me(Me.tableTable_Producto_Etiqueta.CodigoFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProveedorNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.ProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProveedorNull()
            Me(Me.tableTable_Producto_Etiqueta.ProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tableTable_Producto_Etiqueta.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableTable_Producto_Etiqueta.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tableTable_Producto_Etiqueta.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableTable_Producto_Etiqueta.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableTable_Producto_Etiqueta.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProducto_GranSelectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProducto_GranSelectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProducto_GranSelectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProducto_GranSelectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaIVARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaIVARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaIVARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaIVARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaFacturasPagadasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaFacturasPagadasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaFacturasPagadasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaFacturasPagadasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaMarcaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaMarcaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaMarcaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaMarcaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_producto_pedido_guiaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_producto_pedido_guiaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_producto_pedido_guiaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_producto_pedido_guiaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaPreferenciasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaPreferenciasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaPreferenciasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaPreferenciasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_VerTransporteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_VerTransporteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_VerTransporteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_VerTransporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaNC_rdlcRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaNC_rdlcRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaNC_rdlcRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaNC_rdlcRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_Listado_ModeloRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_Listado_ModeloRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_Listado_ModeloRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_Listado_ModeloRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_Listado_AlfabeticoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_Listado_AlfabeticoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_Listado_AlfabeticoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_Listado_AlfabeticoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaFacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaFacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaFacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaPedido_Producto_ClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaPedido_Producto_ClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaPedido_Producto_ClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaPedido_Producto_ClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_prefacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_prefacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_prefacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_prefacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_R_traspasosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_R_traspasosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_R_traspasosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_R_traspasosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaproductosNC_rdlcRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaproductosNC_rdlcRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaproductosNC_rdlcRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaproductosNC_rdlcRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosVariacionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosVariacionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosVariacionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosVariacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_ConsultaClienteFacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_ConsultaClienteFacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_ConsultaClienteFacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_ConsultaClienteFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductoGranSelect2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductoGranSelect2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductoGranSelect2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductoGranSelect2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_lvAjustesPorNCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_lvAjustesPorNCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_lvAjustesPorNCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_lvAjustesPorNCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaNotaCreditoNoAjustadaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaNotaCreditoNoAjustadaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaNotaCreditoNoAjustadaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaNotaCreditoNoAjustadaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosParaPedidoCompraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosParaPedidoCompraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosParaPedidoCompraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosParaPedidoCompraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosGruposRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosGruposRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosGruposRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosGruposRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosCodArancelariosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosCodArancelariosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosCodArancelariosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosCodArancelariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaCatalogo2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaCatalogo2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaCatalogo2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaCatalogo2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosEvaluacionDSSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosEvaluacionDSSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosEvaluacionDSSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosEvaluacionDSSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_analisisCobranzasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_analisisCobranzasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_analisisCobranzasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_analisisCobranzasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaAjustesSaldosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaAjustesSaldosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaAjustesSaldosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaAjustesSaldosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaFactNoAjustadasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaFactNoAjustadasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaFactNoAjustadasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaFactNoAjustadasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_lvAjustesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_lvAjustesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_lvAjustesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_lvAjustesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_ConsultaProductosAjusteInvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_ConsultaProductosAjusteInvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_ConsultaProductosAjusteInvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_ConsultaProductosAjusteInvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaCodigosInternosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaCodigosInternosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaCodigosInternosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaCodigosInternosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_Productos_PedidoClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_Productos_PedidoClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_Productos_PedidoClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_Productos_PedidoClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_R_ChequesDevRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_R_ChequesDevRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_R_ChequesDevRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_R_ChequesDevRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductoFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductoFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductoFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductoFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaNCPendientesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaNCPendientesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaNCPendientesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaNCPendientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosDanadosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosDanadosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosDanadosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosDanadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_Productos_FacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_Productos_FacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_Productos_FacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_Productos_FacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaClienteCombo3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaClienteCombo3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaClienteCombo3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaClienteCombo3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_relacionFactRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_relacionFactRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_relacionFactRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_relacionFactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaLogoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaLogoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaLogoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaLogoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaObsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaObsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaObsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaObsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_lvclienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_lvclienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_lvclienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_lvclienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaTipoGastoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaTipoGastoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaTipoGastoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaTipoGastoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaCatalogoModelosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaCatalogoModelosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaCatalogoModelosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaCatalogoModelosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaCodigoArancelarioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaCodigoArancelarioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaCodigoArancelarioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaCodigoArancelarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaEmpresaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaEmpresaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaEmpresaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaEmpresaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_Movimientos_AsociadosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_Movimientos_AsociadosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_Movimientos_AsociadosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_Movimientos_AsociadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaUsuariosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaUsuariosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaUsuariosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaUsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_movimiento_ProductosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_movimiento_ProductosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_movimiento_ProductosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_movimiento_ProductosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosInvetarioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosInvetarioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosInvetarioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosInvetarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosParaInventarioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosParaInventarioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosParaInventarioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosParaInventarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaProductosOcultosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaProductosOcultosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaProductosOcultosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaProductosOcultosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_infoGeneralRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_infoGeneralRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_infoGeneralRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_infoGeneralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaCatalogoModelos_UbicRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaCatalogoModelos_UbicRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaCatalogoModelos_UbicRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaCatalogoModelos_UbicRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_infoGeneralComprasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_infoGeneralComprasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_infoGeneralComprasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_infoGeneralComprasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaPedidoClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaPedidoClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaPedidoClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaPedidoClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaNotasCreditoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaNotasCreditoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaNotasCreditoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaNotasCreditoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaFactVentasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaFactVentasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaFactVentasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaFactVentasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaDiferenciasInventarioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaDiferenciasInventarioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaDiferenciasInventarioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaDiferenciasInventarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_ubicacion_productosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_ubicacion_productosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_ubicacion_productosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_ubicacion_productosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consulta_actividades_SINPRORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consulta_actividades_SINPRORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consulta_actividades_SINPRORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consulta_actividades_SINPRORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_consultaRecibos2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_consultaRecibos2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_consultaRecibos2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_consultaRecibos2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_ConsultaProductosProveedoresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_ConsultaProductosProveedoresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_ConsultaProductosProveedoresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_ConsultaProductosProveedoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_AlmacenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_AlmacenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_AlmacenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_AlmacenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_CuartoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_CuartoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_CuartoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_CuartoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_EstanteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_EstanteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_EstanteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_EstanteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_TramoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_TramoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_TramoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_TramoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_ModeloRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_ModeloRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_ModeloRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_ModeloRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_VendedorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_VendedorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_VendedorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_VendedorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_FabricaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_FabricaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_FabricaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_FabricaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_GrupoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_GrupoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_GrupoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_GrupoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_ClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_ClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_ClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_ClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_GuiaTransporteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_GuiaTransporteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_GuiaTransporteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_GuiaTransporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_GuiaDesglosadaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_GuiaDesglosadaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_GuiaDesglosadaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_GuiaDesglosadaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_GuiaBultosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_GuiaBultosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_GuiaBultosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_GuiaBultosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_RelacionFacturasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_RelacionFacturasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_RelacionFacturasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_RelacionFacturasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Analisis_CobranzaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Analisis_CobranzaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Analisis_CobranzaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Analisis_CobranzaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Cargar_CompraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Cargar_CompraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Cargar_CompraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Cargar_CompraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Productos_NacionalizadosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Productos_NacionalizadosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Productos_NacionalizadosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Productos_NacionalizadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Productos_VariacionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Productos_VariacionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Productos_VariacionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Productos_VariacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Guia_Almacenes_CuartosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Guia_Almacenes_CuartosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Guia_Almacenes_CuartosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Guia_Almacenes_CuartosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_ChequesDevRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_ChequesDevRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_ChequesDevRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_ChequesDevRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_DetallesComisionPagadaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_DetallesComisionPagadaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_DetallesComisionPagadaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_DetallesComisionPagadaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Libro_VentasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Libro_VentasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Libro_VentasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Libro_VentasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Tbl_DGV_EficaciaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Tbl_DGV_EficaciaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Tbl_DGV_EficaciaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Tbl_DGV_EficaciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Catalogo_Productos_FotosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Catalogo_Productos_FotosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Catalogo_Productos_FotosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Catalogo_Productos_FotosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_indice_ModelosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_indice_ModelosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_indice_ModelosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_indice_ModelosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_indice_ProductosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_indice_ProductosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_indice_ProductosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_indice_ProductosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_Producto_EtiquetaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_Producto_EtiquetaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_Producto_EtiquetaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_Producto_EtiquetaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MELDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProducto_GranSelectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProducto_GranSelect"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("Modelo2", "Modelo2")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProducto_GranSelect"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProducto_GranSelectDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaProducto_GranSelectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaProducto_GranSelectDataTable = New MELDataSet.sp_consultaProducto_GranSelectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaIVATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaIVA"
            tableMapping.ColumnMappings.Add("iva", "iva")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaIVA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaIVADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaIVADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaIVADataTable = New MELDataSet.sp_consultaIVADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProducto"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("CodigoArancelario", "CodigoArancelario")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("MarcaProducto", "MarcaProducto")
            tableMapping.ColumnMappings.Add("Foto", "Foto")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("CostoPromedio", "CostoPromedio")
            tableMapping.ColumnMappings.Add("ClasificacionABC", "ClasificacionABC")
            tableMapping.ColumnMappings.Add("CantidadVendida", "CantidadVendida")
            tableMapping.ColumnMappings.Add("UtilidadProducto", "UtilidadProducto")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProducto"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.VarChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductoDataTable, ByVal cod As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As String) As MELDataSet.sp_consultaProductoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaProductoDataTable = New MELDataSet.sp_consultaProductoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaFacturasPagadasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaFacturasPagadas"
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("NControl", "NControl")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("FechaD", "FechaD")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Dev", "Dev")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaFacturasPagadas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@f1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@f2", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaFacturasPagadasDataTable, ByVal f1 As Global.System.Nullable(Of Date), ByVal f2 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (f1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(f1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (f2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(f2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal f1 As Global.System.Nullable(Of Date), ByVal f2 As Global.System.Nullable(Of Date)) As MELDataSet.sp_consultaFacturasPagadasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (f1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(f1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (f2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(f2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaFacturasPagadasDataTable = New MELDataSet.sp_consultaFacturasPagadasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaMarcaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaMarca"
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaMarca"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaMarcaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaMarcaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaMarcaDataTable = New MELDataSet.sp_consultaMarcaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_producto_pedido_guiaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_producto_pedido_guia"
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_producto_pedido_guia"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codPed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_producto_pedido_guiaDataTable, ByVal codPed As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codPed As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consulta_producto_pedido_guiaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consulta_producto_pedido_guiaDataTable = New MELDataSet.sp_consulta_producto_pedido_guiaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaPreferenciasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaPreferencias"
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoPreferencia", "CodigoPreferencia")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaPreferencias"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaPreferenciasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaPreferenciasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaPreferenciasDataTable = New MELDataSet.sp_consultaPreferenciasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_VerTransporteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_VerTransporte"
            tableMapping.ColumnMappings.Add("CodigoTransporte", "CodigoTransporte")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_VerTransporte"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_VerTransporteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_VerTransporteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_VerTransporteDataTable = New MELDataSet.sp_VerTransporteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaNC_rdlcTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaNC_rdlc"
            tableMapping.ColumnMappings.Add("NroControl", "NroControl")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("FechaF", "FechaF")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Rif", "Rif")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("CodigoNotaCredito", "CodigoNotaCredito")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaNC_rdlc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaNC_rdlcDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaNC_rdlcDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaNC_rdlcDataTable = New MELDataSet.sp_consultaNC_rdlcDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_Listado_ModeloTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_Listado_Modelo"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Empaque", "Empaque")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("MarcaProducto", "MarcaProducto")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("cantidadExistencia", "cantidadExistencia")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_Listado_Modelo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@var", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exist", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_Listado_ModeloDataTable, ByVal var As String, ByVal exist As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (var Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(var,String)
            End If
            If (exist Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(exist,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal var As String, ByVal exist As String) As MELDataSet.sp_consulta_Listado_ModeloDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (var Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(var,String)
            End If
            If (exist Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(exist,String)
            End If
            Dim dataTable As MELDataSet.sp_consulta_Listado_ModeloDataTable = New MELDataSet.sp_consulta_Listado_ModeloDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_Listado_AlfabeticoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_Listado_Alfabetico"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("paraOrdenar", "paraOrdenar")
            tableMapping.ColumnMappings.Add("MarcaProducto", "MarcaProducto")
            tableMapping.ColumnMappings.Add("mp", "mp")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_Listado_Alfabetico"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cantex", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@marca", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelo", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_Listado_AlfabeticoDataTable, ByVal cantex As Global.System.Nullable(Of Integer), ByVal marca As String, ByVal modelo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cantex.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cantex.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (marca Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(marca,String)
            End If
            If (modelo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(modelo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cantex As Global.System.Nullable(Of Integer), ByVal marca As String, ByVal modelo As String) As MELDataSet.sp_consulta_Listado_AlfabeticoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cantex.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cantex.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (marca Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(marca,String)
            End If
            If (modelo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(modelo,String)
            End If
            Dim dataTable As MELDataSet.sp_consulta_Listado_AlfabeticoDataTable = New MELDataSet.sp_consulta_Listado_AlfabeticoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaFacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaFactura"
            tableMapping.ColumnMappings.Add("NumeroFactura", "NumeroFactura")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("Facturador", "Facturador")
            tableMapping.ColumnMappings.Add("NumeroBultos", "NumeroBultos")
            tableMapping.ColumnMappings.Add("MontoCancelado", "MontoCancelado")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("DiasCred", "DiasCred")
            tableMapping.ColumnMappings.Add("CodigoPedido", "CodigoPedido")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("Enviado", "Enviado")
            tableMapping.ColumnMappings.Add("Entregada", "Entregada")
            tableMapping.ColumnMappings.Add("ObservacionPedido", "ObservacionPedido")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaFactura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaFacturaDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaFacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaFacturaDataTable = New MELDataSet.sp_consultaFacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaPedido_Producto_ClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaPedido_Producto_Cliente"
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Chequeado", "Chequeado")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaPedido_Producto_Cliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codPed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaPedido_Producto_ClienteDataTable, ByVal codPed As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codPed As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaPedido_Producto_ClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaPedido_Producto_ClienteDataTable = New MELDataSet.sp_consultaPedido_Producto_ClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_prefacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_prefactura"
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_prefactura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codPed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_prefacturaDataTable, ByVal codPed As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codPed As Global.System.Nullable(Of Integer)) As MELDataSet.sp_prefacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_prefacturaDataTable = New MELDataSet.sp_prefacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_R_traspasosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_R_traspasos"
            tableMapping.ColumnMappings.Add("codproducto", "codproducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Ubicacionant", "Ubicacionant")
            tableMapping.ColumnMappings.Add("Ubicacionact", "Ubicacionact")
            tableMapping.ColumnMappings.Add("cant", "cant")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_R_traspasos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_R_traspasosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_R_traspasosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_R_traspasosDataTable = New MELDataSet.sp_R_traspasosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaproductosNC_rdlcTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaproductosNC_rdlc"
            tableMapping.ColumnMappings.Add("Dev", "Dev")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaproductosNC_rdlc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaproductosNC_rdlcDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaproductosNC_rdlcDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaproductosNC_rdlcDataTable = New MELDataSet.sp_consultaproductosNC_rdlcDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosVariacionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosVariacion"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("CostoPromedio", "CostoPromedio")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("PrecioNuevo", "PrecioNuevo")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Grupo", "Grupo")
            tableMapping.ColumnMappings.Add("Proveedor", "Proveedor")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosVariacion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosVariacionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaProductosVariacionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaProductosVariacionDataTable = New MELDataSet.sp_consultaProductosVariacionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_ConsultaClienteFacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_ConsultaClienteFactura"
            tableMapping.ColumnMappings.Add("NumeroFactura", "NumeroFactura")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Control", "Control")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_ConsultaClienteFactura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_ConsultaClienteFacturaDataTable, ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_ConsultaClienteFacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_ConsultaClienteFacturaDataTable = New MELDataSet.sp_ConsultaClienteFacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductoGranSelect2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductoGranSelect2"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductoGranSelect2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod", Global.System.Data.SqlDbType.VarChar, 25, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductoGranSelect2DataTable, ByVal Cod As String, ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Cod,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Cod As String, ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaProductoGranSelect2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Cod,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaProductoGranSelect2DataTable = New MELDataSet.sp_consultaProductoGranSelect2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_lvAjustesPorNCTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_lvAjustesPorNC"
            tableMapping.ColumnMappings.Add("CodigoAjuste", "CodigoAjuste")
            tableMapping.ColumnMappings.Add("Usuario", "Usuario")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("CodigoNota", "CodigoNota")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("ControlNota", "ControlNota")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_lvAjustesPorNC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_lvAjustesPorNCDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Cod As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Cod,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Cod As String) As MELDataSet.sp_lvAjustesPorNCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Cod,String)
            End If
            Dim dataTable As MELDataSet.sp_lvAjustesPorNCDataTable = New MELDataSet.sp_lvAjustesPorNCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaNotaCreditoNoAjustadaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaNotaCreditoNoAjustada"
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("CodigoNotaCredito", "CodigoNotaCredito")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("NroControl", "NroControl")
            tableMapping.ColumnMappings.Add("NroControl2", "NroControl2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaNotaCreditoNoAjustada"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cod", Global.System.Data.SqlDbType.VarChar, 25, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaNotaCreditoNoAjustadaDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Cod As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Cod,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Cod As String) As MELDataSet.sp_consultaNotaCreditoNoAjustadaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Cod,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaNotaCreditoNoAjustadaDataTable = New MELDataSet.sp_consultaNotaCreditoNoAjustadaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosParaPedidoCompraTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosParaPedidoCompra"
            tableMapping.ColumnMappings.Add("Cant2", "Cant2")
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Variante1", "Variante1")
            tableMapping.ColumnMappings.Add("Variante2", "Variante2")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("OEM", "OEM")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("Proveedor", "Proveedor")
            tableMapping.ColumnMappings.Add("CodigoF", "CodigoF")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosParaPedidoCompra"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Id", Global.System.Data.SqlDbType.VarChar, 25, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdF", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosParaPedidoCompraDataTable, ByVal Id As String, ByVal IdF As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Id,String)
            End If
            If (IdF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IdF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Id As String, ByVal IdF As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaProductosParaPedidoCompraDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Id,String)
            End If
            If (IdF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IdF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaProductosParaPedidoCompraDataTable = New MELDataSet.sp_consultaProductosParaPedidoCompraDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosGruposTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosGrupos"
            tableMapping.ColumnMappings.Add("CHK", "CHK")
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("Grupos", "Grupos")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosGrupos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodG", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosGruposDataTable, ByVal CodG As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodG.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodG.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CodG As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaProductosGruposDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodG.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodG.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaProductosGruposDataTable = New MELDataSet.sp_consultaProductosGruposDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosCodArancelariosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosCodArancelarios"
            tableMapping.ColumnMappings.Add("CHK", "CHK")
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("CodigoArancelario", "CodigoArancelario")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosCodArancelarios"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosCodArancelariosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaProductosCodArancelariosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaProductosCodArancelariosDataTable = New MELDataSet.sp_consultaProductosCodArancelariosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaCatalogo2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCatalogo2"
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("CostoPromedio", "CostoPromedio")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCatalogo2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaCatalogo2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaCatalogo2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaCatalogo2DataTable = New MELDataSet.sp_consultaCatalogo2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosEvaluacionDSSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosEvaluacionDSS"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosEvaluacionDSS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosEvaluacionDSSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaProductosEvaluacionDSSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaProductosEvaluacionDSSDataTable = New MELDataSet.sp_consultaProductosEvaluacionDSSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_analisisCobranzasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_analisisCobranzas"
            tableMapping.ColumnMappings.Add("fecha", "fecha")
            tableMapping.ColumnMappings.Add("control", "control")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("montoTotal", "montoTotal")
            tableMapping.ColumnMappings.Add("DiasCred", "DiasCred")
            tableMapping.ColumnMappings.Add("Vencimiento", "Vencimiento")
            tableMapping.ColumnMappings.Add("Dias", "Dias")
            tableMapping.ColumnMappings.Add("MontoPendiente", "MontoPendiente")
            tableMapping.ColumnMappings.Add("NumeroFactura", "NumeroFactura")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_analisisCobranzas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_analisisCobranzasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_analisisCobranzasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_analisisCobranzasDataTable = New MELDataSet.sp_analisisCobranzasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaAjustesSaldosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaAjustesSaldos"
            tableMapping.ColumnMappings.Add("NumeroAjuste", "NumeroAjuste")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("NumeroFactura", "NumeroFactura")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaAjustesSaldos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaAjustesSaldosDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As MELDataSet.sp_consultaAjustesSaldosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaAjustesSaldosDataTable = New MELDataSet.sp_consultaAjustesSaldosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaFactNoAjustadasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaFactNoAjustadas"
            tableMapping.ColumnMappings.Add("Fact", "Fact")
            tableMapping.ColumnMappings.Add("Ctrl", "Ctrl")
            tableMapping.ColumnMappings.Add("fecha", "fecha")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("MontoPendiente", "MontoPendiente")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("pte", "pte")
            tableMapping.ColumnMappings.Add("Recibos", "Recibos")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaFactNoAjustadas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaFactNoAjustadasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaFactNoAjustadasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaFactNoAjustadasDataTable = New MELDataSet.sp_consultaFactNoAjustadasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_lvAjustesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_lvAjustes"
            tableMapping.ColumnMappings.Add("CodigoAjuste", "CodigoAjuste")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Usuario", "Usuario")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_lvAjustes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_lvAjustesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_lvAjustesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_lvAjustesDataTable = New MELDataSet.sp_lvAjustesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_ConsultaProductosAjusteInvTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_ConsultaProductosAjusteInv"
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Exist.", "Exist")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("cuartoId", "cuartoId")
            tableMapping.ColumnMappings.Add("almacenId", "almacenId")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_ConsultaProductosAjusteInv"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_ConsultaProductosAjusteInvDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_ConsultaProductosAjusteInvDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_ConsultaProductosAjusteInvDataTable = New MELDataSet.sp_ConsultaProductosAjusteInvDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaCodigosInternosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCodigosInternos"
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCodigosInternos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaCodigosInternosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaCodigosInternosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaCodigosInternosDataTable = New MELDataSet.sp_consultaCodigosInternosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_Productos_PedidoClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_Productos_PedidoCliente"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("Modelo2", "Modelo2")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_Productos_PedidoCliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_Productos_PedidoClienteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consulta_Productos_PedidoClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consulta_Productos_PedidoClienteDataTable = New MELDataSet.sp_consulta_Productos_PedidoClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_R_ChequesDevTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_R_ChequesDev"
            tableMapping.ColumnMappings.Add("NCheque", "NCheque")
            tableMapping.ColumnMappings.Add("FechaD", "FechaD")
            tableMapping.ColumnMappings.Add("FechaDev", "FechaDev")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("NControl", "NControl")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_R_ChequesDev"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodV", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha1", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha2", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_R_ChequesDevDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal CodV As Global.System.Nullable(Of Integer), ByVal Fecha1 As Global.System.Nullable(Of Date), ByVal Fecha2 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CodV.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodV.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fecha1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Fecha1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Fecha2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Fecha2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal CodV As Global.System.Nullable(Of Integer), ByVal Fecha1 As Global.System.Nullable(Of Date), ByVal Fecha2 As Global.System.Nullable(Of Date)) As MELDataSet.sp_R_ChequesDevDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CodV.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodV.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fecha1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Fecha1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Fecha2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Fecha2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_R_ChequesDevDataTable = New MELDataSet.sp_R_ChequesDevDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductoFTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductoF"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("Oculto", "Oculto")
            tableMapping.ColumnMappings.Add("PorComplementar", "PorComplementar")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProducto"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.VarChar, 25, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductoFDataTable, ByVal cod As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As String) As MELDataSet.sp_consultaProductoFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaProductoFDataTable = New MELDataSet.sp_consultaProductoFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaNCPendientesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaNCPendientes"
            tableMapping.ColumnMappings.Add("NroControl", "NroControl")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("CodigoNotaCredito", "CodigoNotaCredito")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaNCPendientes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vend", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha1", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha2", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaNCPendientesDataTable, ByVal vend As Global.System.Nullable(Of Integer), ByVal Fecha1 As Global.System.Nullable(Of Date), ByVal Fecha2 As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (vend.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(vend.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fecha1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fecha1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fecha2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Fecha2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal vend As Global.System.Nullable(Of Integer), ByVal Fecha1 As Global.System.Nullable(Of Date), ByVal Fecha2 As Global.System.Nullable(Of Date)) As MELDataSet.sp_consultaNCPendientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (vend.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(vend.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fecha1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fecha1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Fecha2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Fecha2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaNCPendientesDataTable = New MELDataSet.sp_consultaNCPendientesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosDanadosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosDanados"
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Devueltos", "Devueltos")
            tableMapping.ColumnMappings.Add("Facturados", "Facturados")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Recibo", "Recibo")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("FechaNC", "FechaNC")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosDanados"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha1", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha2", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vend", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosDanadosDataTable, ByVal Fecha1 As Global.System.Nullable(Of Date), ByVal Fecha2 As Global.System.Nullable(Of Date), ByVal Vend As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fecha1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Fecha1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fecha2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fecha2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Vend.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Vend.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Fecha1 As Global.System.Nullable(Of Date), ByVal Fecha2 As Global.System.Nullable(Of Date), ByVal Vend As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaProductosDanadosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Fecha1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Fecha1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Fecha2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fecha2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Vend.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Vend.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaProductosDanadosDataTable = New MELDataSet.sp_consultaProductosDanadosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_Productos_FacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_Productos_Factura"
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("CodigoF", "CodigoF")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_Productos_Factura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codF", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_Productos_FacturaDataTable, ByVal codF As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codF As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consulta_Productos_FacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consulta_Productos_FacturaDataTable = New MELDataSet.sp_consulta_Productos_FacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaClienteCombo3TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaClienteCombo3"
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaClienteCombo3"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaClienteCombo3DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaClienteCombo3DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaClienteCombo3DataTable = New MELDataSet.sp_consultaClienteCombo3DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_relacionFactTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_relacionFact"
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("NC", "NC")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_relacionFact"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_relacionFactDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_relacionFactDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_relacionFactDataTable = New MELDataSet.sp_relacionFactDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaLogoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaLogo"
            tableMapping.ColumnMappings.Add("Logo", "Logo")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("DireccionTexto", "DireccionTexto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaLogo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaLogoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaLogoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaLogoDataTable = New MELDataSet.sp_consultaLogoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaObsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaObs"
            tableMapping.ColumnMappings.Add("ObsFactura", "ObsFactura")
            tableMapping.ColumnMappings.Add("ObsReportes", "ObsReportes")
            tableMapping.ColumnMappings.Add("Leyenda", "Leyenda")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaObs"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaObsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaObsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaObsDataTable = New MELDataSet.sp_consultaObsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_lvclienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_lvcliente"
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Rif", "Rif")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Representante", "Representante")
            tableMapping.ColumnMappings.Add("Gerente", "Gerente")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Zona", "Zona")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("ClasificacionABC", "ClasificacionABC")
            tableMapping.ColumnMappings.Add("Autorizado", "Autorizado")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            tableMapping.ColumnMappings.Add("ContEspecial", "ContEspecial")
            tableMapping.ColumnMappings.Add("Celular", "Celular")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("User", "User")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("FletePago", "FletePago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_lvcliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nom", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vend", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_lvclienteDataTable, ByVal nom As String, ByVal tipo As Global.System.Nullable(Of Integer), ByVal vend As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(nom,String)
            End If
            If (tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (vend.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(vend.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal nom As String, ByVal tipo As Global.System.Nullable(Of Integer), ByVal vend As Global.System.Nullable(Of Integer)) As MELDataSet.sp_lvclienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(nom,String)
            End If
            If (tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (vend.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(vend.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_lvclienteDataTable = New MELDataSet.sp_lvclienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaTipoGastoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaTipoGasto"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaTipoGasto"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaTipoGastoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaTipoGastoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaTipoGastoDataTable = New MELDataSet.sp_consultaTipoGastoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaCatalogoModelosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCatalogoModelos"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Empaque", "Empaque")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("MarcaProducto", "MarcaProducto")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("resaltarc", "resaltarc")
            tableMapping.ColumnMappings.Add("resaltar", "resaltar")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCatalogoModelos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@marcmod", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exist", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grupo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@compra", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resg", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resc", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaCatalogoModelosDataTable, ByVal marcmod As String, ByVal exist As Global.System.Nullable(Of Integer), ByVal order As String, ByVal grupo As String, ByVal compra As String, ByVal resg As String, ByVal resc As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (marcmod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(marcmod,String)
            End If
            If (exist.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(exist.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (order Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(order,String)
            End If
            If (grupo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(grupo,String)
            End If
            If (compra Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(compra,String)
            End If
            If (resg Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(resg,String)
            End If
            If (resc Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(resc,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal marcmod As String, ByVal exist As Global.System.Nullable(Of Integer), ByVal order As String, ByVal grupo As String, ByVal compra As String, ByVal resg As String, ByVal resc As String) As MELDataSet.sp_consultaCatalogoModelosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (marcmod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(marcmod,String)
            End If
            If (exist.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(exist.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (order Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(order,String)
            End If
            If (grupo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(grupo,String)
            End If
            If (compra Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(compra,String)
            End If
            If (resg Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(resg,String)
            End If
            If (resc Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(resc,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaCatalogoModelosDataTable = New MELDataSet.sp_consultaCatalogoModelosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaCodigoArancelarioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCodigoArancelario"
            tableMapping.ColumnMappings.Add("CodigoArancelario", "CodigoArancelario")
            tableMapping.ColumnMappings.Add("Impuesto", "Impuesto")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCodigoArancelario"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaCodigoArancelarioDataTable, ByVal cod As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As String) As MELDataSet.sp_consultaCodigoArancelarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaCodigoArancelarioDataTable = New MELDataSet.sp_consultaCodigoArancelarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCliente"
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Rif", "Rif")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Representante", "Representante")
            tableMapping.ColumnMappings.Add("Gerente", "Gerente")
            tableMapping.ColumnMappings.Add("codZona", "codZona")
            tableMapping.ColumnMappings.Add("zona", "zona")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("ClasificacionABC", "ClasificacionABC")
            tableMapping.ColumnMappings.Add("Autorizado", "Autorizado")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            tableMapping.ColumnMappings.Add("ContEspecial", "ContEspecial")
            tableMapping.ColumnMappings.Add("Celular", "Celular")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("user", "user")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("FletePago", "FletePago")
            tableMapping.ColumnMappings.Add("DireccionEntrega", "DireccionEntrega")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaClienteDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaClienteDataTable = New MELDataSet.sp_consultaClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaEmpresaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaEmpresa"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Rif", "Rif")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Telefono3", "Telefono3")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Activa", "Activa")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaEmpresa"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Razon", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaEmpresaDataTable, ByVal Razon As String, ByVal Id As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Razon Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Razon,String)
            End If
            If (Id.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Id.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Razon As String, ByVal Id As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaEmpresaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Razon Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Razon,String)
            End If
            If (Id.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Id.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaEmpresaDataTable = New MELDataSet.sp_consultaEmpresaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_Movimientos_AsociadosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_Movimientos_Asociados"
            tableMapping.ColumnMappings.Add("Egreso", "Egreso")
            tableMapping.ColumnMappings.Add("Oficina", "Oficina")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Ingreso", "Ingreso")
            tableMapping.ColumnMappings.Add("NumeroDeposito", "NumeroDeposito")
            tableMapping.ColumnMappings.Add("Banco", "Banco")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("IdS", "IdS")
            tableMapping.ColumnMappings.Add("NombreS", "NombreS")
            tableMapping.ColumnMappings.Add("IdC", "IdC")
            tableMapping.ColumnMappings.Add("NombreC", "NombreC")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_Movimientos_Asociados"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_Movimientos_AsociadosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consulta_Movimientos_AsociadosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consulta_Movimientos_AsociadosDataTable = New MELDataSet.sp_consulta_Movimientos_AsociadosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaUsuariosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaUsuarios"
            tableMapping.ColumnMappings.Add("Login", "Login")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaUsuarios"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.VarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaUsuariosDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As MELDataSet.sp_consultaUsuariosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaUsuariosDataTable = New MELDataSet.sp_consultaUsuariosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_movimiento_ProductosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_movimiento_Productos"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Existencia", "Existencia")
            tableMapping.ColumnMappings.Add("Vendidos", "Vendidos")
            tableMapping.ColumnMappings.Add("Promedio", "Promedio")
            tableMapping.ColumnMappings.Add("Meses", "Meses")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Bs", "Bs")
            tableMapping.ColumnMappings.Add("Compras", "Compras")
            tableMapping.ColumnMappings.Add("Compras2", "Compras2")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_movimiento_Productos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MESES", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaDesde", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FechaHasta", Global.System.Data.SqlDbType.[Date], 3, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hasta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_movimiento_ProductosDataTable, ByVal MESES As Global.System.Nullable(Of Integer), ByVal FechaDesde As Global.System.Nullable(Of Date), ByVal FechaHasta As Global.System.Nullable(Of Date), ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Hasta As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MESES.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MESES.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FechaDesde.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FechaDesde.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FechaHasta.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FechaHasta.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Hasta.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Hasta.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MESES As Global.System.Nullable(Of Integer), ByVal FechaDesde As Global.System.Nullable(Of Date), ByVal FechaHasta As Global.System.Nullable(Of Date), ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Hasta As Global.System.Nullable(Of Integer)) As MELDataSet.sp_movimiento_ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MESES.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MESES.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FechaDesde.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FechaDesde.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FechaHasta.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FechaHasta.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Hasta.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Hasta.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_movimiento_ProductosDataTable = New MELDataSet.sp_movimiento_ProductosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosInvetarioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosInvetario"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CantidadAnterior", "CantidadAnterior")
            tableMapping.ColumnMappings.Add("CantidadActual", "CantidadActual")
            tableMapping.ColumnMappings.Add("DIF", "DIF")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("CodigoEstante", "CodigoEstante")
            tableMapping.ColumnMappings.Add("CodigoCuarto", "CodigoCuarto")
            tableMapping.ColumnMappings.Add("CodigoAlmacen", "CodigoAlmacen")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosInvetario"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodI", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosInvetarioDataTable, ByVal CodI As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodI.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodI.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CodI As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaProductosInvetarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodI.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodI.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaProductosInvetarioDataTable = New MELDataSet.sp_consultaProductosInvetarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosParaInventarioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosParaInventario"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Cantidad2", "Cantidad2")
            tableMapping.ColumnMappings.Add("Dif", "Dif")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("CodigoEstante", "CodigoEstante")
            tableMapping.ColumnMappings.Add("CodigoCuarto", "CodigoCuarto")
            tableMapping.ColumnMappings.Add("CodigoAlmacen", "CodigoAlmacen")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosParaInventario"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosParaInventarioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaProductosParaInventarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaProductosParaInventarioDataTable = New MELDataSet.sp_consultaProductosParaInventarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaProductosOcultosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaProductosOcultos"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            tableMapping.ColumnMappings.Add("MarcaProducto", "MarcaProducto")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProductosOcultos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaProductosOcultosDataTable, ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaProductosOcultosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaProductosOcultosDataTable = New MELDataSet.sp_consultaProductosOcultosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_infoGeneralTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_infoGeneral"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Cant", "Cant")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Foto", "Foto")
            tableMapping.ColumnMappings.Add("OEM", "OEM")
            tableMapping.ColumnMappings.Add("Var1", "Var1")
            tableMapping.ColumnMappings.Add("Var2", "Var2")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Vendidos", "Vendidos")
            tableMapping.ColumnMappings.Add("Grupo", "Grupo")
            tableMapping.ColumnMappings.Add("Proveedor", "Proveedor")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            tableMapping.ColumnMappings.Add("Oculto", "Oculto")
            tableMapping.ColumnMappings.Add("PorComplementar", "PorComplementar")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_infoGeneral"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_infoGeneralDataTable, ByVal tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_infoGeneralDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_infoGeneralDataTable = New MELDataSet.sp_infoGeneralDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaCatalogoModelos_UbicTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaCatalogoModelos_Ubic"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("PrecioVenta", "PrecioVenta")
            tableMapping.ColumnMappings.Add("Empaque", "Empaque")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("MarcaProducto", "MarcaProducto")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("resaltarc", "resaltarc")
            tableMapping.ColumnMappings.Add("resaltar", "resaltar")
            tableMapping.ColumnMappings.Add("Ubic", "Ubic")
            tableMapping.ColumnMappings.Add("cantTramo", "cantTramo")
            tableMapping.ColumnMappings.Add("almacen", "almacen")
            tableMapping.ColumnMappings.Add("cuarto", "cuarto")
            tableMapping.ColumnMappings.Add("estante", "estante")
            tableMapping.ColumnMappings.Add("tramo", "tramo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCatalogoModelos_Ubic"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@marcmod", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@exist", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@grupo", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@compra", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resg", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@resc", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ubic", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaCatalogoModelos_UbicDataTable, ByVal marcmod As String, ByVal exist As Global.System.Nullable(Of Integer), ByVal order As String, ByVal grupo As String, ByVal compra As String, ByVal resg As String, ByVal resc As String, ByVal ubic As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (marcmod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(marcmod,String)
            End If
            If (exist.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(exist.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (order Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(order,String)
            End If
            If (grupo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(grupo,String)
            End If
            If (compra Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(compra,String)
            End If
            If (resg Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(resg,String)
            End If
            If (resc Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(resc,String)
            End If
            If (ubic Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(ubic,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal marcmod As String, ByVal exist As Global.System.Nullable(Of Integer), ByVal order As String, ByVal grupo As String, ByVal compra As String, ByVal resg As String, ByVal resc As String, ByVal ubic As String) As MELDataSet.sp_consultaCatalogoModelos_UbicDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (marcmod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(marcmod,String)
            End If
            If (exist.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(exist.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (order Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(order,String)
            End If
            If (grupo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(grupo,String)
            End If
            If (compra Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(compra,String)
            End If
            If (resg Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(resg,String)
            End If
            If (resc Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(resc,String)
            End If
            If (ubic Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(ubic,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaCatalogoModelos_UbicDataTable = New MELDataSet.sp_consultaCatalogoModelos_UbicDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_infoGeneralComprasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_infoGeneralCompras"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Cant", "Cant")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Foto", "Foto")
            tableMapping.ColumnMappings.Add("OEM", "OEM")
            tableMapping.ColumnMappings.Add("Var1", "Var1")
            tableMapping.ColumnMappings.Add("Var2", "Var2")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Vendidos", "Vendidos")
            tableMapping.ColumnMappings.Add("Grupo", "Grupo")
            tableMapping.ColumnMappings.Add("Proveedor", "Proveedor")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            tableMapping.ColumnMappings.Add("Oculto", "Oculto")
            tableMapping.ColumnMappings.Add("PorComplementar", "PorComplementar")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_infoGeneralCompras"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodPed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodComp", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sta", Global.System.Data.SqlDbType.VarChar, 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_infoGeneralComprasDataTable, ByVal CodPed As Global.System.Nullable(Of Integer), ByVal CodComp As Global.System.Nullable(Of Integer), ByVal tipo As Global.System.Nullable(Of Integer), ByVal sta As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CodComp.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodComp.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (sta Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(sta,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CodPed As Global.System.Nullable(Of Integer), ByVal CodComp As Global.System.Nullable(Of Integer), ByVal tipo As Global.System.Nullable(Of Integer), ByVal sta As String) As MELDataSet.sp_infoGeneralComprasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodPed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodPed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CodComp.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodComp.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (sta Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(sta,String)
            End If
            Dim dataTable As MELDataSet.sp_infoGeneralComprasDataTable = New MELDataSet.sp_infoGeneralComprasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaPedidoClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaPedidoCliente"
            tableMapping.ColumnMappings.Add("CodigoPedido", "CodigoPedido")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Facturado", "Facturado")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("DiasCred", "DiasCred")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("chequeado", "chequeado")
            tableMapping.ColumnMappings.Add("Autorizado", "Autorizado")
            tableMapping.ColumnMappings.Add("Bultos", "Bultos")
            tableMapping.ColumnMappings.Add("ModalidadEnvio", "ModalidadEnvio")
            tableMapping.ColumnMappings.Add("ObservacionInterna", "ObservacionInterna")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaPedidoCliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaPedidoClienteDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaPedidoClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaPedidoClienteDataTable = New MELDataSet.sp_consultaPedidoClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaNotasCreditoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaNotasCredito"
            tableMapping.ColumnMappings.Add("NroControl", "NroControl")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("CodigoNotaCredito", "CodigoNotaCredito")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Control", "Control")
            tableMapping.ColumnMappings.Add("Control2", "Control2")
            tableMapping.ColumnMappings.Add("Usuario", "Usuario")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaNotasCredito"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaNotasCreditoDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As MELDataSet.sp_consultaNotasCreditoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaNotasCreditoDataTable = New MELDataSet.sp_consultaNotasCreditoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaFactVentasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaFactVentas"
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("ControlInicio", "ControlInicio")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("NumeroFactura", "NumeroFactura")
            tableMapping.ColumnMappings.Add("Control", "Control")
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaFactVentas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nom", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaFactVentasDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Nom As String) As MELDataSet.sp_consultaFactVentasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Nom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Nom,String)
            End If
            Dim dataTable As MELDataSet.sp_consultaFactVentasDataTable = New MELDataSet.sp_consultaFactVentasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaDiferenciasInventarioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaDiferenciasInventario"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CantidadAnterior", "CantidadAnterior")
            tableMapping.ColumnMappings.Add("CantidadActual", "CantidadActual")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaDiferenciasInventario"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodI", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaDiferenciasInventarioDataTable, ByVal CodI As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodI.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodI.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CodI As Global.System.Nullable(Of Integer)) As MELDataSet.sp_consultaDiferenciasInventarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodI.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodI.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_consultaDiferenciasInventarioDataTable = New MELDataSet.sp_consultaDiferenciasInventarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_ubicacion_productosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_ubicacion_productos"
            tableMapping.ColumnMappings.Add("CodigoProducto", "CodigoProducto")
            tableMapping.ColumnMappings.Add("codigoF", "codigoF")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CantidadExistencia", "CantidadExistencia")
            tableMapping.ColumnMappings.Add("aqui", "aqui")
            tableMapping.ColumnMappings.Add("CodigoAlmacen", "CodigoAlmacen")
            tableMapping.ColumnMappings.Add("CodigoCuarto", "CodigoCuarto")
            tableMapping.ColumnMappings.Add("CodigoEstante", "CodigoEstante")
            tableMapping.ColumnMappings.Add("CodigoTramo", "CodigoTramo")
            tableMapping.ColumnMappings.Add("Ubicacion", "Ubicacion")
            tableMapping.ColumnMappings.Add("aqui2", "aqui2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_ubicacion_productos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_ubicacion_productosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consulta_ubicacion_productosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consulta_ubicacion_productosDataTable = New MELDataSet.sp_consulta_ubicacion_productosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consulta_actividades_SINPROTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consulta_actividades_SINPRO"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Usuario", "Usuario")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Actividad", "Actividad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consulta_actividades_SINPRO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consulta_actividades_SINPRODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consulta_actividades_SINPRODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consulta_actividades_SINPRODataTable = New MELDataSet.sp_consulta_actividades_SINPRODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_consultaRecibos2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_consultaRecibos2"
            tableMapping.ColumnMappings.Add("CodigoRecibo", "CodigoRecibo")
            tableMapping.ColumnMappings.Add("NControl", "NControl")
            tableMapping.ColumnMappings.Add("codigoCliente", "codigoCliente")
            tableMapping.ColumnMappings.Add("razonsocial", "razonsocial")
            tableMapping.ColumnMappings.Add("contEspecial", "contEspecial")
            tableMapping.ColumnMappings.Add("NDeposito", "NDeposito")
            tableMapping.ColumnMappings.Add("phrase", "phrase")
            tableMapping.ColumnMappings.Add("PD", "PD")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Confirmado", "Confirmado")
            tableMapping.ColumnMappings.Add("ComprobanteRecibido", "ComprobanteRecibido")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaRecibos2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_consultaRecibos2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.sp_consultaRecibos2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.sp_consultaRecibos2DataTable = New MELDataSet.sp_consultaRecibos2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_ConsultaProductosProveedoresTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_ConsultaProductosProveedores"
            tableMapping.ColumnMappings.Add("CodigoInterno", "CodigoInterno")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            tableMapping.ColumnMappings.Add("Var1", "Var1")
            tableMapping.ColumnMappings.Add("Var2", "Var2")
            tableMapping.ColumnMappings.Add("Proveedor", "Proveedor")
            tableMapping.ColumnMappings.Add("CodigoProductoF", "CodigoProductoF")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_ConsultaProductosProveedores"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codF", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.sp_ConsultaProductosProveedoresDataTable, ByVal codF As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codF As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.sp_ConsultaProductosProveedoresDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codF.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codF.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.sp_ConsultaProductosProveedoresDataTable = New MELDataSet.sp_ConsultaProductosProveedoresDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Table_AlmacenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Table_Almacen"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaAlmacenes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Table_AlmacenDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.Table_AlmacenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.Table_AlmacenDataTable = New MELDataSet.Table_AlmacenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_CuartoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Cuarto"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoAlmacen", "CodigoAlmacen")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCuartos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_CuartoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.Tbl_CuartoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.Tbl_CuartoDataTable = New MELDataSet.Tbl_CuartoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_EstanteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Estante"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoCuarto", "CodigoCuarto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaEstantes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_EstanteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.Tbl_EstanteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.Tbl_EstanteDataTable = New MELDataSet.Tbl_EstanteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_TramoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Tramo"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("CodigoEstante", "CodigoEstante")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaTramos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_TramoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MELDataSet.Tbl_TramoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MELDataSet.Tbl_TramoDataTable = New MELDataSet.Tbl_TramoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_ModeloTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Modelo"
            tableMapping.ColumnMappings.Add("Modelo", "Modelo")
            tableMapping.ColumnMappings.Add("Marca", "Marca")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaModelo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelo", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_ModeloDataTable, ByVal modelo As String, ByVal Tipo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (modelo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(modelo,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal modelo As String, ByVal Tipo As Global.System.Nullable(Of Integer)) As MELDataSet.Tbl_ModeloDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (modelo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(modelo,String)
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.Tbl_ModeloDataTable = New MELDataSet.Tbl_ModeloDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_VendedorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Vendedor"
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Cedula", "Cedula")
            tableMapping.ColumnMappings.Add("Telefono", "Telefono")
            tableMapping.ColumnMappings.Add("Celular", "Celular")
            tableMapping.ColumnMappings.Add("Cuenta", "Cuenta")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Zona", "Zona")
            tableMapping.ColumnMappings.Add("DirEnvio", "DirEnvio")
            tableMapping.ColumnMappings.Add("Banco", "Banco")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            tableMapping.ColumnMappings.Add("Observaciones", "Observaciones")
            tableMapping.ColumnMappings.Add("OcultaCom", "OcultaCom")
            tableMapping.ColumnMappings.Add("User", "User")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaVendedor"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_VendedorDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.Tbl_VendedorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.Tbl_VendedorDataTable = New MELDataSet.Tbl_VendedorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_FabricaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Fabrica"
            tableMapping.ColumnMappings.Add("CodigoFabrica", "CodigoFabrica")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("RepresentanteLegal", "RepresentanteLegal")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("ClasificacionABC", "ClasificacionABC")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Paginaweb", "Paginaweb")
            tableMapping.ColumnMappings.Add("PersonaContacto", "PersonaContacto")
            tableMapping.ColumnMappings.Add("TelefonoContacto", "TelefonoContacto")
            tableMapping.ColumnMappings.Add("PersonaContacto2", "PersonaContacto2")
            tableMapping.ColumnMappings.Add("TelefonoContacto2", "TelefonoContacto2")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaProveedor"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_FabricaDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.Tbl_FabricaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.Tbl_FabricaDataTable = New MELDataSet.Tbl_FabricaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_GrupoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Grupo"
            tableMapping.ColumnMappings.Add("CodigoGrupo", "CodigoGrupo")
            tableMapping.ColumnMappings.Add("NombreGrupo", "NombreGrupo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaGrupo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Valor", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_GrupoDataTable, ByVal cod As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Valor As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Valor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Valor,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer), ByVal Tipo As Global.System.Nullable(Of Integer), ByVal Valor As String) As MELDataSet.Tbl_GrupoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Valor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Valor,String)
            End If
            Dim dataTable As MELDataSet.Tbl_GrupoDataTable = New MELDataSet.Tbl_GrupoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Tbl_ClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tbl_Cliente"
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("Rif", "Rif")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Telefono1", "Telefono1")
            tableMapping.ColumnMappings.Add("Telefono2", "Telefono2")
            tableMapping.ColumnMappings.Add("Fax", "Fax")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Representante", "Representante")
            tableMapping.ColumnMappings.Add("Gerente", "Gerente")
            tableMapping.ColumnMappings.Add("codZona", "codZona")
            tableMapping.ColumnMappings.Add("zona", "zona")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("ClasificacionABC", "ClasificacionABC")
            tableMapping.ColumnMappings.Add("Autorizado", "Autorizado")
            tableMapping.ColumnMappings.Add("eliminado", "eliminado")
            tableMapping.ColumnMappings.Add("ContEspecial", "ContEspecial")
            tableMapping.ColumnMappings.Add("Celular", "Celular")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("CodigoVendedor", "CodigoVendedor")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("user", "user")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("FletePago", "FletePago")
            tableMapping.ColumnMappings.Add("DireccionEntrega", "DireccionEntrega")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Tesis_Nueva.My.MySettings.Default.MELPRUEBAConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_consultaCliente"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MELDataSet.Tbl_ClienteDataTable, ByVal cod As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cod As Global.System.Nullable(Of Integer)) As MELDataSet.Tbl_ClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cod.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(cod.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As MELDataSet.Tbl_ClienteDataTable = New MELDataSet.Tbl_ClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
